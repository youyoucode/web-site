! function e(t, n, r) {
    function s(o, u) { if (!n[o]) { if (!t[o]) { var a = "function" == typeof require && require; if (!u && a) return a(o, !0); if (i) return i(o, !0); var f = new Error("Cannot find module '" + o + "'"); throw f.code = "MODULE_NOT_FOUND", f } var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function(e) { var n = t[o][1][e]; return s(n || e) }, l, l.exports, e, t, n, r) } return n[o].exports } for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]); return s }({
    1: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var PreloaderView_1 = require("./PreloaderView"),
            UIManager_1 = require("./manager/UIManager"),
            MainScene_1 = require("./view/scene/MainScene"),
            DataManager_1 = require("./manager/DataManager"),
            Main = function(_super) {
                function Main() { var _this = _super.call(this) || this; return _this.addEventListener(egret.Event.ADDED_TO_STAGE, _this.onAddToStage, _this), _this } return __extends(Main, _super), Main.prototype.onAddToStage = function(event) { this.loadingView = new PreloaderView_1.default, this.stage.addChild(this.loadingView), window.location.href.indexOf("runner.html") < 0 && (document.getElementById("splash-cover").style.display = "block"), RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.loadConfig("resource/default.res.json", "resource/") }, Main.prototype.onConfigComplete = function(event) { RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), RES.loadGroup("preload") }, Main.prototype.onResourceLoadComplete = function(event) { "preload" == event.groupName && (this.stage.removeChild(this.loadingView), RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), window.location.href.indexOf("runner.html") >= 0 ? this.enterGame() : (DataManager_1.default.getInstance().addEventListener(DataManager_1.default.SERVERINITIALLED, this.enterGame, this), localStorage.getItem("user_id") || localStorage.setItem("user_id", "guest_" + Math.floor(1e5 * Math.random())), DataManager_1.default.getInstance().userName = egret.localStorage.getItem("user_id"), DataManager_1.default.getInstance().init())) }, Main.prototype.onItemLoadError = function(event) { console.warn("Url:" + event.resItem.url + " has failed to load") }, Main.prototype.onResourceLoadError = function(event) { console.warn("Group:" + event.groupName + " has failed to load"), this.onResourceLoadComplete(event) }, Main.prototype.onResourceProgress = function(event) { "preload" == event.groupName && this.loadingView.setProgress(event.itemsLoaded, event.itemsTotal) }, Main.prototype.enterGame = function() { UIManager_1.default.getInstance().init(this.stage), UIManager_1.default.getInstance().pushScene(new MainScene_1.default, 1) }, Main }(egret.DisplayObjectContainer);
        exports.default = Main }, { "./PreloaderView": 2, "./manager/DataManager": 6, "./manager/UIManager": 8, "./view/scene/MainScene": 25 }],
    2: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var PreloaderView = function(_super) {
            function PreloaderView() { var _this = _super.call(this) || this; return _this.createView(), _this } return __extends(PreloaderView, _super), PreloaderView.prototype.createView = function() { this.textField = new egret.TextField, this.addChild(this.textField), this.textField.y = 300, this.textField.width = 480, this.textField.height = 100, this.textField.textAlign = "center" }, PreloaderView.prototype.setProgress = function(current, total) { this.textField.text = "Loading..." + current + "/" + total }, PreloaderView }(egret.Sprite);
        exports.default = PreloaderView }, {}],
    3: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var Scene = function(_super) {
            function Scene() { return _super.call(this) || this } return __extends(Scene, _super), Scene.prototype.getData = function() { return this._data }, Scene.prototype.setData = function(data) { this._data = data }, Scene.prototype.onEnter = function() {}, Scene.prototype.openNewProject = function() {}, Scene.prototype.callback = function(data) {}, Scene }(egret.Sprite);
        exports.default = Scene }, {}],
    4: [function(require, module, exports) { Main = require("./Main").default, egret.runEgret({ renderMode: "webgl", audioType: 0 }) }, { "./Main": 1 }],
    5: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var DataManager_1 = require("./DataManager"),
            ConfigManager = function() {
                function ConfigManager() { this._dictionary = new Object, this._textDic = new Object } return ConfigManager.getInstance = function() { return this._instance || (this._instance = new ConfigManager) }, ConfigManager.prototype.hasText = function(url) { return !!this._textDic[url] }, ConfigManager.prototype.getText = function(url) { return this._textDic[url] }, ConfigManager.prototype.saveText = function(url, text) { this._textDic[url] = text }, ConfigManager.prototype.parseConfig = function(fileName) { var fileData = RES.getRes(fileName);
                    console.assert(void 0 != fileData, "[ConfigManager.parseConfig] file " + fileName + "找不到！！！"); var keys, lines = fileData.split("\n");
                    this._dictionary[fileName] = new Object, "skill" == fileName && (this._dictionary[fileName + "name"] = new Object); for (var i = 0; i < lines.length - 1; i++)
                        if (0 == i) keys = lines[i].split("^");
                        else if (lines[i].length > 0) { for (var values = lines[i].split("^"), dat = new Object, n = 1; n < keys.length - 1; n++) dat[keys[n]] = values[n];
                        dat[keys[1]] && dat && (this._dictionary[fileName][dat[keys[1]]] = dat) } }, ConfigManager.prototype.init = function() { this.parseConfig("draw.csv"), this.parseConfig("picture.csv"), this.parseConfig("music.csv"), this.parseConfig("tool.csv") }, ConfigManager.prototype.loadConfig = function(fileName) { var url = "resource/config/" + fileName + ".csv",
                        cfgLoader = new egret.URLLoader;
                    cfgLoader.dataFormat = egret.URLLoaderDataFormat.TEXT, cfgLoader.addEventListener(egret.Event.COMPLETE, function(event) { ConfigManager.getInstance().parseConfig(fileName), event.target.dispatchEvent(new egret.Event(ConfigManager.CONFIGLOADED, !1, !1, fileName)) }, url), cfgLoader.load(new egret.URLRequest(url)) }, ConfigManager.prototype.getConfigs = function(fileName) { return this._dictionary[fileName] }, ConfigManager.prototype.getConfig = function(fileName, key) { return this._dictionary[fileName][key] }, ConfigManager.prototype.getValue = function(fileName, pkey, key) { return this._dictionary[fileName][pkey][key] }, ConfigManager.prototype.getLanguageByKey = function(pkey) { return DataManager_1.default.getInstance().getLanguage() ? this._dictionary["language.csv"][pkey].cn_value : this._dictionary["language.csv"][pkey].en_value }, ConfigManager.CONFIGLOADED = "config_loaded", ConfigManager }();
        exports.default = ConfigManager }, { "./DataManager": 6 }],
    6: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var DataManager = function(_super) {
            function DataManager() { var _this = null !== _super && _super.apply(this, arguments) || this; return _this.roomUIDs = "", _this.inRoomName = "", _this.autoRunMode = !0, _this.cn_language = !1, _this.teacherCtrl = !1, _this.teacherID = 0, _this.studentID = 0, _this.teacherLook = 0, _this.isCommunitWork = !1, _this.serverIdHeader = "llid_", _this.roomNameHeader = "llroom_", _this.urlLoaded = [], _this._isInitialled = !1, _this._gateSocketPort = "4010", _this._gateSocketIP = "www.youyoucode.cn", _this } return __extends(DataManager, _super), DataManager.getInstance = function() { return null == this._instance && (this._instance = new DataManager), this._instance }, DataManager.prototype.getLanguage = function() { return this.cn_language }, DataManager.prototype.changeLanguage = function() { this.cn_language = !this.cn_language }, DataManager.prototype.init = function() { this.roomDatas = [], this.inRoomName = "", this.studentWork = null, this.teacherID = 0; var gatePomelo = new Pomelo;
                gatePomelo.on("io-error", function(e) { console.log("socket has error:") }), this.socket = new Pomelo, this.socket.on("io-error", function(e) { console.log("socket has error:") }), this.socket.on("close", function(e) { console.log("socket is closed!") }), this.socket.on("onResponse", function(e) { console.log("onResponse") }); var that = this;
                gatePomelo.init({ host: this._gateSocketIP, port: this._gateSocketPort }, function() { gatePomelo.request("gate.gateHandler.queryEntry", { name: that.userName }, function(data) { gatePomelo.disconnect(), 500 === data.code && console.log("Has error with GATE connection"), that.uid = data.uid, that.socket.init({ host: data.host, port: data.port }, function() { that._isInitialled = !0, that.dispatchEvent(new egret.Event(DataManager.SERVERINITIALLED)) }) }) }) }, DataManager.prototype.callServerSocket = function(route, value) { var _this = this;
                this._isInitialled ? (value ? value.uid = this.uid : value = { uid: this.uid }, console.log("[ServerManager.callServerSocket] sent data:", value), DataManager.isWrong && (window.location.reload(), DataManager.isWrong = !1), this.socket.request(route, value, function(data) { _this.dispatchEvent(new egret.Event(DataManager.SERVERCALLBACK, !1, !1, { route: route, data: data })) })) : console.log("服务器连接还没有初始化完成") }, DataManager.prototype.onServerCall = function(route, cb) { this._isInitialled && this.socket.on(route, cb) }, DataManager.CONFIGLOADED = "config_loaded", DataManager.CONFIGALLLOADED = "config_all_loaded", DataManager.SERVERINITIALLED = "server_data_initial", DataManager.SERVERCALLBACK = "server_data_callback", DataManager.USER_GET_TOKEN = "chat.chatHandler.getToken", DataManager.ROUTE_LOGIN = "connector.entryHandler.enter", DataManager.GAME_NEW_WORK = "game.gameHandler.newWork", DataManager.GAME_IMPORT_WORK = "game.gameHandler.importWork", DataManager.GAME_CLONE_WORK = "game.gameHandler.cloneWork", DataManager.GAME_SAVE_WORK = "game.gameHandler.saveWork", DataManager.GAME_RENAME_WORK = "game.gameHandler.renameWork", DataManager.GAME_JSPLUS_WORK = "game.gameHandler.changeJs", DataManager.GAME_MODE_WORK = "game.gameHandler.changeMode", DataManager.GAME_GET_WORK = "game.gameHandler.getWork", DataManager.GAME_DELETE_WORK = "game.gameHandler.deleteWork", DataManager.GAME_GET_PAGES = "game.gameHandler.getPages", DataManager.GAME_PUBLISH_PAGE = "game.gameHandler.publishPage", DataManager.GAME_AUTOSAVE_WORK = "game.gameHandler.autoSaveWork", DataManager.GAME_SET_TEACHER = "game.gameHandler.setTeacher", DataManager.GAME_ADD_AMOUNT = "game.gameHandler.addAmount", DataManager.GAME_SET_NICKNAME = "game.gameHandler.setNickname", DataManager.GAME_GET_PAGEBYID = "game.gameHandler.getPageByID", DataManager.GAME_GET_CLASSES = "game.gameHandler.getClasses", DataManager.GAME_ROOM_CREATE = "chat.chatHandler.create", DataManager.GAME_ROOM_JOIN = "connector.entryHandler.join", DataManager.GAME_ROOM_LEAVE = "connector.entryHandler.leave", DataManager.GAME_ROOM_SEND = "connector.entryHandler.send", DataManager.GAME_PASS_CODE = "connector.entryHandler.workToB", DataManager.GAME_PUBLISH_CODE = "connector.entryHandler.workToC", DataManager.GAME_CLASS_BEGIN = "connector.entryHandler.beginClass", DataManager.GAME_CLASS_END = "connector.entryHandler.endClass", DataManager.GAME_HAND_UP = "connector.entryHandler.handup", DataManager.GAME_HAND_DOWN = "connector.entryHandler.handdown", DataManager.GAME_HAND_CHOOSE = "connector.entryHandler.choose", DataManager.GAME_HAND_STOP = "connector.entryHandler.handstop", DataManager.GAME_CODE_CTRL = "connector.entryHandler.codeCtrl", DataManager.GAME_CTRL_STOP = "connector.entryHandler.stopCtrl", DataManager.GAME_CODE_UP = "connector.entryHandler.upCode", DataManager.GAME_CODE_LOOK = "connector.entryHandler.lookCode", DataManager.GAME_CODE_STOPLOOK = "connector.entryHandler.stopLookCode", DataManager.GAME_WORK_GOOD = "connector.entryHandler.workGood", DataManager.GAME_USER_INVITE = "connector.entryHandler.invite", DataManager.GAME_USER_REFRESH = "connector.entryHandler.refreshPC", DataManager.GAME_MOUSE_CLICK = "connector.entryHandler.mouseClick", DataManager.GAME_CLASS_LIST = "game.gameHandler.getClasses", DataManager.ROUTE_WORK_UPDATE = "onWorkUpdate", DataManager.ROUTE_REFRESH_PAGE = "onRefreshPage", DataManager.ROUTE_BACK_JOIN = "onJoin", DataManager.ROUTE_CLASS_LEAVE = "onLeave", DataManager.ROUTE_CHAT_CONTENT = "onChat", DataManager.ROUTE_CLASS_BEGIN = "onClassBegin", DataManager.ROUTE_CLASS_END = "onClassEnd", DataManager.ROUTE_CLASS_HANDUP = "onHandup", DataManager.ROUTE_CLASS_HANDDN = "onHanddown", DataManager.ROUTE_CLASS_CHOOSE = "onChoose", DataManager.ROUTE_CLASS_STOP = "onHandStop", DataManager.ROUTE_CLASS_CTRL = "onCtrl", DataManager.ROUTE_CLASS_CTRLSTOP = "onCtrlStop", DataManager.ROUTE_CLASS_CODE = "onCodeUp", DataManager.ROUTE_SAY_GOOD = "onGoodSay", DataManager.ROUTE_CLASS_INVITED = "onInvited", DataManager.ROUTE_CLASS_REFRESH = "onRefresh", DataManager.ROUTE_MOUSE_CLICK = "onMouseClick", DataManager.ROUTE_CLASS_LOOK = "onLook", DataManager.ROUTE_CLASS_LOOKSTOP = "onLookStop", DataManager.netStatus = null, DataManager.llido = null, DataManager.llidt = null, DataManager.isWrong = !1, DataManager }(egret.EventDispatcher);
        exports.default = DataManager }, {}],
    7: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var OpenProjectView_1 = require("../view/document/OpenProjectView"),
            CloneView_1 = require("../view/document/CloneView"),
            LeftBarView_1 = require("../view/document/LeftBarView"),
            NewProjectView_1 = require("../view/document/NewProjectView"),
            MenuContentView_1 = require("../view/document/MenuContentView"),
            LoginView_1 = require("../view/document/LoginView"),
            AppMain_1 = require("../view/document/AppMain"),
            ImportProjectView_1 = require("../view/document/ImportProjectView"),
            DocumentManager = function() {
                function DocumentManager() {} return DocumentManager.getInstance = function() { return null == this._instance && (this._instance = new DocumentManager), this._instance }, DocumentManager.prototype.init = function() { OpenProjectView_1.default.initOpenProject(), LeftBarView_1.default.init(), CloneView_1.default.init(), NewProjectView_1.default.init(), ImportProjectView_1.default.init(), MenuContentView_1.default.init(), LoginView_1.default.init(), AppMain_1.default.init() }, DocumentManager }();
        exports.default = DocumentManager }, { "../view/document/AppMain": 14, "../view/document/CloneView": 15, "../view/document/ImportProjectView": 16, "../view/document/LeftBarView": 17, "../view/document/LoginView": 18, "../view/document/MenuContentView": 19, "../view/document/NewProjectView": 20, "../view/document/OpenProjectView": 21 }],
    8: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var ConfigManager_1 = require("./ConfigManager"),
            UIManager = function() {
                function UIManager() {} return UIManager.getInstance = function() { return null == this._instance && (this._instance = new UIManager), this._instance }, UIManager.prototype.init = function(stage) { this._scenes = [], this._stage = stage }, UIManager.prototype.serverBack = function(data) { this._scenes[this._scenes.length - 1].callback(data) }, UIManager.prototype.getRunningScene = function() { return this._scenes[this._scenes.length - 1] }, UIManager.prototype.popScene = function() { this._stage.removeChild(this._scenes[this._scenes.length - 1]), this._scenes.pop(), this._scenes[this._scenes.length - 1].onEnter() }, UIManager.prototype.pushScene = function(scene, data) { this._scenes.push(scene), this._stage.addChild(this._scenes[this._scenes.length - 1]), this._scenes[this._scenes.length - 1].onEnter(), data && this._scenes[this._scenes.length - 1].setData(data) }, UIManager.prototype.getStage = function() { return this._stage }, UIManager.prototype.replaceScene = function(scene, data) { this.popScene(), this._scenes.push(scene), this._stage.addChild(this._scenes[this._scenes.length - 1]), this._scenes[this._scenes.length - 1].onEnter(), data && this._scenes[this._scenes.length - 1].setData(data) }, UIManager.prototype.showMessage = function(test) { $("#system-notice-text").text(ConfigManager_1.default.getInstance().getLanguageByKey(test)), document.getElementById("system-notice-text").style.display = "block", TweenLite.killTweensOf(this._stage), TweenLite.to(this._stage, 1.5, { onComplete: function() { document.getElementById("system-notice-text").style.display = "none" } }) }, UIManager.prototype.showText = function(txt) { $("#system-notice-text").text(txt), document.getElementById("system-notice-text").style.display = "block", TweenLite.killTweensOf(this._stage), TweenLite.to(this._stage, 1.5, { onComplete: function() { document.getElementById("system-notice-text").style.display = "none" } }) }, UIManager }();
        exports.default = UIManager }, { "./ConfigManager": 5 }],
    9: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var CodeWorker_1 = require("../worker/CodeWorker"),
            EditorView_1 = require("../view/sprite/EditorView"),
            WorkerManager = function() {
                function WorkerManager() { this.funcNames = {}, this._language = "javascript", this._markers = [] } return Object.defineProperty(WorkerManager.prototype, "language", { get: function() { return this._language }, set: function(l) { this._language = l }, enumerable: !0, configurable: !0 }), WorkerManager.getInstance = function() { return null == this._instance && (this._instance = new WorkerManager), this._instance }, WorkerManager.prototype.init = function(actor) { this._mainWorker = new CodeWorker_1.default(actor), this._editorView = new EditorView_1.default, this._editorView.init() }, WorkerManager.prototype.changeLangue = function(l) { this.language != l && (this._editorView && this._editorView.dispose(), this._editorView = new EditorView_1.default, this._editorView.init(l), this.updateHighLight(), this.language = l) }, WorkerManager.prototype.saveFunctionName = function(l, v) { this.funcNames[l] = v }, WorkerManager.prototype.getFunctionName = function(l) { return this.funcNames[l] }, WorkerManager.prototype.getMainWork = function() { return this._mainWorker }, WorkerManager.prototype.getEditor = function() { return this._editorView }, WorkerManager.prototype.dispose = function() { this._mainWorker.dispose() }, WorkerManager.prototype.updateHighLight = function() { this._markers = [], this._mainWorker.getEngine().lastAST && this.setAstCodeHighLight(this._mainWorker.getEngine().lastAST) }, WorkerManager.prototype.setEditorText = function(text) { this._editorView.editor.setValue(text, 1) }, WorkerManager.prototype.getEditorText = function() { return this._editorView.editor.getSession().getValue() }, WorkerManager.prototype.insertSnippet = function(snippet) { this._editorView.editor.completer && this._editorView.editor.completer.insertMatch(snippet, this._editorView.editor) }, WorkerManager.prototype.getEffectiveCodeLine = function() { return this._editorView.getValidCodeLines() }, WorkerManager.prototype.setAstCodeHighLight = function(ast) { switch (this._editorView.language) {
                        case "javascript":
                            this.setJSAstCodeHighLight(ast); break;
                        case "python":
                            this.setPythonAstCodeHighLight(ast) } }, WorkerManager.prototype.saveObj = function(obj) { var line = 0;
                    this._mainWorker._codeEngine._aether.esperEngine.evaluator.topFrame.ast.originalRange && (line = this._mainWorker._codeEngine._aether.esperEngine.evaluator.topFrame.ast.originalRange.start.row); var funcName = this.getFunctionName(line); return funcName && this._mainWorker._codeEngine.addObject(funcName, obj), obj }, WorkerManager.prototype.setJSAstCodeHighLight = function(ast) { var range = ast.loc,
                        Range = ace.require("./range").Range,
                        rr = new Range(range.start.line - 1, range.start.column, range.end.line - 1, range.end.column);
                    this._markers.push(this._editorView.editor.getSession().addMarker(rr, "executing", "text", !0)), this.highlightCurrGutterLine(range.start.line) }, WorkerManager.prototype.setPythonAstCodeHighLight = function(ast) { var range = ast.originalRange; if (range) { var startLine = range.start.row,
                            startColumn = range.start.col,
                            endLine = range.end.row,
                            endColumn = range.end.col,
                            initStartLine = startLine,
                            initEndColumn = endColumn; if (ast.srcName && "CallExpression" === ast.type) { for (var lineNum = this._editorView.editor.getSession().getLength(), srcPart = ast.srcName.split("(")[0], line = this._editorView.editor.getSession().getLine(initStartLine); - 1 === line.indexOf(srcPart);)
                                if (line = this._editorView.editor.getSession().getLine(++initStartLine), -1 != line.indexOf(srcPart) && (initEndColumn = srcPart.length), initStartLine >= lineNum) { initStartLine = startLine, initEndColumn = endColumn; break }
                            startLine = endLine = initStartLine, endColumn = initEndColumn } var Range = ace.require("./range").Range,
                            rr = new Range(startLine, startColumn, endLine, endColumn);
                        this._markers.push(this._editorView.editor.getSession().addMarker(rr, "executing", "text", !0)), this.highlightCurrGutterLine(startLine), ast.srcName && ast.srcName.indexOf(".") } }, WorkerManager.prototype.highlightCurrGutterLine = function(row) { for (var docLength = this._editorView.editor.getSession().getLength(), i = 0; i < docLength; ++i) this._editorView.editor.renderer.removeGutterDecoration(i, "executing");
                    row > 0 && (this._editorView.editor.renderer.addGutterDecoration(row, "executing"), this._editorView.editor.clearSelection(), this._editorView.editor.moveCursorTo(row), this._editorView.editor.renderer.scrollToRow(row)) }, WorkerManager }();
        exports.default = WorkerManager }, { "../view/sprite/EditorView": 27, "../worker/CodeWorker": 30 }],
    10: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var ColorUtil = function() {
            function ColorUtil() {} return ColorUtil.getColor = function(n) { return "yellow" == n ? 16776960 : "red" == n ? 16711680 : "green" == n ? 65280 : "blue" == n ? 255 : "black" == n ? 0 : "white" == n ? 16777215 : "pink" == n ? 16761035 : "purple" == n ? 9699539 : "brown" == n ? 10824234 : "orange" == n ? 16753920 : 16777215 }, ColorUtil }();
        exports.default = ColorUtil }, {}],
    11: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var PlistParser = function() {
            function PlistParser(plistName) { this.isLoop = !1, this._name = plistName, this._allTexture = new Object; var plist = RES.getRes(plistName + ".json"),
                    image = new egret.Bitmap;
                image.texture = RES.getRes(plist.meta.image); for (var i = 0; i < plist.frames.length; i++) { var drawTexture = new egret.RenderTexture,
                        frame = plist.frames[i];
                    drawTexture.drawToTexture(image, new egret.Rectangle(frame.frame.x, frame.frame.y, frame.frame.w, frame.frame.h), 1), drawTexture.$initData(0, 0, frame.sourceSize.w, frame.sourceSize.h, frame.spriteSourceSize.x, frame.spriteSourceSize.y, frame.frame.w, frame.frame.h, frame.sourceSize.w, frame.sourceSize.h), this._allTexture[frame.filename] = drawTexture } } return PlistParser.prototype.getTexture = function(name) { return this._allTexture[name] }, PlistParser.prototype.dispose = function() { for (var texKey in this._allTexture) this._allTexture[texKey].dispose(), this._allTexture[texKey] = null;
                this._allTexture = null }, PlistParser }();
        exports.default = PlistParser }, {}],
    12: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var CanvasView_1 = require("../view/sprite/CanvasView"),
            DataManager_1 = require("../manager/DataManager"),
            WorkerManager_1 = require("../manager/WorkerManager"),
            ThumbnailUtil = function() {
                function ThumbnailUtil() {} return ThumbnailUtil.worksPath = function() { var width = Math.floor((document.body.clientWidth - 73) / 2),
                        height = document.body.clientHeight - 86,
                        size = width > height ? height : width; if (WorkerManager_1.default.getInstance().getEditor().editor.getValue().indexOf("getElementById") >= 0) { var myiframe = document.getElementById("drawBoard"),
                            myCanvas = myiframe.contentWindow.document.getElementById("canvas"),
                            tmp = document.createElement("canvas");
                        tmp.width = 300, tmp.height = 300, tmp.getContext("2d").drawImage(myCanvas, 0, 0, size, size, 0, 0, 300, 300); var request = new egret.HttpRequest;
                        request.responseType = egret.HttpResponseType.TEXT, request.open("http://" + location.hostname + "/ide/resource/works/upload.php", egret.HttpMethod.POST), request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), request.send("key=" + DataManager_1.default.getInstance().curWork.id + "&data=" + tmp.toDataURL("image/png")) } else { var renderTexture = new egret.RenderTexture;
                        renderTexture.drawToTexture(CanvasView_1.default.getInstance(), new egret.Rectangle(0, 0, size, size), 300 / size); var request = new egret.HttpRequest;
                        request.responseType = egret.HttpResponseType.TEXT, request.open("http://" + location.hostname + "/ide/resource/works/upload.php", egret.HttpMethod.POST), request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), request.send("key=" + DataManager_1.default.getInstance().curWork.id + "&data=" + renderTexture.toDataURL("image/png")) } }, ThumbnailUtil.pagesPath = function(id) { var width = Math.floor((document.body.clientWidth - 73) / 2),
                        height = document.body.clientHeight - 86,
                        size = width > height ? height : width; if (WorkerManager_1.default.getInstance().getEditor().editor.getValue().indexOf("getElementById") >= 0) { var myCanvas = document.getElementById("canvas"),
                            tmp = document.createElement("canvas");
                        tmp.width = 300, tmp.height = 300, tmp.getContext("2d").drawImage(myCanvas, 0, 0, size, size, 0, 0, 300, 300); var request = new egret.HttpRequest;
                        request.responseType = egret.HttpResponseType.TEXT, console.log(location.hostname), request.open("http://" + location.hostname + "/ide/resource/pages/upload.php", egret.HttpMethod.POST), request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), request.send("key=" + id + "&data=" + tmp.toDataURL("image/png")) } else { var renderTexture = new egret.RenderTexture;
                        renderTexture.drawToTexture(CanvasView_1.default.getInstance(), new egret.Rectangle(0, 0, size, size), 300 / size); var request = new egret.HttpRequest;
                        request.responseType = egret.HttpResponseType.TEXT, request.open("http://" + location.hostname + "/ide/resource/pages/upload.php", egret.HttpMethod.POST), request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), request.send("key=" + id + "&data=" + renderTexture.toDataURL("image/png")) } }, ThumbnailUtil }();
        exports.default = ThumbnailUtil }, { "../manager/DataManager": 6, "../manager/WorkerManager": 9, "../view/sprite/CanvasView": 26 }],
    13: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var TimeUtil = function() {
            function TimeUtil() {} return TimeUtil.getTime = function(timevalue) { var date = new Date(1e3 * eval(timevalue)),
                    Y = date.getFullYear() + "-",
                    M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + "-",
                    D = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(),
                    h = date.getHours() + ":",
                    m = date.getMinutes() + ":",
                    YY = date.getFullYear(),
                    MM = date.getMonth() + 1,
                    DD = date.getDate(),
                    hh = date.getHours(),
                    mm = date.getMinutes(),
                    ss = date.getSeconds(),
                    currentTime = new Date,
                    CY = currentTime.getFullYear(),
                    CM = currentTime.getMonth() + 1,
                    CD = currentTime.getDate(),
                    Ch = currentTime.getHours(),
                    Cm = currentTime.getMinutes(),
                    Cs = currentTime.getSeconds(); if (CY != YY || CM != MM) return Y + M + D; if (CD > DD) { var day = CD - DD; return day + "<span id='days-ago'>" + TimeUtil.daytitle + "</span>" } if (Ch > hh) { var hours = Ch - hh; return hours + "<span id='hours-ago'>" + TimeUtil.hourtitle + "</span>" } if (Cm > mm) { var minutes = Cm - mm; return minutes + "<span id='minutes-ago'>" + TimeUtil.minutetitle + "</span>" } if (Cs > ss) { var seconds = Cs - ss; return seconds + "<span id='seconds-ago'>" + TimeUtil.secondtitle + "</span>" } }, TimeUtil.daytitle = "days ago", TimeUtil.hourtitle = "hours ago", TimeUtil.minutetitle = "minutes ago", TimeUtil.secondtitle = "seconds ago", TimeUtil }();
        exports.default = TimeUtil }, {}],
    14: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 });
        var DataManager_1 = require("../../manager/DataManager"),
            LoginView_1 = require("./LoginView"),
            MenuContentView_1 = require("./MenuContentView"),
            WorkerManager_1 = require("../../manager/WorkerManager"),
            AppMain = function() {
                function AppMain() {}
                return AppMain.init = function() {
                    var clickHandler = function(e) { if ("toolbar-item-language" != $(this).attr("id") && "toolbar-item-classroom" != $(this).attr("id")) { "toolbar-item-file" != $(this).attr("id") && (document.getElementById("toolbar-item-file").className = "toolbar-item"), "toolbar-item open" != this.className ? this.className = "toolbar-item open" : this.className = "toolbar-item"; for (var all = document.querySelectorAll(".toolbar-dropdown-community-title li"), i = 0; i < all.length; i++) all[i].className = "" } },
                        closePageHandler = function(e) { document.getElementById("open-project").style.display = "none", document.getElementById("new-project").style.display = "none", document.getElementById("clone-project").style.display = "none", document.getElementById("import-project").style.display = "none", document.getElementById("backgroundBoardId").style.display = "none", document.getElementById("editor-pane-nav-options-menu").style.display = "none" };
                    $("#account-exit").click(function(e) { $("#class-list-box").remove(), localStorage.removeItem("user_id"), localStorage.removeItem("classroom_name"), localStorage.removeItem("nick_name"), LoginView_1.default.checkLogin(), location.reload() }), $(".dropdown").click(function(e) { if ("dropdown expanded" != this.className) { if (this.className = "dropdown expanded", "dropdown-file" == $(this).attr("id")) document.getElementById("dropdown-content-file").style.display = "block";
                            else if ("dropdown-share" == $(this).attr("id")) { var url = "http://" + location.hostname + "/ide/show.php?v=" + DataManager_1.default.getInstance().curWork.id;
                                document.getElementById("share-content-qrcode").innerHTML = ""; var qrcode = new QRCode(document.getElementById("share-content-qrcode"), { width: 200, height: 200 });
                                qrcode.makeCode(url), document.getElementById("share-content-urltext").innerHTML = url, document.getElementById("dropdown-content-share").style.display = "block" } else "dropdown-help" == $(this).attr("id") ? document.getElementById("dropdown-content-help").style.display = "block" : $("#dropdown-content-login").show();
                            $("#click-underlay").css("display", "block"), $("#click-underlay").css("width", "100%"), $("#click-underlay").css("height", "100%") } else this.className = "dropdown", "dropdown-file" == $(this).attr("id") ? document.getElementById("dropdown-content-file").style.display = "none" : "dropdown-share" == $(this).attr("id") ? document.getElementById("dropdown-content-share").style.display = "none" : document.getElementById("dropdown-content-help").style.display = "none", $("#click-underlay").css("display", "none"), $("#click-underlay").css("width", 0), $("#click-underlay").css("height", 0) }), $("#click-underlay").click(function(e) {
                        $("#btn-function").css("background-color", "transparent"), $("#btn-insert").css("background-color", "transparent"), $("#btn-picture").css("background-color", "transparent"), 0 == MenuContentView_1.default.moonMode && ($("#btn-function img").attr("src", "resource/assets/brush.svg"), $("#btn-insert img").attr("src", "resource/assets/code.svg"), $("#btn-picture img").attr("src", "resource/assets/picture.svg")), $("#dropdown-content-file").css("display", "none"), $("#dropdown-content-share").css("display", "none"), $("#dropdown-content-help").css("display", "none"), $("#click-underlay").css("display", "none"), $("#click-underlay").css("width", 0), $("#click-underlay").css("height", 0), $("#btn-function-content").css("display", "none"), $("#btn-insert-content").css("display", "none"), $("#btn-picture-content").css("display", "none"),
                            document.getElementById("editor-pane-nav-options-menu").style.display = "none", document.getElementById("editor-pane-nav-snippets-menu").style.display = "none", document.getElementById("dropdown-file").className = "dropdown", document.getElementById("dropdown-share").className = "dropdown", document.getElementById("dropdown-help").className = "dropdown"
                    });
                    var isHided = !1;
                    $("#switch-left").click(function(e) { isHided ? (isHided = !1, document.getElementById("switch-left-icon").style.backgroundImage = "url(./resource/assets/left_arrow_in.png)", document.getElementById("switch-left-icon").style.left = "40px", document.getElementById("switch-left").style.width = "90px", document.getElementById("banner-left").style.display = "block", document.getElementById("content-left").style.display = "block", document.getElementById("content").style.left = "90px", document.getElementById("content-top").style.left = "90px", $("#content-top-right").width(document.body.clientWidth - parseInt(document.getElementById("content-top-right").style.left) - 90)) : (isHided = !0, document.getElementById("switch-left-icon").style.backgroundImage = "url(./resource/assets/left_arrow_out.png)", document.getElementById("switch-left-icon").style.left = "10px", document.getElementById("switch-left").style.width = "30px", document.getElementById("banner-left").style.display = "none", document.getElementById("content-left").style.display = "none", document.getElementById("content").style.left = "0px", document.getElementById("content-top").style.left = "0px", $("#content-top-right").width(document.body.clientWidth - parseInt(document.getElementById("content-top-right").style.left))) }), $(".toolbar-item").click(clickHandler), $(".toolbar-dropdown").click(function(event) { event.stopPropagation() }), $(".page-close").click(closePageHandler), $(".menu-button-cancel").click(closePageHandler), $("#game-area").height(document.body.clientHeight - 210), $("#content").height(document.body.clientHeight - 210), $("#code-area").css("height", $(window).height() - 210), $("#drag-line").css("height", $(window).height() - 210), $("#room-container-chat-content").height(document.body.clientHeight - 468);
                    var midWidth = document.body.clientWidth / 2;
                    $("#code-area").width(midWidth - 90), $("#drag-line").css("left", midWidth - 90), $("#ui-ruler").css("left", midWidth - 90), $("#drawBoard").css("left", midWidth - 90), $("#drawBoard").width(document.body.clientWidth - midWidth + 90), $("#content-top-right").css("left", midWidth - 90), $("#content-top-left").width(midWidth - 90), $("#content-top-right").width(document.body.clientWidth - midWidth);
                    var dragging = !1;
                    $("#drag-line").bind("mousedown", function() { dragging = !0 }), window.onmousemove = function(e) { dragging && ($("#code-area").width(e.pageX - 90), $("#drag-line").css("left", e.pageX - 90), $("#ui-ruler").css("left", e.pageX - 90), $("#drag-line").width(document.body.clientWidth - e.pageX + 90), $("#drawBoard").css("left", e.pageX - 90), $("#drawBoard").width(document.body.clientWidth - e.pageX + 90), $("#content-top-right").css("left", e.pageX - 90), $("#content-top-left").width(e.pageX - 90), $("#content-top-right").width(document.body.clientWidth - e.pageX), WorkerManager_1.default.getInstance().getEditor().editor.resize()) }, $(document).mouseup(function(e) { dragging = !1, e.cancelBubble = !0, $("#drag-line").width(8) }), $(document).on("mousedown", "img", function(e) { e.preventDefault() }), $(document).on("click", function(e) { var tar = $("#room-container-student");
                        tar.is(e.target) || 0 !== tar.has(e.target).length || $("#room-bottom-tool").hide() }), $("#classroom-util-layer div").on("mouseover", function() { var popValue = $(this).attr("info"),
                            xAxis = $(this).offset().left,
                            yAxis = $(this).offset().top - $(document).scrollTop(),
                            domWidth = $(this).width(),
                            domHeight = $(this).height();
                        $("#titleTips1").show(), $("#titleTips1").css("top", yAxis + domHeight + 4 - 30 + "px"); var smallTipsWidth = $("#titleTips1").width();
                        $("#titleTips1").css("left", xAxis + domWidth / 2 - smallTipsWidth / 2 - 45), $("#titleTips1").html(popValue) }), $("#classroom-util-layer div").on("mouseout", function() { $("#titleTips1").hide() }), $("#toolbar-item-language").trigger("click"), window.addEventListener("resize", function() { var midWidth = document.body.clientWidth / 2;
                        $("#code-area").width(midWidth - 90), $("#drag-line").css("left", midWidth - 90), $("#drawBoard").css("left", midWidth - 90), $("#ui-ruler").css("left", midWidth - 90), $("#drawBoard").width(document.body.clientWidth - midWidth + 90), $("#content-top-right").css("left", midWidth - 90), $("#content-top-left").width(midWidth - 90), $("#content-top-right").width(document.body.clientWidth - midWidth) })
                }, AppMain
            }();
        exports.default = AppMain
    }, { "../../manager/DataManager": 6, "../../manager/WorkerManager": 9, "./LoginView": 18, "./MenuContentView": 19 }],
    15: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var CanvasView_1 = require("../sprite/CanvasView"),
            DataManager_1 = require("../../manager/DataManager"),
            WorkerManager_1 = require("../../manager/WorkerManager"),
            CloneView = function() {
                function CloneView() {} return CloneView.init = function() { document.getElementById("clone-button-confirm-id").onclick = function(e) { var txt = document.getElementById("clone-project-text").value,
                            valc = function(val) { for (var len = 0, i = 0; i < val.length; i++) { null != val.charAt(i).match(/[^\x00-\xff]/gi) ? len += 2 : len += 1 } return len }(txt),
                            reg = /^[a-zA-Z0-9_\u4e00-\u9fa5\s]+$/;
                        valc < 1 ? (document.getElementById("clone-project-text-notice").style.display = "block", TweenLite.to(CanvasView_1.default.getInstance(), 1.5, { onComplete: function() { document.getElementById("clone-project-text-notice").style.display = "none" } })) : valc > 20 ? (document.getElementById("clone-project-text-notice-length").style.display = "block", TweenLite.to(CanvasView_1.default.getInstance(), 1.5, { onComplete: function() { document.getElementById("clone-project-text-notice-length").style.display = "none" } })) : reg.test(txt) ? DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_CLONE_WORK, { title: txt, code: DataManager_1.default.getInstance().curWork.codes, jsplus: $("#editor-pane-nav-snippets-menu-input").val() }) : (document.getElementById("clone-reg-input").style.display = "block", TweenLite.to(CanvasView_1.default.getInstance(), 1.5, { onComplete: function() { document.getElementById("clone-reg-input").style.display = "none" } })), $(".divider-publish").show() }, document.getElementById("file-3").onclick = function(e) { 0 == DataManager_1.default.getInstance().isCommunitWork && DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_SAVE_WORK, { id: DataManager_1.default.getInstance().curWork.id, name: document.getElementById("project-title-in").innerText, code: WorkerManager_1.default.getInstance().getEditorText() }) }, document.getElementById("file-4").onclick = function(e) { document.getElementById("backgroundBoardId").style.display = "block", document.getElementById("clone-project").style.display = "block", document.getElementById("clone-project-text").value = "" } }, CloneView }();
        exports.default = CloneView }, { "../../manager/DataManager": 6, "../../manager/WorkerManager": 9, "../sprite/CanvasView": 26 }],
    16: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var DataManager_1 = require("../../manager/DataManager"),
            ImportProjectView = function() {
                function ImportProjectView() {} return ImportProjectView.init = function() { document.getElementById("import-button-confirm-id").onclick = function(e) { var txt = document.getElementById("import-project-text").value;
                        DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_IMPORT_WORK, { id: txt }) }, document.getElementById("file-7").onclick = function(e) { document.getElementById("backgroundBoardId").style.display = "block", document.getElementById("import-project").style.display = "block", document.getElementById("import-project-text").value = "" } }, ImportProjectView }();
        exports.default = ImportProjectView }, { "../../manager/DataManager": 6 }],
    17: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var ConfigManager_1 = require("../../manager/ConfigManager"),
            WorkerManager_1 = require("../../manager/WorkerManager"),
            DataManager_1 = require("../../manager/DataManager"),
            LeftBarView = function() {
                function LeftBarView() {} return LeftBarView.init = function() { var x, dics = ConfigManager_1.default.getInstance().getConfigs("draw.csv"),
                        typeShapes = []; for (x in dics) typeShapes.push(dics[x]);
                    dics = ConfigManager_1.default.getInstance().getConfigs("tool.csv"); var typeTool = []; for (x in dics) typeTool.push(dics[x]);
                    dics = ConfigManager_1.default.getInstance().getConfigs("picture.csv"); var typePictures = []; for (x in dics) typePictures.push(dics[x]); for (var funcTip1 = "<h4 class='shapes-title'>绘图函数</h4><ul class='shapes-ul'>", i = 0; i < typeShapes.length; i++) funcTip1 += "<li dataZd=" + typeShapes[i].fundefault + "><div>" + typeShapes[i].describes + "</div><img src='http://activity.youyoucode.cn/ide" + typeShapes[i].url + "' width='40' height='40'/><span>" + typeShapes[i].name + "</span></li>";
                    funcTip1 += "</ul>", $("#btn-function-content").append(funcTip1), funcTip1 = "<h4 class='shapes-title'>基础函数</h4><ul class='shapes-ul'>"; for (var i = 0; i < typeTool.length; i++) funcTip1 += "<li dataZd=" + typeTool[i].fundefault + "><div>" + typeTool[i].describes + "</div><img src='http://activity.youyoucode.cn/ide" + typeTool[i].url + "' width='40' height='40'/><span>" + typeTool[i].name + "</span></li>";
                    funcTip1 += "</ul>", $("#btn-insert-content").append(funcTip1), funcTip1 = "<h4 class='shapes-title'>图片素材</h4>"; for (var i = 0; i < typePictures.length; i++) funcTip1 += "<div class = 'image-grid-padding' dataZd =" + typePictures[i].thumbnailfile + " imageName=" + typePictures[i].fileName + " imagedefault=" + typePictures[i].initfunc + "><div class = 'image-grid-box picture_img' ><img src=" + typePictures[i].thumbnailfile + "></div><div class = 'image-grid-name'>" + typePictures[i].fileName + "</div></div>", funcTip1 += "<div class = 'image-grid-divider'></div>";
                    $("#btn-picture-content").append(funcTip1), $("#btn-picture-content .image-grid-padding").each(function(i) { $(this).on("click", function(e) { var imageDefault = $(this).attr("imageDefault");
                            WorkerManager_1.default.getInstance().getEditor().editor.getCursorPosition().column > 0 ? WorkerManager_1.default.getInstance().getEditor().editor.insert("\n" + imageDefault) : WorkerManager_1.default.getInstance().getEditor().editor.insert(imageDefault), WorkerManager_1.default.getInstance().getMainWork().refreshFrame() }) }), $(".shapes-ul li").each(function(i) { $(this).on("click", function(e) { var dataZd = $(this).attr("dataZd");
                            dataZd = dataZd.replace(/&nbsp;/g, " "), dataZd = dataZd.replace(/\/n/g, "\n"), WorkerManager_1.default.getInstance().getEditor().editor.getCursorPosition().column > 0 ? WorkerManager_1.default.getInstance().getEditor().editor.insert("\n" + dataZd) : WorkerManager_1.default.getInstance().getEditor().editor.insert(dataZd), $("#btn-insert-content").css("display", "none"), $("#btn-function-content").css("display", "none") }) }), $(".shapes-ul li").on("mouseover", function() { var popValue = $(this).find("div").html(),
                            xAxis = $(this).offset().left,
                            yAxis = $(this).offset().top - $(document).scrollTop(),
                            domWidth = $(this).width(),
                            domHeight = $(this).height();
                        $("#titleTips").show(), $("#titleTips").css("top", yAxis + domHeight + 4 + "px"); var smallTipsWidth = $("#titleTips").width();
                        $("#titleTips").css("left", xAxis + domWidth / 2 - smallTipsWidth / 2), $("#titleTips").html(popValue) }), $(".shapes-ul li").on("mouseout", function() { $("#titleTips").hide() }), $("#btn-function").click(function(e) { $("#btn-function").css("background-color", "#ffa226"), $("#btn-insert-content").css("display", "none"), $("#btn-picture-content").css("display", "none"), $("#btn-function-content").css("display", "block"), $("#btn-function-content .left-arrow-tip").css("top", 12), $("#click-underlay").css("display", "block"), $("#click-underlay").css("width", "100%"), $("#click-underlay").css("height", "100%"), $("#btn-function img").attr("src", "resource/assets/brush_white.svg") }), $("#btn-insert").click(function(e) { $("#btn-insert").css("background-color", "#ffa226"), $("#btn-picture-content").css("display", "none"), $("#btn-function-content").css("display", "none"), $("#btn-insert-content").css("display", "block"), $("#btn-insert-content .left-arrow-tip").css("top", 12), $("#click-underlay").css("display", "block"), $("#click-underlay").css("width", "100%"), $("#click-underlay").css("height", "100%"), $("#btn-insert img").attr("src", "resource/assets/code_white.svg") }), $("#btn-picture").click(function(e) { $("#btn-picture").css("background-color", "#ffa226"), $("#btn-function-content").css("display", "none"), $("#btn-insert-content").css("display", "none"), $("#btn-picture-content").css("display", "block"), $("#btn-picture-content .left-arrow-tip").css("top", 12), $("#click-underlay").css("display", "block"), $("#click-underlay").css("width", "100%"), $("#click-underlay").css("height", "100%"), $("#btn-picture img").attr("src", "resource/assets/picture_white.svg") }), $("#btn-classlist").click(function(e) { DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_CLASS_LIST, { uid: DataManager_1.default.getInstance().uid }) }) }, LeftBarView }();
        exports.default = LeftBarView }, { "../../manager/ConfigManager": 5, "../../manager/DataManager": 6, "../../manager/WorkerManager": 9 }],
    18: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var LoginView = function() {
            function LoginView() {} return LoginView.init = function() { $("#input_Phone_Email").focusin(function() { $(".error_info").hide() }), $(".eye1-student").on("click", function() { $(this).hide(), $(".eye2-student").show(), $("#password").attr("type", "text") }), $(".eye2-student").on("click", function() { $(this).hide(), $(".eye1-student").show(), $("#password").attr("type", "password") }), $("#dropdownMenu1").on("click", function() { $("#dropdown-menu").toggle() }), $(document).on("click", function(e) { var targetDiv = $("#dropdownMenu1");
                    targetDiv.is(e.target) || 0 !== targetDiv.has(e.target).length || $("#dropdown-menu").hide() }), document.getElementById("login-link").onclick = function(e) { document.getElementById("loginBox").style.display = "block" }, document.getElementById("loginBoxCloseImg").onclick = function(e) { document.getElementById("loginBox").style.display = "none" }, document.getElementById("loginButton").onclick = function(e) { LoginView.login() }, document.getElementById("loginBox").addEventListener("keydown", function(event) { 13 == event.keyCode && LoginView.login() }, !0) }, LoginView.login = function() { var user = { password: $("#password").val() },
                    userName = $("#input_Phone_Email").val();! function(str) { return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/.test(str) }(userName) && ! function(str) { return /^(((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(str) }(userName) ? user.username = userName: user.email = userName;
                userName.length < 1 || user.password < 1 ? $(".error_info").show() : $.ajax({ url: "http://sso.youyoucode.cn/api/users/login", type: "post", data: user, dataType: "json", success: function(data) { data.userId ? (localStorage.setItem("nick_name", userName), localStorage.setItem("user_id", userName), $("#studentLogin").hide(), location.reload()) : $(".error_info").show() }, error: function(err) { $(".error_info").show() } }) }, LoginView.checkLogin = function() { localStorage.getItem("nick_name") ? ($("#loginBox").hide(), document.getElementById("hackathonAccount").innerHTML = localStorage.getItem("nick_name"), $("#dropdownMenu1").show(), $("#toolbar-item-signup").hide(), $("#divider").hide(), $("#studentLogin").hide()) : ($("#toolbar-item-signup").show(), $("#loginMenu1").show(), $("#dropdownMenu1").hide()) }, LoginView }();
        exports.default = LoginView }, {}],
    19: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var DataManager_1 = require("../../manager/DataManager"),
            WorkerManager_1 = require("../../manager/WorkerManager"),
            MenuContentView = function() {
                function MenuContentView() {} return MenuContentView.init = function() { $("#navbar-project-title").click(function(e) { if ("none" != document.getElementById("project-title-in").style.display) { document.getElementById("project-title-in").style.display = "none"; var teditor = document.getElementById("project-title-out");
                            teditor.value = document.getElementById("project-title-in").innerText, teditor.style.display = "inline", teditor.focus(), document.getElementById("project-rename-save").style.display = "inline", document.getElementById("navbar-rename-project").style.display = "none", $("#navbar-project-title.shadow").css("background-color", "rgba(0,0,0,0)") } }); var finishHandler = function(e) { document.getElementById("project-title-in").style.display = "inline", document.getElementById("project-rename-save").style.display = "none", document.getElementById("project-title-out").style.display = "none", document.getElementById("navbar-rename-project").style.display = "inline", $("#navbar-project-title.shadow").hover(function() { $("#navbar-project-title.shadow").css("background-color", "rgba(85,140,140,.15)") }, function() { $("#navbar-project-title.shadow").css("background-color", "rgba(0,0,0,0)") }), e.stopPropagation() };
                    $("#project-rename-save").click(finishHandler), $("#preview-pane-nav-refresh").click(function(event) { this.className = "spin", WorkerManager_1.default.getInstance().getMainWork().refreshFrame(), setTimeout(function() { $("#preview-pane-nav-refresh").removeClass("spin") }, 1e3), event.stopPropagation() }), $("#preview-pane-refresh-wrapper").click(function(e) { DataManager_1.default.getInstance().autoRunMode = !DataManager_1.default.getInstance().autoRunMode, "refresh-wrapper enabled" != this.className ? this.className = "refresh-wrapper enabled" : this.className = "refresh-wrapper" }), $("#editor-pane-nav-options").click(function(event) { document.getElementById("editor-pane-nav-options-menu").style.display = "block", document.getElementById("editor-pane-nav-options-menu").style.left = parseInt(document.getElementById("content-top-right").style.left) - 161 + "px", $("#click-underlay").css("display", "block"), $("#click-underlay").css("width", "100%"), $("#click-underlay").css("height", "100%") }), $("#editor-pane-nav-snippets").click(function(event) { document.getElementById("editor-pane-nav-snippets-menu").style.display = "block", document.getElementById("editor-pane-nav-snippets-menu").style.left = parseInt(document.getElementById("content-top-right").style.left) - 343 + "px", $("#click-underlay").css("display", "block"), $("#click-underlay").css("width", "100%"), $("#click-underlay").css("height", "100%") }), $("#project-rename-save").click(function(event) { $("#project-title-in").text($("#project-title-out").val()), DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_RENAME_WORK, { id: DataManager_1.default.getInstance().curWork.id, name: $("#project-title-out").val() }) }), $("#editor-pane-nav-snippets-menu-input").bind("input propertychange", function() { DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_JSPLUS_WORK, { id: DataManager_1.default.getInstance().curWork.id, jsplus: $("#editor-pane-nav-snippets-menu-input").val() }), WorkerManager_1.default.getInstance().getMainWork().refreshFrame() }); var font = 20;
                    $("#editor-pane-nav-decrease-font").click(function(event) { font > 14 && (font -= 1), WorkerManager_1.default.getInstance().getEditor().editor.setFontSize(font + "px") }), $("#editor-pane-nav-increase-font").click(function(event) { font < 30 && (font += 1), WorkerManager_1.default.getInstance().getEditor().editor.setFontSize(font + "px") }), $("#editor-pane-nav-toggle-theme").click(function(event) { MenuContentView.moonMode ? ($("#theme-active").css("left", 35), $("#moon-white").css("display", "inline"), $("#moon-green").css("display", "none"), $("#sun-white").css("display", "none"), $("#sun-green").css("display", "inline"), document.getElementById("bodyid").style.backgroundColor = "#fbf8f9", document.getElementById("content-top").style.backgroundColor = "#f7f6fb", document.getElementById("content-left").style.backgroundColor = "#f7f6fb", $(".refresh-wrapper .toggle-auto-update").css("background", "#f9f9f9"), $(".preview-device-toggle").css("background", "#f9f9f9"), MenuContentView.moonMode = !1, $(".editor-pane-button").css("background", "#ffffff"), $("#content-top-left").css("background", "#ffffff"), $("#code-area").css("background", "#ffffff"), $("#content-top-left .editor-pane-nav-title").css("color", "#000000"), $("#code-area").css("color", "#222222"), WorkerManager_1.default.getInstance().getEditor().editor.setTheme("ace/theme/github"), document.getElementById("btn-function").style.color = "#000000", document.getElementById("btn-insert").style.color = "#000000", document.getElementById("btn-picture").style.color = "#000000", $("#btn-function img").attr("src", "resource/assets/brush.svg"), $("#btn-insert img").attr("src", "resource/assets/code.svg"), $("#btn-picture img").attr("src", "resource/assets/picture.svg")) : ($("#theme-active").css("left", 2), $("#moon-white").css("display", "none"), $("#moon-green").css("display", "inline"), $("#sun-white").css("display", "inline"), $("#sun-green").css("display", "none"), document.getElementById("bodyid").style.backgroundColor = "#cccccc", document.getElementById("content-top").style.backgroundColor = "#bbbbbb", document.getElementById("content-left").style.backgroundColor = "#444444", $(".refresh-wrapper .toggle-auto-update").css("background", "#bbbbbb"), $(".preview-device-toggle").css("background", "#bbbbbb"), MenuContentView.moonMode = !0, $(".editor-pane-button").css("background", "#333333"), $("#content-top-left").css("background", "#333333"), $("#content-top-left .editor-pane-nav-title").css("color", "#ffffff"), $("#code-area").css("background", "#333333"), $("#code-area").css("color", "#fbf8f9"), WorkerManager_1.default.getInstance().getEditor().editor.setTheme("ace/theme/monokai"), document.getElementById("btn-function").style.color = "#ffffff", document.getElementById("btn-insert").style.color = "#ffffff", document.getElementById("btn-picture").style.color = "#ffffff", $("#btn-function img").attr("src", "resource/assets/brush_white.svg"), $("#btn-insert img").attr("src", "resource/assets/code_white.svg"), $("#btn-picture img").attr("src", "resource/assets/picture_white.svg")) }); var gridSwitch = !1;
                    $("#line-grid-toggle").click(function(event) { gridSwitch ? ($(".toggle-grid-button").css("left", 30), $("#editor-option-grid span").text("显示网格"), gridSwitch = !1, TweenLite.delayedCall(.4, function() { $("#ui-ruler").css("display", "none") })) : ($(".toggle-grid-button").css("left", 0), $("#editor-option-grid span").text("关闭网格"), gridSwitch = !0, TweenLite.delayedCall(.4, function() { $("#ui-ruler").css("display", "block") })) }), $("#line-wrap-toggle").click(function(event) { DataManager_1.default.getInstance().curWork.mode < 1 ? ($(".toggle-button").css("left", 0), $("#editor-option-wraptext span").text("  python  "), $(".editor-pane-nav-title").text("Python"), WorkerManager_1.default.getInstance().changeLangue("python"), DataManager_1.default.getInstance().curWork.mode = 1) : ($(".toggle-button").css("left", 30), $("#editor-option-wraptext span").text("JS"), $(".editor-pane-nav-title").text("JavaScript"), WorkerManager_1.default.getInstance().changeLangue("javascript"), DataManager_1.default.getInstance().curWork.mode = 0), DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_MODE_WORK, { id: DataManager_1.default.getInstance().curWork.id, mode: DataManager_1.default.getInstance().curWork.mode }), WorkerManager_1.default.getInstance().getMainWork().refreshFrame(), TweenLite.delayedCall(1, function() { $("#editor-pane-nav-options-menu").css("display", "none") }) }), document.getElementById("editor-pane-nav-undo").onclick = function(e) { WorkerManager_1.default.getInstance().getEditor().editor.undo() }, document.getElementById("editor-pane-nav-redo").onclick = function(e) { WorkerManager_1.default.getInstance().getEditor().editor.redo() }, document.getElementById("menu-content-eraser").onclick = function(e) { document.getElementById("drawBlackboard").getContext("2d").clearRect(0, 0, 1280, 960), DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_MOUSE_CLICK, { room: DataManager_1.default.getInstance().inRoomName, type: 3, x: 0, y: 0 }) }, document.getElementById("menu-content-pen").onclick = function(e) {} }, MenuContentView.isPenOpen = !1, MenuContentView.moonMode = !1, MenuContentView }();
        exports.default = MenuContentView }, { "../../manager/DataManager": 6, "../../manager/WorkerManager": 9 }],
    20: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var CanvasView_1 = require("../sprite/CanvasView"),
            DataManager_1 = require("../../manager/DataManager"),
            NewProjectView = function() {
                function NewProjectView() {} return NewProjectView.init = function() { document.getElementById("new-button-confirm-id").onclick = function(e) { var txt = document.getElementById("new-project-text").value,
                            valc = function(val) { for (var len = 0, i = 0; i < val.length; i++) { null != val.charAt(i).match(/[^\x00-\xff]/gi) ? len += 2 : len += 1 } return len }(txt),
                            reg = /^[a-zA-Z0-9_\u4e00-\u9fa5\s]+$/;
                        txt.length < 1 ? (document.getElementById("new-project-text-notice").style.display = "block", TweenLite.to(CanvasView_1.default.getInstance(), 1.5, { onComplete: function() { document.getElementById("new-project-text-notice").style.display = "none" } })) : valc > 20 ? (document.getElementById("new-project-text-notice-length").style.display = "block", TweenLite.to(CanvasView_1.default.getInstance(), 1.5, { onComplete: function() { document.getElementById("new-project-text-notice-length").style.display = "none" } })) : reg.test(txt) ? DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_NEW_WORK, { title: txt, mode: 0, code: "// Make something amazing \nvar canvas=document.getElementById('canvas');\ncanvas.width=430;\ncanvas.height=500;\nvar ctx = canvas.getContext('2d');\n\n" }) : (document.getElementById("new-reg-input").style.display = "block", TweenLite.to(CanvasView_1.default.getInstance(), 1.5, { onComplete: function() { document.getElementById("new-reg-input").style.display = "none" } })), DataManager_1.default.getInstance().isCommunitWork = !1 }, document.getElementById("file-2").onclick = function(e) { document.getElementById("backgroundBoardId").style.display = "block", document.getElementById("new-project").style.display = "block", document.getElementById("new-project-text").value = "" } }, NewProjectView }();
        exports.default = NewProjectView }, { "../../manager/DataManager": 6, "../sprite/CanvasView": 26 }],
    21: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var TimeUtil_1 = require("../../util/TimeUtil"),
            DataManager_1 = require("../../manager/DataManager"),
            UIManager_1 = require("../../manager/UIManager"),
            OpenProjectView = function() {
                function OpenProjectView() {} return OpenProjectView.initOpenProject = function() { document.getElementById("file-1").onclick = function(e) { OpenProjectView.updateOpenProject() } }, OpenProjectView.updateOpenProject = function() { for (var str = "", i = 0; i < DataManager_1.default.getInstance().works.length; i++) str += "<div class = 'image-padding'><div class = 'image-box' id = work_" + DataManager_1.default.getInstance().works[i].id + "><img class='open-img' src='resource/works/work_" + DataManager_1.default.getInstance().works[i].id + ".png?v=" + Math.random() + "' onerror=\"javascript:this.src ='resource/works/default.png'\"/></div><div class = 'image-time'>" + TimeUtil_1.default.getTime(DataManager_1.default.getInstance().works[i].updateTime) + "</div><div class = 'image-name'>" + DataManager_1.default.getInstance().works[i].wname + "</div><div class = 'delete-img' id = icon_" + DataManager_1.default.getInstance().works[i].id + "><img src='resource/assets/delete.png'/></div></div>", str += "<div class = 'image-divider'></div>";
                    document.getElementById("open-project-content").innerHTML = "" + str; for (var works = DataManager_1.default.getInstance().works, i = 0; i < works.length; i++)
                        if (works[i]) { works[i].id;
                            document.getElementById("work_" + works[i].id).onclick = function(e) { var tt = e.currentTarget;
                                tt = tt.id.split("_"); for (var wid = parseInt(tt[1]), j = 0; j < works.length; j++)
                                    if (works[j].id - wid == 0) { DataManager_1.default.getInstance().curWork.id - wid != 0 && (DataManager_1.default.getInstance().curWork = works[j], UIManager_1.default.getInstance().getRunningScene().openNewProject()), document.getElementById("open-project").style.display = "none", document.getElementById("backgroundBoardId").style.display = "none"; break }
                                DataManager_1.default.getInstance().isCommunitWork = !1 }, document.getElementById("icon_" + DataManager_1.default.getInstance().works[i].id).onclick = function(e) { var tt = e.currentTarget;
                                tt = tt.id.split("_"); var wid = parseInt(tt[1]),
                                    del = document.getElementById("del-dialog"),
                                    btnW = (document.getElementById("yes-btn"), document.getElementById("no-btn"), document.getElementById("btn-w"));
                                1 == works.length ? UIManager_1.default.getInstance().showMessage("text_prompt_deleate") : del.style.display = "block", btnW.onclick = function(e) { if ("yes-btn" !== e.target.id) return void(del.style.display = "none");
                                    del.style.display = "none", DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_DELETE_WORK, { id: wid }) } } }
                    document.getElementById("backgroundBoardId").style.display = "block", document.getElementById("open-project").style.display = "block" }, OpenProjectView }();
        exports.default = OpenProjectView }, { "../../manager/DataManager": 6, "../../manager/UIManager": 8, "../../util/TimeUtil": 13 }],
    22: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var PlistParser_1 = require("../../util/PlistParser"),
            EngineImage = function(_super) {
                function EngineImage() { var _this = _super.call(this) || this; return _this._oldW = 0, _this._oldH = 0, _this } return __extends(EngineImage, _super), EngineImage.prototype.loadpic = function(url) { url.indexOf("ttp:") > 0 ? RES.getResByUrl(url, this.onComplete, this, RES.ResourceItem.TYPE_IMAGE) : (this._bitmap = new egret.Bitmap(new PlistParser_1.default("res").getTexture(url + ".png")), this.addChild(this._bitmap)) }, EngineImage.prototype.onComplete = function(event) { this._bitmap = new egret.Bitmap(event), this.addChild(this._bitmap), this._oldW > 0 && (this.scaleX = this._oldW / this._bitmap.width, this.scaleY = this._oldH / this._bitmap.height) }, EngineImage.prototype.setPosition = function(x, y) { this.x = x, this.y = y }, EngineImage.prototype.moveTo = function(x, y, t) { null == t && (t = 1), TweenLite.to(this, t, { x: x, y: y }) }, EngineImage.prototype.scaleTo = function(s, t) { null == t && (t = 1), TweenLite.to(this, t, { scaleX: s, scaleY: s }) }, EngineImage.prototype.setSize = function(w, h) { w > 0 && (this._oldW = w, this._oldH = h) }, EngineImage.prototype.dispose = function() { this._bitmap.texture.dispose() }, EngineImage }(egret.Sprite);
        exports.default = EngineImage }, { "../../util/PlistParser": 11 }],
    23: [function(require, module, exports) {
        "use strict";
        var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 });
        var ColorUtil_1 = require("../../util/ColorUtil"),
            EngineSprite = function(_super) {
                function EngineSprite() { return _super.call(this) || this }
                return __extends(EngineSprite, _super), EngineSprite.prototype.drawRect = function(x, y, w, h, c) { this.graphics.beginFill(ColorUtil_1.default.getColor(c)), this.graphics.drawRect(x, y, w, h), this.graphics.endFill() }, EngineSprite.prototype.drawEllipse = function(x, y, w, h, c) { this.graphics.beginFill(ColorUtil_1.default.getColor(c)), this.graphics.drawEllipse(x, y, w, h), this.graphics.endFill() }, EngineSprite.prototype.drawCircle = function(x, y, r, c) { this.graphics.beginFill(ColorUtil_1.default.getColor(c)), this.graphics.drawCircle(x, y, r), this.graphics.endFill() }, EngineSprite.prototype.drawArc = function(x, y, radius, startAngle, endAngle, c) { this.graphics.beginFill(ColorUtil_1.default.getColor(c)), this.graphics.drawArc(x, y, radius, startAngle, endAngle), this.graphics.endFill() }, EngineSprite.prototype.drawTriangle = function(x1, y1, x2, y2, x3, y3, c) {
                    this.graphics.beginFill(ColorUtil_1.default.getColor(c)), this.graphics.moveTo(x1, y1), this.graphics.lineTo(x2, y2), this.graphics.lineTo(x3, y3),
                        this.graphics.lineTo(x1, y1), this.graphics.endFill()
                }, EngineSprite.prototype.drawLine = function(x, y, w, h, r, c) { this.graphics.beginFill(ColorUtil_1.default.getColor(c)), this.graphics.lineStyle(r, ColorUtil_1.default.getColor(c)), this.graphics.moveTo(x, y), this.graphics.lineTo(w, h), this.graphics.endFill() }, EngineSprite.prototype.drawText = function(x, y, s, v) { var label = new egret.TextField;
                    label.x = x, label.y = y, label.size = s, label.text = v, this.addChild(label) }, EngineSprite.prototype.setPosition = function(x, y) { this.x = x - this.width / 2, this.y = y - this.height / 2 }, EngineSprite.prototype.moveTo = function(x, y, t) { null == t && (t = 1), TweenLite.to(this, t, { x: x, y: y }) }, EngineSprite.prototype.rotateTo = function(r, t) { null == t && (t = 1), TweenLite.to(this, t, { rotate: r }) }, EngineSprite.prototype.scaleTo = function(t, s) { TweenLite.to(this, t, { scaleX: s, scaleY: s }) }, EngineSprite.prototype.setSize = function(w, h) { w > 0 && (this.scaleX = w / this.width, this.scaleY = h / this.height) }, EngineSprite.prototype.dispose = function() { this.graphics.clear(), this.removeChildren() }, EngineSprite
            }(egret.Sprite);
        exports.default = EngineSprite
    }, { "../../util/ColorUtil": 10 }],
    24: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var EngineImage_1 = require("./EngineImage"),
            CanvasView_1 = require("../sprite/CanvasView"),
            EngineSprite_1 = require("./EngineSprite"),
            WorkerManager_1 = require("../../manager/WorkerManager"),
            GameUtil = function() {
                function GameUtil() { this.mouseX = 0, this.mouseY = 0, egret.ImageLoader.crossOrigin = "anonymous" } return GameUtil.getInstance = function() { return null == this._instance && (this._instance = new GameUtil), this._instance }, GameUtil.prototype.line = function(x, y, w, h, r, c) { var sp = new EngineSprite_1.default; return sp.drawLine(x, y, w, h, r, c), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.circle = function(x, y, r, c) { var sp = new EngineSprite_1.default; return sp.drawCircle(x, y, r, c), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.triangle = function(x1, y1, x2, y2, x3, y3, c) { var sp = new EngineSprite_1.default; return sp.drawTriangle(x1, y1, x2, y2, x3, y3, c), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.rectangle = function(x, y, w, h, c) { var sp = new EngineSprite_1.default; return sp.drawRect(x, y, w, h, c), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.ellipse = function(x, y, w, h, c) { var sp = new EngineSprite_1.default; return sp.drawEllipse(x, y, w, h, c), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.sprite = function() { var sp = new EngineSprite_1.default; return this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.image = function(url, x, y, w, h) { var sp = new EngineImage_1.default; return sp.setPosition(x, y), sp.setSize(w, h), sp.loadpic(url), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.playAudio = function(url) { new Audio(url).play() }, GameUtil.prototype.text = function(x, y, s, v) { var sp = new EngineSprite_1.default; return sp.drawText(x, y, s, v), this.addChild(sp), WorkerManager_1.default.getInstance().saveObj(sp) }, GameUtil.prototype.rand = function(from, to) { return Math.floor((to - from) * Math.random()) + from }, GameUtil.prototype.addChild = function(obj) { CanvasView_1.default.getInstance().addChild(obj) }, GameUtil.prototype.removeChild = function(obj) { CanvasView_1.default.getInstance().removeChild(obj) }, GameUtil.prototype.mouseDown = function(fn) { window.onmousedown = function(e) { GameUtil.getInstance().mouseX = e.clientX, GameUtil.getInstance().mouseY = e.clientY, WorkerManager_1.default.getInstance().getMainWork().runFuction(fn) } }, GameUtil.prototype.mouseMove = function(fn) { window.onmousemove = function(e) { GameUtil.getInstance().mouseX = e.clientX, GameUtil.getInstance().mouseY = e.clientY, WorkerManager_1.default.getInstance().getMainWork().runFuction(fn) } }, GameUtil.prototype.mouseUp = function(fn) { window.onmouseup = function(e) { GameUtil.getInstance().mouseX = e.clientX, GameUtil.getInstance().mouseY = e.clientY, WorkerManager_1.default.getInstance().getMainWork().runFuction(fn) } }, GameUtil.prototype.onLoop = function(fn) { window.setInterval(function() { WorkerManager_1.default.getInstance().getMainWork().runFuction(fn) }) }, GameUtil }();
        exports.default = GameUtil }, { "../../manager/WorkerManager": 9, "../sprite/CanvasView": 26, "./EngineImage": 22, "./EngineSprite": 23 }],
    25: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var Scene_1 = require("../../base/view/Scene"),
            WorkerManager_1 = require("../../manager/WorkerManager"),
            CanvasView_1 = require("../sprite/CanvasView"),
            DataManager_1 = require("../../manager/DataManager"),
            DocumentManager_1 = require("../../manager/DocumentManager"),
            ConfigManager_1 = require("../../manager/ConfigManager"),
            OpenProjectView_1 = require("../document/OpenProjectView"),
            ThumbnailUtil_1 = require("../../util/ThumbnailUtil"),
            UIManager_1 = require("../../manager/UIManager"),
            MainScene = function(_super) {
                function MainScene() { var _this = _super.call(this) || this; return _this.newOpened = !0, _this.isSended = !1, _this.oldLines = 0, _this.pages = [], _this.readIndex = 0, _this } return __extends(MainScene, _super), MainScene.prototype.setData = function(data) { if (_super.prototype.setData.call(this, data), ConfigManager_1.default.getInstance().init(), this.addChild(CanvasView_1.default.getInstance()), WorkerManager_1.default.getInstance().init(this), window.location.href.indexOf("runner.html") >= 0) return void WorkerManager_1.default.getInstance().getMainWork().runCode(localStorage.getItem("code")); if (DataManager_1.default.getInstance().addEventListener(DataManager_1.default.SERVERCALLBACK, this.onServerDataReceived, this), DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.ROUTE_LOGIN, { uid: DataManager_1.default.getInstance().uid, cell: localStorage.getItem("user_id") }), window.location.href.indexOf("show.php") < 0 && (DocumentManager_1.default.getInstance().init(), WorkerManager_1.default.getInstance().getEditor().addEventListener("user_code_change", this.onGetUserCode, this), localStorage.getItem("nick_name"))) { var nick_name = localStorage.getItem("nick_name");
                        $("#dropdown-login .dropdown-toggle").html(nick_name + "<img class='icon-arrow-down' src='resource/assets/dropdown-arrow.svg'>"), $("#finish-login").show(), $("#navbar-login").hide() } }, MainScene.prototype.onTimer = function(event) {}, MainScene.prototype.onGetUserCode = function(e) { var that = this,
                        text = WorkerManager_1.default.getInstance().getEditorText(); if (DataManager_1.default.getInstance().studentWork ? 0 == this.isSended ? (this.isSended = !0, DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_PASS_CODE, { room: DataManager_1.default.getInstance().inRoomName, id: DataManager_1.default.getInstance().studentWork.uid, code: text })) : (TweenLite.killTweensOf(this), TweenLite.to(CanvasView_1.default.getInstance(), 2, { onComplete: function() { that.isSended = !1, DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_PASS_CODE, { room: DataManager_1.default.getInstance().inRoomName, id: DataManager_1.default.getInstance().studentWork.uid, code: text }) } })) : DataManager_1.default.getInstance().teacherID > 0 ? UIManager_1.default.getInstance().showMessage("text_classroom_teacher_onshow") : DataManager_1.default.getInstance().userinfo.vip - 10 >= 0 ? UIManager_1.default.getInstance().showMessage("text_classroom_teacher_onlook") : (0 == DataManager_1.default.getInstance().teacherCtrl || DataManager_1.default.getInstance().userinfo.vip - 10 >= 0) && (void 0 != DataManager_1.default.getInstance().curWork && (DataManager_1.default.getInstance().curWork.codes = void 0 == text ? "" : text), void 0 != DataManager_1.default.getInstance().curWork && DataManager_1.default.getInstance().curWork.codes.length > 0 && 0 == this.newOpened && DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_AUTOSAVE_WORK, { id: DataManager_1.default.getInstance().curWork.id, name: DataManager_1.default.getInstance().curWork.wname, code: DataManager_1.default.getInstance().curWork.codes })), DataManager_1.default.getInstance().teacherCtrl && DataManager_1.default.getInstance().userinfo.vip - 10 >= 0 ? DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_PUBLISH_CODE, { uid: DataManager_1.default.getInstance().uid, room: DataManager_1.default.getInstance().inRoomName, code: DataManager_1.default.getInstance().curWork.codes }) : DataManager_1.default.getInstance().teacherLook > 0 && (0 == this.isSended ? (this.isSended = !0, DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_PASS_CODE, { room: DataManager_1.default.getInstance().inRoomName, id: DataManager_1.default.getInstance().teacherLook, code: text })) : (TweenLite.killTweensOf(this), TweenLite.to(CanvasView_1.default.getInstance(), 2, { onComplete: function() { that.isSended = !1, DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_PASS_CODE, { room: DataManager_1.default.getInstance().inRoomName, id: DataManager_1.default.getInstance().teacherLook, code: text }) } }))), 0 != DataManager_1.default.getInstance().autoRunMode) { if (this.newOpened) return void(this.newOpened = !1);
                        WorkerManager_1.default.getInstance().getMainWork().refreshFrame(), this.oldLines = WorkerManager_1.default.getInstance().getEditor().getValidCodeLines() } }, MainScene.prototype.updateWork = function() { DataManager_1.default.getInstance().curWork && (WorkerManager_1.default.getInstance().setEditorText(DataManager_1.default.getInstance().curWork.codes), document.getElementById("project-title-in").innerHTML = DataManager_1.default.getInstance().curWork.wname, $("#editor-pane-nav-snippets-menu-input").text(DataManager_1.default.getInstance().curWork.jsplus), 0 == DataManager_1.default.getInstance().curWork.mode ? ($(".toggle-button").css("left", 30), $("#editor-option-wraptext span").text("JS")) : 1 == DataManager_1.default.getInstance().curWork.mode && ($(".toggle-button").css("left", 0), $("#editor-option-wraptext span").text("  python  ")), WorkerManager_1.default.getInstance().getMainWork().refreshFrame()) }, MainScene.prototype.openNewProject = function() { this.newOpened = !0, this.updateWork(), WorkerManager_1.default.getInstance().getMainWork().refreshFrame() }, MainScene.prototype.onServerDataReceived = function(event) { var rawData = event.data,
                        route = rawData.route,
                        dat = rawData.data.data; if (route == DataManager_1.default.ROUTE_LOGIN) { localStorage.getItem("nick_name") && dat.userinfo.nickName !== localStorage.getItem("nick_name") && (dat.userinfo.nickName = localStorage.getItem("nick_name"), DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_SET_NICKNAME, { uid: DataManager_1.default.getInstance().uid, name: localStorage.getItem("nick_name") })), DataManager_1.default.getInstance().userinfo = dat.userinfo, DataManager_1.default.getInstance().works = []; for (var j = 0; j < dat.works.length; j++) dat.works[j].mode + 0 < 1 && DataManager_1.default.getInstance().works.push(dat.works[j]); if (window.location.href.indexOf("show.php") < 0)
                            if (DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), DataManager_1.default.getInstance().works.length > 0 && (DataManager_1.default.getInstance().curWork = DataManager_1.default.getInstance().works[0]), document.getElementById("splash-cover").style.display = "none", this.newOpened = !0, window.location.href.indexOf("v=") >= 0) { var vals = window.location.href.split("v=");
                                vals.length > 1 && DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_GET_WORK, { id: vals[1] }) } else this.updateWork();
                        else { var vals = window.location.href.split("v=");
                            vals.length > 1 && DataManager_1.default.getInstance().callServerSocket(DataManager_1.default.GAME_GET_WORK, { id: vals[1] }) } } else if (route == DataManager_1.default.GAME_NEW_WORK) { if (!dat.work) return document.getElementById("new-project-text-notice1").style.display = "block", TweenLite.to(this, 1.5, { onComplete: function() { document.getElementById("new-project-text-notice1").style.display = "none" } }), document.getElementById("new-project").style.display = "block", void(document.getElementById("backgroundBoardId").style.display = "block");
                        dat.work.mode = 0, DataManager_1.default.getInstance().curWork = dat.work, DataManager_1.default.getInstance().works.push(dat.work), DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), this.updateWork(), document.getElementById("new-project").style.display = "none", document.getElementById("backgroundBoardId").style.display = "none", DataManager_1.default.getInstance().isCommunitWork = !1 } else if (route == DataManager_1.default.GAME_IMPORT_WORK) document.getElementById("backgroundBoardId").style.display = "none", document.getElementById("import-project").style.display = "none", dat.work ? (DataManager_1.default.getInstance().curWork = dat.work, DataManager_1.default.getInstance().works.push(dat.work), DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), this.updateWork(), UIManager_1.default.getInstance().showMessage("text_prompt_clone")) : UIManager_1.default.getInstance().showMessage("text_failed_clone");
                    else if (route == DataManager_1.default.GAME_CLONE_WORK) { if (!dat.work) return void UIManager_1.default.getInstance().showMessage("text_nameWrong_project");
                        DataManager_1.default.getInstance().curWork = dat.work, DataManager_1.default.getInstance().works.push(dat.work), DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), document.getElementById("clone-project").style.display = "none", document.getElementById("backgroundBoardId").style.display = "none", this.updateWork(), UIManager_1.default.getInstance().showMessage("text_prompt_clone"), window.location.href = "http://www.youyoucode.cn/ide/" } else if (route == DataManager_1.default.GAME_RENAME_WORK) dat.work ? (DataManager_1.default.getInstance().curWork.wname = dat.work.wname, DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), this.updateWork(), UIManager_1.default.getInstance().showMessage("text_prompt_rename"), ThumbnailUtil_1.default.worksPath()) : UIManager_1.default.getInstance().showMessage("text_nameWrong_project");
                    else if (route == DataManager_1.default.GAME_SAVE_WORK) { UIManager_1.default.getInstance().showMessage("text_prompt_save"); for (var finded = !1, j = 0; j < DataManager_1.default.getInstance().works.length; j++) DataManager_1.default.getInstance().works[j].id - dat.work.id == 0 && (finded = !0);
                        0 == finded && DataManager_1.default.getInstance().works.push(dat.work); for (var j = 0; j < DataManager_1.default.getInstance().works.length; j++) DataManager_1.default.getInstance().works[j].id - dat.work.id == 0 && (DataManager_1.default.getInstance().works[j].wname = dat.work.wname, DataManager_1.default.getInstance().works[j].codes = dat.work.codes, DataManager_1.default.getInstance().works[j].updateTime = dat.work.updateTime);
                        DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), DataManager_1.default.getInstance().curWork = dat.work, this.updateWork(), ThumbnailUtil_1.default.worksPath(), DataManager_1.default.getInstance().isCommunitWork = !1, 0 == finded && (window.location.href = "http://www.youyoucode.cn/ide/") } else if (route == DataManager_1.default.GAME_AUTOSAVE_WORK) { for (var finded = !1, j = 0; j < DataManager_1.default.getInstance().works.length; j++) DataManager_1.default.getInstance().works[j].id - dat.work.id == 0 && (finded = !0);
                        0 == finded && (DataManager_1.default.getInstance().curWork = dat.work, DataManager_1.default.getInstance().works.push(dat.work), DataManager_1.default.getInstance().works.sort(function(a, b) { return b.updateTime - a.updateTime }), this.updateWork(), window.location.href = "http://www.youyoucode.cn/ide/") } else if (route == DataManager_1.default.GAME_GET_WORK) dat.work && (DataManager_1.default.getInstance().curWork = dat.work), window.location.href.indexOf("show.php") >= 0 ? dat.work && ($("#game-area").hide(), WorkerManager_1.default.getInstance().setEditorText(dat.work.codes), $("#editor-pane-nav-snippets-menu-input").text(dat.work.jsplus), WorkerManager_1.default.getInstance().getMainWork().refreshFrame()) : this.updateWork(), document.getElementById("splash-cover").style.display = "none";
                    else if (route == DataManager_1.default.GAME_DELETE_WORK) { for (var works = [], j = 0; j < DataManager_1.default.getInstance().works.length; j++) dat.id - DataManager_1.default.getInstance().works[j].id != 0 && works.push(DataManager_1.default.getInstance().works[j]);
                        DataManager_1.default.getInstance().works = works, dat.id - DataManager_1.default.getInstance().curWork.id == 0 && DataManager_1.default.getInstance().works.length > 0 && (DataManager_1.default.getInstance().curWork = DataManager_1.default.getInstance().works[0], this.updateWork()), OpenProjectView_1.default.updateOpenProject() } }, MainScene.prototype.callback = function(dat) {}, MainScene }(Scene_1.default);
        exports.default = MainScene }, { "../../base/view/Scene": 3, "../../manager/ConfigManager": 5, "../../manager/DataManager": 6, "../../manager/DocumentManager": 7, "../../manager/UIManager": 8, "../../manager/WorkerManager": 9, "../../util/ThumbnailUtil": 12, "../document/OpenProjectView": 21, "../sprite/CanvasView": 26 }],
    26: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var CanvasView = function(_super) {
            function CanvasView() { var _this = _super.call(this) || this; return _this.sceneObjects = [], _this } return __extends(CanvasView, _super), CanvasView.getInstance = function() { return null == this._instance && (this._instance = new CanvasView), this._instance }, CanvasView.prototype.stopFrame = function() { this.updateIndex && (clearInterval(this.updateIndex), this.updateIndex = null) }, CanvasView.prototype.refresh = function() { this.stopFrame(), this.removeChildren(), this.sceneObjects = [] }, CanvasView }(egret.Sprite);
        exports.default = CanvasView }, {}],
    27: [function(require, module, exports) { "use strict"; var __extends = this && this.__extends || function() { var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) { for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]) }; return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) } }();
        Object.defineProperty(exports, "__esModule", { value: !0 }); var SyntaxCheckLoop_1 = require("../../worker/SyntaxCheckLoop"),
            ProblemAlertView_1 = require("./ProblemAlertView"),
            editModes = { javascript: "ace/mode/javascript" },
            EditorView = function(_super) {
                function EditorView() { return null !== _super && _super.apply(this, arguments) || this } return __extends(EditorView, _super), EditorView.prototype.init = function(language) { var _this = this;
                    void 0 === language && (language = "javascript"), this.language = language, this.editor = ace.edit("code-area"), this.editor.on("focus", function() { _this.dispatchEvent(new egret.Event("EditEvent", !1, !1, { type: "focus", data: !0 })) }), this.editor.on("change", function() { _this.dispatchEvent(new egret.Event("user_code_change", !1, !1, {})) }), this.editor.getSession().setTabSize(4), this.editor.setFontSize("20px"), this.editor.getSession().setUseSoftTabs(!0), this.editor.getSession().setMode("ace/mode/" + language), this.editor.setTheme("ace/theme/github"), this.editor.renderer.adjustWrapLimit(), this.editor.setAutoScrollEditorIntoView(!0), this.editor.renderer.setAnimatedScroll(!0), this.editor.setOption("highlightGutterLine", !0); var aceSession = this.editor.getSession();
                    this.aceDoc = aceSession.getDocument(), aceSession.setUseWorker(!1), aceSession.setMode(editModes[language]), aceSession.setWrapLimitRange(null, null), aceSession.setUseWrapMode(!0), aceSession.setNewLineMode("windows"), aceSession.setUseSoftTabs(!0), this.editor.setShowPrintMargin(!1), this.editor.setShowInvisibles(!1), this.editor.setBehavioursEnabled(!0), this.editor.setShowFoldWidgets(!1), this.editor.setKeyboardHandler(null), this.editor.setHighlightActiveLine(!0), this.editor.$blockScrolling = 1 / 0, this.createShortcuts(), this.initAutoComplete(!0, this.language), this.syntaxLoop = new SyntaxCheckLoop_1.default(this, this.language), this.problemShow = new ProblemAlertView_1.default; var self = this;
                    this.editor.commands.on("exec", function(e) { if (e.stopPropagation(), e.preventDefault(), -1 != ["Enter", "Return"].indexOf(e.command.name)) return _this.zatanna && _this.zatanna.on && _this.zatanna.on(), e.editor.execCommand("optimizeInsertMatch"); if (e.command && _this.editor && "updateTokensOnEnter" == e.command.name) { _this.editor.getCursorPosition().row >= _this.editor.getSession().getLength() - 2 && e.editor.renderer.scrollToRow(e.editor.renderer.getLastVisibleRow()) }
                        _this.zatanna && _this.zatanna.on && _this.zatanna.on(), e.command.exec(e.editor, e.args || {}) }), this.oldValue = "", this.newValue = this.editor.getValue(); var self = this;
                    this.editor.renderer.on("afterRender", function() { self.oldValue = self.newValue, self.editor ? self.newValue = self.editor.getValue() : self.newValue || (self.newValue = ""), self.oldValue != self.newValue && self.syntaxLoop.transpile(self.editor.getValue()) }) }, EditorView.prototype.initAutoComplete = function(autocomplete, language) { void 0 === autocomplete && (autocomplete = !0), this.autocomplete = autocomplete, this.zatanna = new Zatanna(this.editor, { basic: !0, liveCompletion: !0, snippetsLangDefaults: !1, completers: { keywords: !1, snippets: autocomplete, text: autocomplete }, autoLineEndings: { javascript: ";" }, popupFontSizePx: 16, popupWidthPx: 380 }), this.addSnippets(language) }, EditorView.prototype.updateAutocomplete = function(autocomplete) { this.autocomplete = autocomplete, this.zatanna && this.zatanna.set("snippets", autocomplete) }, EditorView.prototype.getLength = function() { return this.editor.session.doc.getLength() }, EditorView.prototype.getValidCodeLines = function() { for (var docLines = this.editor.session.doc.getAllLines(), docLength = this.editor.session.doc.getLength(), commentReg = /^\s*(#|\/\/)/, multiLineStartReg = /^\s*(\/\*)/, multiLineEndReg = /.*(\*\/)/, isInMultiComment = !1, notValidLineNum = 0, i = 0; i < docLength; ++i) { var docLine = docLines[i];
                        multiLineStartReg.test(docLine) ? isInMultiComment = !0 : multiLineEndReg.test(docLine) && (isInMultiComment = !1, ++notValidLineNum), 1 == isInMultiComment ? ++notValidLineNum : (commentReg.test(docLine) || /^$/.test(docLine)) && ++notValidLineNum } return docLength - notValidLineNum }, EditorView.prototype.createShortcuts = function() { var _this = this,
                        addCommand = function(command) { _this.editor.commands.addCommand(command) };
                    addCommand({ name: "test", bindKey: "F7", exec: function() { console.log("F7 pressed"), _this.syntaxLoop.transpile() } }), addCommand({ name: "optimizeInsertMatch", bindKey: "Enter|Return", exec: function() { if (_this.editor.getSession().selection.isEmpty()) { var cursor = _this.editor.getCursorPosition(),
                                    line = _this.aceDoc.getLine(cursor.row),
                                    popup = _this.editor.completer.popup,
                                    lineSlice = line.slice(0, cursor.column),
                                    lineData = lineSlice.split(/[^,]?\s*;\s*|[^,]?\s+/); if (!popup.getData(popup.getRow()).snippet || lineData.length < 1) _this.editor.completer.insertMatch();
                                else if (_this.editor.completer.popup.isOpen) { var bracketRight = (popup.getData(popup.getRow()).snippet, lineSlice.lastIndexOf(")")),
                                        heroRight = lineSlice.lastIndexOf("hero"); if (-1 != bracketRight && -1 != heroRight && bracketRight < heroRight || -1 == bracketRight && -1 != heroRight) { var startColum = Math.max(cursor.column - lineData.slice(-1)[0].length, bracketRight),
                                            Range_1 = ace.require("./range").Range,
                                            range = new Range_1(cursor.row, startColum, cursor.row, cursor.column);
                                        _this.editor.getSession().remove(range) }
                                    _this.editor.completer.insertMatch() } else _this.editor.execCommand("insertstring", "\n"), _this.editor.renderer.scrollCursorIntoView(), _this.editor.renderer.animateScrolling(_this.editor.renderer.scrollTop) } } }) }, EditorView.prototype.addSnippets = function(language) { var snippets = [];
                    snippets.push({ content: "circle(100,100,50,'red');\n", meta: "press enter", name: "circle", tabTrigger: "circle" }), snippets.push({ content: "rect", meta: "press enter", name: "rect", tabTrigger: "rect" }), snippets.push({ content: "ellipse", meta: "press enter", name: "ellipse", tabTrigger: "ellipse" }), snippets.push({ content: "image", meta: "press enter", name: "image", tabTrigger: "image" }), this.zatanna.addSnippets(snippets, language) }, EditorView.prototype.dispose = function() { this.syntaxLoop.terminate(), ProblemAlertView_1.default.getInstance().hideProblems(), this.editor = null }, EditorView }(egret.EventDispatcher);
        exports.default = EditorView }, { "../../worker/SyntaxCheckLoop": 31, "./ProblemAlertView": 28 }],
    28: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var ProblemAlertView = function() {
            function ProblemAlertView() { this.template = _.template("<p><div style='position:absolute; left:3px; width:248px; height:30px;border-bottom:1px solid white;'><span style='position:relative; left:7px; top: 3px;font-size:16px; color: #ffffff;' id='error-box'><%= title %></span><span style='position:absolute; top:3px; width: 31px; height: 31px; right:-3px;'><span id='problem-alert-close-btn'onmouseover='this.style.backgroundPosition=\"left -27px\"'onmouseout='this.style.backgroundPosition=\"left top\"'style='position:absolute; width:27px; height:27px; background:url(\"resource/assets/error_btn.png\")'></span></span></div></p><div style='height:120px;overflow:auto;overflow-x:hidden;margin:43px 0 0 0;'><% for(var i=0; i<problems.length; ++ i) {%><div style='left:10px; color: #000000; top: <%= 7 * i %>px; position:relative;line-height:120%;width: 225px;'><%= problems[i]['row']+':'+problems[i]['text'] %></div> <% } %></div></div>"); var problems = [{ text: "Unmerged error", raw: "Merged Warning" }];
                this.errortitle = "Error", this.el = document.getElementById("problem-alert-view"), this.el.innerHTML = this.template({ problems: problems, title: this.errortitle }) } return ProblemAlertView.getInstance = function() { return this.pInstance || (this.pInstance = new ProblemAlertView) }, ProblemAlertView.prototype.destroy = function() {}, ProblemAlertView.prototype.onCloseBtnClick = function(e) { this.hideProblems() }, ProblemAlertView.prototype.setProblems = function(problems) {!problems || problems.length <= 0 ? this.hideProblems() : this.showProblems(problems) }, ProblemAlertView.prototype.showProblems = function(problems) { if (problems && problems.length && (this.problems = problems), this.problems && this.problems.length && (this.el.innerHTML = this.template({ problems: this.problems, title: this.errortitle }), this.el.visible = !0, this.el.style.display = "block"), null == document.getElementById("problem-alert-close-btn").onclick) { var self = this;
                    document.getElementById("problem-alert-close-btn").onclick = function(e) { self.hideProblems() } } }, ProblemAlertView.prototype.hideProblems = function() { this.el.visible = !1, this.el.style.display = "none" }, ProblemAlertView }();
        exports.default = ProblemAlertView }, {}],
    29: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var WorkerManager_1 = require("../manager/WorkerManager"),
            CodeEngine = function() {
                function CodeEngine(language) { this._interval = 0, this._code = "", this._oldcode = ""; var aetherOptions = { executionLimit: 9e7, problems: { jshint_W040: { level: "ignore" } }, language: language, includeFlow: !0, includeMetrics: !0, protectBuiltins: !0, protectAPI: !1, languageVersion: "es6" };
                    this._aether = new Aether(aetherOptions), this._aether.setLanguage(language), this._language = language } return Object.defineProperty(CodeEngine.prototype, "lastAST", { get: function() { return this._lastAST }, enumerable: !0, configurable: !0 }), Object.defineProperty(CodeEngine.prototype, "language", { get: function() { return this._language }, enumerable: !0, configurable: !0 }), CodeEngine.prototype.getCode = function() { return this._code }, CodeEngine.prototype.getOldCode = function() { return this._oldcode }, CodeEngine.prototype.setCode = function(code) { this._oldcode = code, code = code.replace(/rand\(/g, "game.rand("), code = code.replace(/image\(/g, "game.image("), code = code.replace(/sprite\(/g, "game.sprite("), code = code.replace(/ellipse\(/g, "game.ellipse("), code = code.replace(/rectangle\(/g, "game.rectangle("), code = code.replace(/triangle\(/g, "game.triangle("), code = code.replace(/circle\(/g, "game.circle("), code = code.replace(/line\(/g, "game.line("), code = code.replace(/playAudio\(/g, "game.playAudio("), code = code.replace(/mouseDown\(/g, "game.mouseDown("), code = code.replace(/mouseMove\(/g, "game.mouseMove("), code = code.replace(/onLoop\(/g, "game.onLoop("), code = code.replace(/mouseX/g, "game.mouseX"), code = code.replace(/mouseY/g, "game.mouseY"), this._code = code }, CodeEngine.prototype.getAether = function() { return this._aether }, CodeEngine.prototype.getCompileInfo = function() { if (this._aether) return { problems: this._aether.problems, flow: this._aether.flow, metrics: this._aether.metrics } }, CodeEngine.prototype.compile = function() { this._aether.transpile(this._code), this._aether.createFunction(), this._aether.esperEngine.loadAST(this._aether.ast) }, CodeEngine.prototype.runFuction = function(fn, args) { if (fn)
                        for (var functionname = fn.toString().slice(10, -1), i = 0; i < this._aether.ast.body.length; i++) { var node = this._aether.ast.body[i]; if ("FunctionDeclaration" == node.type && node.id.name == functionname) { for (var j = 0; j < node.params.length; j++) this.addObject(node.params[j].name, args[j]); var dd = this._aether.esperEngine.functionFromASTSync(node.body, !1, null);
                                dd && dd.apply(this._aether.esperEngine, null); break } } }, CodeEngine.prototype.initFunction = function() { for (var i = 0; i < this._aether.ast.body.length; i++) { var node = this._aether.ast.body[i]; if ("FunctionDeclaration" == node.type) this.addFunction(node.id.name, this._aether.esperEngine.functionFromASTSync(node.body, !1, null));
                        else if ("VariableDeclaration" == node.type && node.declarations)
                            for (var j = 0; j < node.declarations.length; j++)
                                if (node.declarations[j].init)
                                    if ("CallExpression" == node.declarations[j].init.type) WorkerManager_1.default.getInstance().saveFunctionName(node.declarations[j].id.originalRange.end.row, node.declarations[j].id.name);
                                    else if (node.declarations[j].init.arguments) { for (var arr = [], k = 0; k < node.declarations[j].init.arguments.length; k++) arr.push(node.declarations[j].init.arguments[k].value);
                            this.addArray(node.declarations[j].id.name, arr) } else "Literal" == node.declarations[j].init.type && this.addValue(node.declarations[j].id.name, node.declarations[j].init.value) } }, CodeEngine.prototype.addObject = function(name, object) { this._aether.esperEngine.addGlobalBridge(name, object) }, CodeEngine.prototype.addFunction = function(name, func) { this._aether.esperEngine.addGlobalFx(name, func) }, CodeEngine.prototype.addValue = function(name, val) { this._aether.esperEngine && this._aether.esperEngine.addGlobalValue(name, val) }, CodeEngine.prototype.addArray = function(name, val) { this._aether.esperEngine.addGlobal(name, val) }, CodeEngine.prototype.runCode = function() { this._aether.run() }, CodeEngine.prototype.stepCode = function() { clearInterval(this._interval), this._interval = setInterval(this.update, 1, this) }, CodeEngine.prototype.update = function(context) { context.stepOne() && (clearInterval(context._interval), WorkerManager_1.default.getInstance().highlightCurrGutterLine(0)) }, CodeEngine.prototype.reset = function() { this._aether.reset(), this._aether.esperEngine = null }, CodeEngine.prototype.stepOne = function() { var result, engine = this._aether.esperEngine; try { result = engine.step() } catch (e) { result = e } return this.collectStepAST(engine), !!result }, CodeEngine.prototype.collectStepAST = function(engine) { if (engine) { for (var frames_1 = engine.evaluator.frames, ast = void 0, i = 0; i < frames_1.length; i++)
                            if (frames_1[i].ast) { ast = frames_1[i].ast; break }
                        ast && (this._lastAST = ast) } }, CodeEngine.prototype.dispose = function() { this.reset() }, CodeEngine }();
        exports.default = CodeEngine }, { "../manager/WorkerManager": 9 }],
    30: [function(require, module, exports) {
        "use strict";
        var __extends = this && this.__extends || function() {
            var extendStatics = Object.setPrototypeOf || { __proto__: [] }
            instanceof Array && function(d, b) { d.__proto__ = b } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p])
            };
            return function(d, b) {
                function __() { this.constructor = d }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __) }
        }();
        Object.defineProperty(exports, "__esModule", { value: !0 });
        var CodeEngine_1 = require("./CodeEngine"),
            WorkerManager_1 = require("../manager/WorkerManager"),
            GameUtil_1 = require("../view/engine/GameUtil"),
            ProblemAlertView_1 = require("../view/sprite/ProblemAlertView"),
            DataManager_1 = require("../manager/DataManager"),
            CodeWorker = function(_super) {
                function CodeWorker(actor, target) { var _this = _super.call(this, target) || this; return _this._isComplete = !1, _this._actor = actor, _this._codeEngine = new CodeEngine_1.default("javascript"), _this } return __extends(CodeWorker, _super), CodeWorker.prototype.getEngine = function() { return this._codeEngine }, Object.defineProperty(CodeWorker.prototype, "actor", { get: function() { return this._actor }, enumerable: !0, configurable: !0 }), CodeWorker.prototype.runFuction = function(fn, args) { this._codeEngine.runFuction(fn, args) }, CodeWorker.prototype.stepCode = function() { this._codeEngine.runCode() }, CodeWorker.prototype.showErrorInfo = function(message, url, linenumber) { var error = {};
                    error.type = "error", error.row = "Line" + (linenumber - 10 || 1), error.text = message }, CodeWorker.prototype.refreshFrame = function() { var lleft = document.getElementById("drawBoard").offsetLeft; if (null == DataManager_1.default.getInstance().curWork.mode || 0 == DataManager_1.default.getInstance().curWork.mode)
                        if (window.location.href.indexOf("show.php") >= 0) { document.getElementById("drawBoard").style.display = "none"; var linkStr = $("#editor-pane-nav-snippets-menu-input").val();
                            document.getElementById("showContent").innerHTML = linkStr; for (var lines = linkStr.split("\n"), i = 0; i < lines.length - 1; i++) { var line = lines[i]; if (line.indexOf("script") >= 0) { var script = document.createElement("script");
                                    script.type = "text/javascript"; var scpt, hds = line.split('src="');
                                    hds.length > 1 ? scpt = hds[1].split('"') : (hds = line.split("src='"), scpt = hds[1].split("'")), script.src = scpt[0], $("#showContent").append(script) } }
                            $("#shows").html(WorkerManager_1.default.getInstance().getEditorText()) } else { document.getElementById("drawBoard").outerHTML = '<iframe id="drawBoard" frameborder="0"></iframe>', window.showErrorInfo = this.showErrorInfo, $("#error-info").text(""), ProblemAlertView_1.default.getInstance().onCloseBtnClick(null); var doc = "<html>\n<body style='margin:0'>\n<script>\n                    window.onerror = function(message, url, linenumber) {\n                        parent[\"showErrorInfo\"](message, url, linenumber);\n                    }<\/script>\n" + $("#editor-pane-nav-snippets-menu-input").val() + "<script>\n" + WorkerManager_1.default.getInstance().getEditorText() + "\n<\/script>\n</body>\n</html>\n";
                            $("#drawBoard").attr("srcdoc", doc), $("#drawBoard").css("left", lleft) }
                    else { this._codeEngine.reset(), this._codeEngine.setCode(WorkerManager_1.default.getInstance().getEditor().editor.getValue()), this._codeEngine.compile(); var compileInfo = this._codeEngine.getCompileInfo(),
                            errors = [];
                        compileInfo && (errors = compileInfo.problems.errors, errors.forEach(function(error) { error.type = "error", error.row = error.range && error.range[0] && error.range[0].row || 1, error.text = error.message })), WorkerManager_1.default.getInstance().getEditor().editor.renderer.setAnnotations(errors), errors.length < 1 && (localStorage.setItem("code", WorkerManager_1.default.getInstance().getEditor().editor.getValue()), $("#drawBoard").attr("src", "runner.html")) } }, CodeWorker.prototype.runCode = function(code) { this._codeEngine.reset(), this._codeEngine.setCode(code), this._codeEngine.compile(), this._codeEngine.initFunction(), this._codeEngine.addObject("game", GameUtil_1.default.getInstance()), this._codeEngine.runCode() }, CodeWorker.prototype.reset = function() { this._codeEngine.reset(), this._isComplete = !1 }, CodeWorker.prototype.stop = function() { this.reset() }, CodeWorker.prototype.dispose = function() { this.reset(), this._codeEngine.dispose(), this._actor.dispose(), this._actor = null }, CodeWorker }(egret.EventDispatcher);
        exports.default = CodeWorker
    }, { "../manager/DataManager": 6, "../manager/WorkerManager": 9, "../view/engine/GameUtil": 24, "../view/sprite/ProblemAlertView": 28, "./CodeEngine": 29 }],
    31: [function(require, module, exports) { "use strict";
        Object.defineProperty(exports, "__esModule", { value: !0 }); var SyntaxCheckLoop = function() {
            function SyntaxCheckLoop(editorView, language) { this.editor = editorView.editor, this.worker = new Worker("lib/worker.js"); var userCode = this.editor.getValue();
                this.worker.postMessage({ type: "transpile", rawCode: userCode }); var notifyErrors = function(e) { var data = e.data; "compile_info" == data.type && data.problems.errors.forEach(function(error) { error.type = "error", error.row = error.range && error.range[0] && error.range[0].row, error.text = error.message }) }.bind(this);
                this.worker.onmessage = notifyErrors } return SyntaxCheckLoop.prototype.transpile = function(userCode) { userCode || (userCode = this.editor.getValue()), this.worker.postMessage({ type: "transpile", language: this.language, rawCode: userCode }) }, SyntaxCheckLoop.prototype.terminate = function() { this.worker && this.worker.terminate() }, SyntaxCheckLoop }();
        exports.default = SyntaxCheckLoop }, {}]
}, {}, [4]);