/*!
 * esper.js
 *
 * Compiled: Wed Jun 29 2016 22:09:47 GMT+0000 (UTC)
 * Target  : web (umd)
 * Profile : web
 * Version : ???
 *
 * The MIT License (MIT)
 * Copyright (c) 2016 Robert Blanckaert
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *
 */
(function webpackUniversalModuleDefinition(root, factory) {
    if(typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if(typeof define === 'function' && define.amd)
        define([], factory);
    else if(typeof exports === 'object')
        exports["esper"] = factory();
    else
        root["esper"] = factory();
})(this, function() {
    return /******/ (function(modules) { // webpackBootstrap
        /******/ 	// The module cache
        /******/ 	var installedModules = {};

        /******/ 	// The require function
        /******/ 	function __webpack_require__(moduleId) {

            /******/ 		// Check if module is in cache
            /******/ 		if(installedModules[moduleId])
            /******/ 			return installedModules[moduleId].exports;

            /******/ 		// Create a new module (and put it into the cache)
            /******/ 		var module = installedModules[moduleId] = {
                /******/ 			exports: {},
                /******/ 			id: moduleId,
                /******/ 			loaded: false
                /******/ 		};

            /******/ 		// Execute the module function
            /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

            /******/ 		// Flag the module as loaded
            /******/ 		module.loaded = true;

            /******/ 		// Return the exports of the module
            /******/ 		return module.exports;
            /******/ 	}


        /******/ 	// expose the modules object (__webpack_modules__)
        /******/ 	__webpack_require__.m = modules;

        /******/ 	// expose the module cache
        /******/ 	__webpack_require__.c = installedModules;

        /******/ 	// __webpack_public_path__
        /******/ 	__webpack_require__.p = "";

        /******/ 	// Load entry module and return exports
        /******/ 	return __webpack_require__(0);
        /******/ })
    /************************************************************************/
    /******/ ([
        /* 0 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(1);


            /***/ },
        /* 1 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var Engine = __webpack_require__(2);

            function esper(opts) {
                return new Engine(opts);
            }

            esper.Engine = Engine;
            esper.Value = __webpack_require__(103);
            esper.ASTPreprocessor = __webpack_require__(156);
            esper.FutureValue = __webpack_require__(143);

            esper.eval = function (source) {
                return new Engine().evalSync(source).toNative();
            };

            esper.version = __webpack_require__(183).version;

            module.exports = esper;

            /***/ },
        /* 2 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _promise = __webpack_require__(7);

            var _promise2 = _interopRequireDefault(_promise);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Evaluator = __webpack_require__(99);
            var Realm = __webpack_require__(151);
            var Scope = __webpack_require__(152);
            var Value = __webpack_require__(103);
            var BridgeValue = __webpack_require__(139);
            var ASTPreprocessor = __webpack_require__(156);
            var FutureValue = __webpack_require__(143);
            var EasyNativeFunction = __webpack_require__(157);
            var ClosureValue = __webpack_require__(141);

            var defaultOptions = {
                strict: false,
                foreignObjectMode: 'link',
                addInternalStack: false,
                executionLimit: Infinity,
                exposeEsperGlobal: true,
                extraErrorInfo: false,
                addExtraErrorInfoToStacks: false,
                bookmarkInvocationMode: 'error',
                yieldPower: 5
            };

            /**
             * Container class for all of esper.
             */

            var Engine = function () {
                function Engine(options) {
                    (0, _classCallCheck3.default)(this, Engine);

                    options = options || {};
                    this.options = {};
                    for (var k in defaultOptions) {
                        if (k in options) this.options[k] = options[k];else this.options[k] = defaultOptions[k];
                    }
                    this.realm = new Realm(this.options);
                    this.evaluator = new Evaluator(this.realm, null, this.globalScope);
                    this.evaluator.defaultYieldPower = this.options.yieldPower;
                    this.evaluator.yieldPower = this.options.yieldPower;
                }

                /**
                 * Evalute `code` and return a promise for the result.
                 *
                 * @access public
                 * @param {string} code - String of code to evaulate
                 * @return {Promise<Value>} - The result of execution, as a promise.
                 */

                (0, _createClass3.default)(Engine, [{
                    key: 'eval',
                    value: function _eval(code) {
                        var ast = this.realm.parser(code);
                        return this.evalAST(ast, { source: code });
                    }

                    /**
                     * Evalute `code` and return a the result.
                     *
                     * @access public
                     * @param {string} code - String of code to evaulate
                     * @return {Value} - The result of execution
                     */

                }, {
                    key: 'evalSync',
                    value: function evalSync(code) {
                        var ast = this.realm.parser(code);
                        return this.evalASTSync(ast, { source: code });
                    }

                    /**
                     * Evalute `ast` and return a promise for the result.
                     *
                     * @access public
                     * @param {Node} ast - ESTree AST representing the code to run.
                     * @param {string} codeRef - The code that was used to generate the AST.
                     * @return {Value} - The result of execution, as a promise.
                     */

                }, {
                    key: 'evalAST',
                    value: function evalAST(ast, opts) {
                        var _this = this;

                        //console.log(escodegen.generate(ast));
                        this.loadAST(ast, opts);
                        var p = this.run();
                        p.then(function () {
                            return delete _this.generator;
                        });
                        return p;
                    }
                }, {
                    key: 'evalASTSync',
                    value: function evalASTSync(ast, opts) {
                        this.loadAST(ast, opts);
                        var value = this.runSync();
                        delete this.generator;
                        return value;
                    }
                }, {
                    key: 'loadAST',
                    value: function loadAST(ast, opts) {
                        var past = ASTPreprocessor.process(ast, opts);
                        this.evaluator.frames = [];
                        this.evaluator.pushAST(past, this.globalScope);
                        this.evaluator.ast = past;
                        this.generator = this.evaluator.generator();
                    }
                }, {
                    key: 'load',
                    value: function load(code) {
                        var ast = this.realm.parser(code);
                        this.loadAST(ast, code);
                    }
                }, {
                    key: 'step',
                    value: function step() {
                        if (!this.generator) throw new Error('No code loaded to step');
                        var value = this.generator.next();
                        return value.done;
                    }
                }, {
                    key: 'run',
                    value: function run() {
                        var that = this;
                        var steps = 0;
                        function handler(value) {
                            while (!value.done) {
                                value = that.generator.next();
                                if (value.value && value.value.then) {
                                    return value.value.then(function (v) {
                                        return { done: false, value: v };
                                    });
                                }
                                if (++steps > that.options.executionLimit) throw new Error('Execution Limit Reached');
                            }
                            return value;
                        }
                        return new _promise2.default(function (resolve, reject) {
                            try {
                                var value = that.generator.next();
                                resolve(value);
                            } catch (e) {
                                reject(e);
                            }
                        }).then(handler).then(function (v) {
                            return v.value;
                        });
                    }
                }, {
                    key: 'runSync',
                    value: function runSync() {
                        var steps = 0;
                        var value = this.generator.next();
                        while (!value.done) {
                            value = this.generator.next();
                            if (value.value && value.value.then) throw new Error('Can\'t deal with futures when running in sync mode');
                            if (++steps > this.options.executionLimit) throw new Error('Execution Limit Reached');
                        }
                        return value.value;
                    }

                    /**
                     * Refrence to the global scope.
                     * @return {Scope}
                     */

                }, {
                    key: 'addGlobal',
                    value: function addGlobal(name, what) {
                        this.globalScope.add(name, this.realm.makeForForeignObject(what));
                    }
                }, {
                    key: 'addGlobalFx',
                    value: function addGlobalFx(name, what) {
                        var x = EasyNativeFunction.makeForNative(this.realm, what);
                        this.globalScope.add(name, x);
                    }
                }, {
                    key: 'addGlobalValue',
                    value: function addGlobalValue(name, what) {
                        this.globalScope.remove(name);
                        this.globalScope.add(name, Value.fromNative(what, this.realm));
                    }
                }, {
                    key: 'addGlobalBridge',
                    value: function addGlobalBridge(name, what) {
                        this.globalScope.add(name, new BridgeValue(what, this.realm));
                    }
                }, {
                    key: 'fetchFunctionSync',
                    value: function fetchFunctionSync(name, shouldYield) {
                        var genfx = this.fetchFunction(name, shouldYield);
                        return function () {
                            var gen = genfx.apply(this, arguments);
                            var val = gen.next();
                            //TODO: Make sure we dont await as it will loop FOREVER.
                            while (!val.done) {
                                val = gen.next();
                            }return val.value;
                        };
                    }
                }, {
                    key: 'fetchFunction',
                    value: function fetchFunction(name, shouldYield) {
                        var val = this.globalScope.get(name);
                        return this.makeFunctionFromClosure(val, shouldYield);
                    }
                }, {
                    key: 'functionFromSource',
                    value: function functionFromSource(source, shouldYield) {
                        var code = source;
                        var ast = this.realm.parser(code, { inFunctionBody: true });
                        return this.functionFromAST(ast, shouldYield);
                    }
                }, {
                    key: 'functionFromAST',
                    value: function functionFromAST(ast, shouldYield, source) {
                        var past = {
                            type: 'FunctionExpression',
                            body: { type: 'BlockStatement', body: ast.body },
                            params: []
                        };
                        past = ASTPreprocessor.process(past, { source: source });
                        var fx = new ClosureValue(past, this.globalScope);
                        return this.makeFunctionFromClosure(fx, shouldYield, this.evaluator);
                    }
                }, {
                    key: 'functionFromSourceSync',
                    value: function functionFromSourceSync(source, shouldYield) {
                        var genfx = this.functionFromSource(source, shouldYield);
                        return function () {
                            var gen = genfx.apply(this, arguments);
                            var val = gen.next();
                            //TODO: Make sure we dont await as it will loop FOREVER.
                            while (!val.done) {
                                val = gen.next();
                            }return val.value;
                        };
                    }
                }, {
                    key: 'functionFromASTSync',
                    value: function functionFromASTSync(ast, shouldYield, source) {
                        var genfx = this.functionFromAST(ast, shouldYield, source);
                        return function () {
                            var gen = genfx.apply(this, arguments);
                            var val = gen.next();
                            //TODO: Make sure we dont await as it will loop FOREVER.
                            while (!val.done) {
                                val = gen.next();
                            }return val.value;
                        };
                    }
                }, {
                    key: 'makeFunctionFromClosure',
                    value: function makeFunctionFromClosure(val, shouldYield, evalu) {

                        var realm = this.realm;
                        var scope = this.globalScope;
                        var that = this;
                        var evaluator = evalu || this.evaluator;
                        if (!evaluator) throw new Error("Evaluator is falsey");
                        if (!val) return;

                        return _regenerator2.default.mark(function _callee() {
                            var realThis,
                                realArgs,
                                i,
                                c,
                                gen,
                                last,
                                _args = arguments;
                            return _regenerator2.default.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            realThis = realm.makeForForeignObject(this);
                                            realArgs = new Array(_args.length);

                                            for (i = 0; i < _args.length; ++i) {
                                                realArgs[i] = realm.makeForForeignObject(_args[i]);
                                            }

                                            c = val.call(realThis, realArgs, scope);

                                            evaluator.pushFrame({ type: 'program', generator: c, scope: scope });
                                            gen = evaluator.generator();
                                            return _context.delegateYield(that.filterGenerator(gen, shouldYield, evaluator), 't0', 7);

                                        case 7:
                                            last = _context.t0;

                                            if (!last) {
                                                _context.next = 10;
                                                break;
                                            }

                                            return _context.abrupt('return', last.toNative());

                                        case 10:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        });
                    }

                    /**
                     * Returns a new engine that executes in the same Realm.  Useful
                     * for creating threads / coroutines
                     * @return {Engine}
                     */

                }, {
                    key: 'fork',
                    value: function fork() {
                        var engine = new Engine(this.options);
                        var scope = this.globalScope;

                        engine.realm = this.realm;

                        engine.evaluator = this.makeEvaluatorClone();
                        return engine;
                    }
                }, {
                    key: 'makeEvaluatorClone',
                    value: function makeEvaluatorClone() {
                        var evaluator = new Evaluator(this.realm, this.evaluator.ast, this.globalScope);
                        evaluator.frames = [];
                        if (this.evaluator.insturment) {
                            evaluator.insturment = this.evaluator.insturment;
                        }
                        return evaluator;
                    }
                }, {
                    key: 'filterGenerator',
                    value: _regenerator2.default.mark(function filterGenerator(gen, shouldYield, evaluator) {
                        var value, steps, yieldValue;
                        return _regenerator2.default.wrap(function filterGenerator$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        value = gen.next();
                                        steps = 0;

                                        if (evaluator) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        throw new Error("Evaluator is falsey");

                                    case 4:
                                        if (value.done) {
                                            _context2.next = 25;
                                            break;
                                        }

                                        if (shouldYield) {
                                            _context2.next = 10;
                                            break;
                                        }

                                        _context2.next = 8;
                                        return;

                                    case 8:
                                        _context2.next = 20;
                                        break;

                                    case 10:
                                        if (!(evaluator.topFrame.type == 'await')) {
                                            _context2.next = 16;
                                            break;
                                        }

                                        if (value.value.resolved) {
                                            _context2.next = 14;
                                            break;
                                        }

                                        _context2.next = 14;
                                        return;

                                    case 14:
                                        _context2.next = 20;
                                        break;

                                    case 16:
                                        yieldValue = shouldYield(this, evaluator, value.value);

                                        if (!(yieldValue !== false)) {
                                            _context2.next = 20;
                                            break;
                                        }

                                        _context2.next = 20;
                                        return yieldValue;

                                    case 20:
                                        value = gen.next(value.value);

                                        if (!(++steps > this.options.executionLimit)) {
                                            _context2.next = 23;
                                            break;
                                        }

                                        throw new Error('Execution Limit Reached');

                                    case 23:
                                        _context2.next = 4;
                                        break;

                                    case 25:
                                        return _context2.abrupt('return', value.value);

                                    case 26:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, filterGenerator, this);
                    })
                }, {
                    key: 'globalScope',
                    get: function get() {
                        return this.realm.globalScope;
                    }
                }]);
                return Engine;
            }();

            module.exports = Engine;

            /***/ },
        /* 3 */
        /***/ function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
                // kept identical to the way it is obtained in runtime.js
                var g =
                    typeof global === "object" ? global :
                        typeof window === "object" ? window :
                            typeof self === "object" ? self : this;

                // Use `getOwnPropertyNames` because not all browsers support calling
                // `hasOwnProperty` on the global `self` object in a worker. See #183.
                var hadRuntime = g.regeneratorRuntime &&
                    Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

                // Save the old regeneratorRuntime in case it needs to be restored later.
                var oldRuntime = hadRuntime && g.regeneratorRuntime;

                // Force reevalutation of runtime.js.
                g.regeneratorRuntime = undefined;

                module.exports = __webpack_require__(4);

                if (hadRuntime) {
                    // Restore the original runtime.
                    g.regeneratorRuntime = oldRuntime;
                } else {
                    // Remove the global property added by runtime.js.
                    try {
                        delete g.regeneratorRuntime;
                    } catch(e) {
                        g.regeneratorRuntime = undefined;
                    }
                }

                module.exports = { "default": module.exports, __esModule: true };

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ },
        /* 4 */
        /***/ function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global, module, process) {"use strict";

                var _promise = __webpack_require__(7);

                var _promise2 = _interopRequireDefault(_promise);

                var _setPrototypeOf = __webpack_require__(75);

                var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

                var _create = __webpack_require__(78);

                var _create2 = _interopRequireDefault(_create);

                var _typeof2 = __webpack_require__(81);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _iterator = __webpack_require__(82);

                var _iterator2 = _interopRequireDefault(_iterator);

                var _symbol = __webpack_require__(84);

                var _symbol2 = _interopRequireDefault(_symbol);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                /**
                 * Copyright (c) 2014, Facebook, Inc.
                 * All rights reserved.
                 *
                 * This source code is licensed under the BSD-style license found in the
                 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
                 * additional grant of patent rights can be found in the PATENTS file in
                 * the same directory.
                 */

                !function (global) {
                    "use strict";

                    var hasOwn = Object.prototype.hasOwnProperty;
                    var undefined; // More compressible than void 0.
                    var iteratorSymbol = typeof _symbol2.default === "function" && _iterator2.default || "@@iterator";

                    var inModule = ( false ? "undefined" : (0, _typeof3.default)(module)) === "object";
                    var runtime = global.regeneratorRuntime;
                    if (runtime) {
                        if (inModule) {
                            // If regeneratorRuntime is defined globally and we're in a module,
                            // make the exports object identical to regeneratorRuntime.
                            module.exports = runtime;
                        }
                        // Don't bother evaluating the rest of this file if the runtime was
                        // already defined globally.
                        return;
                    }

                    // Define the runtime globally (as expected by generated code) as either
                    // module.exports (if we're in a module) or a new, empty object.
                    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                    function wrap(innerFn, outerFn, self, tryLocsList) {
                        // If outerFn provided, then outerFn.prototype instanceof Generator.
                        var generator = (0, _create2.default)((outerFn || Generator).prototype);
                        var context = new Context(tryLocsList || []);

                        // The ._invoke method unifies the implementations of the .next,
                        // .throw, and .return methods.
                        generator._invoke = makeInvokeMethod(innerFn, self, context);

                        return generator;
                    }
                    runtime.wrap = wrap;

                    // Try/catch helper to minimize deoptimizations. Returns a completion
                    // record like context.tryEntries[i].completion. This interface could
                    // have been (and was previously) designed to take a closure to be
                    // invoked without arguments, but in all the cases we care about we
                    // already have an existing method we want to call, so there's no need
                    // to create a new function object. We can even get away with assuming
                    // the method takes exactly one argument, since that happens to be true
                    // in every case, so we don't have to touch the arguments object. The
                    // only additional allocation required is the completion record, which
                    // has a stable shape and so hopefully should be cheap to allocate.
                    function tryCatch(fn, obj, arg) {
                        try {
                            return { type: "normal", arg: fn.call(obj, arg) };
                        } catch (err) {
                            return { type: "throw", arg: err };
                        }
                    }

                    var GenStateSuspendedStart = "suspendedStart";
                    var GenStateSuspendedYield = "suspendedYield";
                    var GenStateExecuting = "executing";
                    var GenStateCompleted = "completed";

                    // Returning this object from the innerFn has the same effect as
                    // breaking out of the dispatch switch statement.
                    var ContinueSentinel = {};

                    // Dummy constructor functions that we use as the .constructor and
                    // .constructor.prototype properties for functions that return Generator
                    // objects. For full spec compliance, you may wish to configure your
                    // minifier not to mangle the names of these two functions.
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}

                    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
                    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                    GeneratorFunctionPrototype.constructor = GeneratorFunction;
                    GeneratorFunction.displayName = "GeneratorFunction";

                    // Helper for defining the .next, .throw, and .return methods of the
                    // Iterator interface in terms of a single ._invoke method.
                    function defineIteratorMethods(prototype) {
                        ["next", "throw", "return"].forEach(function (method) {
                            prototype[method] = function (arg) {
                                return this._invoke(method, arg);
                            };
                        });
                    }

                    runtime.isGeneratorFunction = function (genFun) {
                        var ctor = typeof genFun === "function" && genFun.constructor;
                        return ctor ? ctor === GeneratorFunction ||
                        // For the native GeneratorFunction constructor, the best we can
                        // do is to check its .name property.
                        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                    };

                    runtime.mark = function (genFun) {
                        if (_setPrototypeOf2.default) {
                            (0, _setPrototypeOf2.default)(genFun, GeneratorFunctionPrototype);
                        } else {
                            genFun.__proto__ = GeneratorFunctionPrototype;
                        }
                        genFun.prototype = (0, _create2.default)(Gp);
                        return genFun;
                    };

                    // Within the body of any async function, `await x` is transformed to
                    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                    // `value instanceof AwaitArgument` to determine if the yielded value is
                    // meant to be awaited. Some may consider the name of this method too
                    // cutesy, but they are curmudgeons.
                    runtime.awrap = function (arg) {
                        return new AwaitArgument(arg);
                    };

                    function AwaitArgument(arg) {
                        this.arg = arg;
                    }

                    function AsyncIterator(generator) {
                        // This invoke function is written in a style that assumes some
                        // calling function (or Promise) will handle exceptions.
                        function invoke(method, arg) {
                            var result = generator[method](arg);
                            var value = result.value;
                            return value instanceof AwaitArgument ? _promise2.default.resolve(value.arg).then(invokeNext, invokeThrow) : _promise2.default.resolve(value).then(function (unwrapped) {
                                // When a yielded Promise is resolved, its final value becomes
                                // the .value of the Promise<{value,done}> result for the
                                // current iteration. If the Promise is rejected, however, the
                                // result for this iteration will be rejected with the same
                                // reason. Note that rejections of yielded Promises are not
                                // thrown back into the generator function, as is the case
                                // when an awaited Promise is rejected. This difference in
                                // behavior between yield and await is important, because it
                                // allows the consumer to decide what to do with the yielded
                                // rejection (swallow it and continue, manually .throw it back
                                // into the generator, abandon iteration, whatever). With
                                // await, by contrast, there is no opportunity to examine the
                                // rejection reason outside the generator function, so the
                                // only option is to throw it from the await expression, and
                                // let the generator function handle the exception.
                                result.value = unwrapped;
                                return result;
                            });
                        }

                        if ((typeof process === "undefined" ? "undefined" : (0, _typeof3.default)(process)) === "object" && process.domain) {
                            invoke = process.domain.bind(invoke);
                        }

                        var invokeNext = invoke.bind(generator, "next");
                        var invokeThrow = invoke.bind(generator, "throw");
                        var invokeReturn = invoke.bind(generator, "return");
                        var previousPromise;

                        function enqueue(method, arg) {
                            function callInvokeWithMethodAndArg() {
                                return invoke(method, arg);
                            }

                            return previousPromise =
                                // If enqueue has been called before, then we want to wait until
                                // all previous Promises have been resolved before calling invoke,
                                // so that results are always delivered in the correct order. If
                                // enqueue has not been called before, then it is important to
                                // call invoke immediately, without waiting on a callback to fire,
                                // so that the async generator function has the opportunity to do
                                // any necessary setup in a predictable way. This predictability
                                // is why the Promise constructor synchronously invokes its
                                // executor callback, and why async functions synchronously
                                // execute code before the first await. Since we implement simple
                                // async functions in terms of async generators, it is especially
                                // important to get this right, even though it requires care.
                                previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
                                    // Avoid propagating failures to Promises returned by later
                                    // invocations of the iterator.
                                    callInvokeWithMethodAndArg) : new _promise2.default(function (resolve) {
                                    resolve(callInvokeWithMethodAndArg());
                                });
                        }

                        // Define the unified helper method that is used to implement .next,
                        // .throw, and .return (see defineIteratorMethods).
                        this._invoke = enqueue;
                    }

                    defineIteratorMethods(AsyncIterator.prototype);

                    // Note that simple async functions are implemented on top of
                    // AsyncIterator objects; they just return a Promise for the value of
                    // the final result produced by the iterator.
                    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
                        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

                        return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                            : iter.next().then(function (result) {
                            return result.done ? result.value : iter.next();
                        });
                    };

                    function makeInvokeMethod(innerFn, self, context) {
                        var state = GenStateSuspendedStart;

                        return function invoke(method, arg) {
                            if (state === GenStateExecuting) {
                                throw new Error("Generator is already running");
                            }

                            if (state === GenStateCompleted) {
                                if (method === "throw") {
                                    throw arg;
                                }

                                // Be forgiving, per 25.3.3.3.3 of the spec:
                                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                                return doneResult();
                            }

                            while (true) {
                                var delegate = context.delegate;
                                if (delegate) {
                                    if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
                                        // A return or throw (when the delegate iterator has no throw
                                        // method) always terminates the yield* loop.
                                        context.delegate = null;

                                        // If the delegate iterator has a return method, give it a
                                        // chance to clean up.
                                        var returnMethod = delegate.iterator["return"];
                                        if (returnMethod) {
                                            var record = tryCatch(returnMethod, delegate.iterator, arg);
                                            if (record.type === "throw") {
                                                // If the return method threw an exception, let that
                                                // exception prevail over the original return or throw.
                                                method = "throw";
                                                arg = record.arg;
                                                continue;
                                            }
                                        }

                                        if (method === "return") {
                                            // Continue with the outer return, now that the delegate
                                            // iterator has been terminated.
                                            continue;
                                        }
                                    }

                                    var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

                                    if (record.type === "throw") {
                                        context.delegate = null;

                                        // Like returning generator.throw(uncaught), but without the
                                        // overhead of an extra function call.
                                        method = "throw";
                                        arg = record.arg;
                                        continue;
                                    }

                                    // Delegate generator ran and handled its own exceptions so
                                    // regardless of what the method was, we continue as if it is
                                    // "next" with an undefined arg.
                                    method = "next";
                                    arg = undefined;

                                    var info = record.arg;
                                    if (info.done) {
                                        context[delegate.resultName] = info.value;
                                        context.next = delegate.nextLoc;
                                    } else {
                                        state = GenStateSuspendedYield;
                                        return info;
                                    }

                                    context.delegate = null;
                                }

                                if (method === "next") {
                                    context._sent = arg;

                                    if (state === GenStateSuspendedYield) {
                                        context.sent = arg;
                                    } else {
                                        context.sent = undefined;
                                    }
                                } else if (method === "throw") {
                                    if (state === GenStateSuspendedStart) {
                                        state = GenStateCompleted;
                                        throw arg;
                                    }

                                    if (context.dispatchException(arg)) {
                                        // If the dispatched exception was caught by a catch block,
                                        // then let that catch block handle the exception normally.
                                        method = "next";
                                        arg = undefined;
                                    }
                                } else if (method === "return") {
                                    context.abrupt("return", arg);
                                }

                                state = GenStateExecuting;

                                var record = tryCatch(innerFn, self, context);
                                if (record.type === "normal") {
                                    // If an exception is thrown from innerFn, we leave state ===
                                    // GenStateExecuting and loop back for another invocation.
                                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                                    var info = {
                                        value: record.arg,
                                        done: context.done
                                    };

                                    if (record.arg === ContinueSentinel) {
                                        if (context.delegate && method === "next") {
                                            // Deliberately forget the last sent value so that we don't
                                            // accidentally pass it on to the delegate.
                                            arg = undefined;
                                        }
                                    } else {
                                        return info;
                                    }
                                } else if (record.type === "throw") {
                                    state = GenStateCompleted;
                                    // Dispatch the exception by looping back around to the
                                    // context.dispatchException(arg) call above.
                                    method = "throw";
                                    arg = record.arg;
                                }
                            }
                        };
                    }

                    // Define Generator.prototype.{next,throw,return} in terms of the
                    // unified ._invoke helper method.
                    defineIteratorMethods(Gp);

                    Gp[iteratorSymbol] = function () {
                        return this;
                    };

                    Gp.toString = function () {
                        return "[object Generator]";
                    };

                    function pushTryEntry(locs) {
                        var entry = { tryLoc: locs[0] };

                        if (1 in locs) {
                            entry.catchLoc = locs[1];
                        }

                        if (2 in locs) {
                            entry.finallyLoc = locs[2];
                            entry.afterLoc = locs[3];
                        }

                        this.tryEntries.push(entry);
                    }

                    function resetTryEntry(entry) {
                        var record = entry.completion || {};
                        record.type = "normal";
                        delete record.arg;
                        entry.completion = record;
                    }

                    function Context(tryLocsList) {
                        // The root entry object (effectively a try statement without a catch
                        // or a finally block) gives us a place to store values thrown from
                        // locations where there is no enclosing try statement.
                        this.tryEntries = [{ tryLoc: "root" }];
                        tryLocsList.forEach(pushTryEntry, this);
                        this.reset(true);
                    }

                    runtime.keys = function (object) {
                        var keys = [];
                        for (var key in object) {
                            keys.push(key);
                        }
                        keys.reverse();

                        // Rather than returning an object with a next method, we keep
                        // things simple and return the next function itself.
                        return function next() {
                            while (keys.length) {
                                var key = keys.pop();
                                if (key in object) {
                                    next.value = key;
                                    next.done = false;
                                    return next;
                                }
                            }

                            // To avoid creating an additional object, we just hang the .value
                            // and .done properties off the next function object itself. This
                            // also ensures that the minifier will not anonymize the function.
                            next.done = true;
                            return next;
                        };
                    };

                    function values(iterable) {
                        if (iterable) {
                            var iteratorMethod = iterable[iteratorSymbol];
                            if (iteratorMethod) {
                                return iteratorMethod.call(iterable);
                            }

                            if (typeof iterable.next === "function") {
                                return iterable;
                            }

                            if (!isNaN(iterable.length)) {
                                var i = -1,
                                    next = function next() {
                                        while (++i < iterable.length) {
                                            if (hasOwn.call(iterable, i)) {
                                                next.value = iterable[i];
                                                next.done = false;
                                                return next;
                                            }
                                        }

                                        next.value = undefined;
                                        next.done = true;

                                        return next;
                                    };

                                return next.next = next;
                            }
                        }

                        // Return an iterator with no values.
                        return { next: doneResult };
                    }
                    runtime.values = values;

                    function doneResult() {
                        return { value: undefined, done: true };
                    }

                    Context.prototype = {
                        constructor: Context,

                        reset: function reset(skipTempReset) {
                            this.prev = 0;
                            this.next = 0;
                            this.sent = undefined;
                            this.done = false;
                            this.delegate = null;

                            this.tryEntries.forEach(resetTryEntry);

                            if (!skipTempReset) {
                                for (var name in this) {
                                    // Not sure about the optimal order of these conditions:
                                    if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                        this[name] = undefined;
                                    }
                                }
                            }
                        },

                        stop: function stop() {
                            this.done = true;

                            var rootEntry = this.tryEntries[0];
                            var rootRecord = rootEntry.completion;
                            if (rootRecord.type === "throw") {
                                throw rootRecord.arg;
                            }

                            return this.rval;
                        },

                        dispatchException: function dispatchException(exception) {
                            if (this.done) {
                                throw exception;
                            }

                            var context = this;
                            function handle(loc, caught) {
                                record.type = "throw";
                                record.arg = exception;
                                context.next = loc;
                                return !!caught;
                            }

                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                var record = entry.completion;

                                if (entry.tryLoc === "root") {
                                    // Exception thrown outside of any try block that could handle
                                    // it, so set the completion value of the entire function to
                                    // throw the exception.
                                    return handle("end");
                                }

                                if (entry.tryLoc <= this.prev) {
                                    var hasCatch = hasOwn.call(entry, "catchLoc");
                                    var hasFinally = hasOwn.call(entry, "finallyLoc");

                                    if (hasCatch && hasFinally) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        } else if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }
                                    } else if (hasCatch) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        }
                                    } else if (hasFinally) {
                                        if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }
                                    } else {
                                        throw new Error("try statement without catch or finally");
                                    }
                                }
                            }
                        },

                        abrupt: function abrupt(type, arg) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                                    var finallyEntry = entry;
                                    break;
                                }
                            }

                            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                                // Ignore the finally entry if control is not jumping to a
                                // location outside the try/catch block.
                                finallyEntry = null;
                            }

                            var record = finallyEntry ? finallyEntry.completion : {};
                            record.type = type;
                            record.arg = arg;

                            if (finallyEntry) {
                                this.next = finallyEntry.finallyLoc;
                            } else {
                                this.complete(record);
                            }

                            return ContinueSentinel;
                        },

                        complete: function complete(record, afterLoc) {
                            if (record.type === "throw") {
                                throw record.arg;
                            }

                            if (record.type === "break" || record.type === "continue") {
                                this.next = record.arg;
                            } else if (record.type === "return") {
                                this.rval = record.arg;
                                this.next = "end";
                            } else if (record.type === "normal" && afterLoc) {
                                this.next = afterLoc;
                            }
                        },

                        finish: function finish(finallyLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.finallyLoc === finallyLoc) {
                                    this.complete(entry.completion, entry.afterLoc);
                                    resetTryEntry(entry);
                                    return ContinueSentinel;
                                }
                            }
                        },

                        "catch": function _catch(tryLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc === tryLoc) {
                                    var record = entry.completion;
                                    if (record.type === "throw") {
                                        var thrown = record.arg;
                                        resetTryEntry(entry);
                                    }
                                    return thrown;
                                }
                            }

                            // The context.catch method must only be called with a location
                            // argument that corresponds to a known catch block.
                            throw new Error("illegal catch attempt");
                        },

                        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                            this.delegate = {
                                iterator: values(iterable),
                                resultName: resultName,
                                nextLoc: nextLoc
                            };

                            return ContinueSentinel;
                        }
                    };
                }(
                    // Among the various tricks for obtaining a reference to the global
                    // object, this seems to be the most reliable technique that does not
                    // use indirect eval (which violates Content Security Policy).
                    (typeof global === "undefined" ? "undefined" : (0, _typeof3.default)(global)) === "object" ? global : (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) === "object" ? window : (typeof self === "undefined" ? "undefined" : (0, _typeof3.default)(self)) === "object" ? self : undefined);
                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)(module), __webpack_require__(6)))

            /***/ },
        /* 5 */
        /***/ function(module, exports) {

            module.exports = function(module) {
                if(!module.webpackPolyfill) {
                    module.deprecate = function() {};
                    module.paths = [];
                    // module.parent = undefined by default
                    module.children = [];
                    module.webpackPolyfill = 1;
                }
                return module;
            }


            /***/ },
        /* 6 */
        /***/ function(module, exports) {

            // shim for using process in browser

            var process = module.exports = {};
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = setTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                clearTimeout(timeout);
            }

            process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    setTimeout(drainQueue, 0);
                }
            };

            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = ''; // empty string to avoid regexp issues
            process.versions = {};

            function noop() {}

            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;

            process.binding = function (name) {
                throw new Error('process.binding is not supported');
            };

            process.cwd = function () { return '/' };
            process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function() { return 0; };


            /***/ },
        /* 7 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(8), __esModule: true };

            /***/ },
        /* 8 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(9);
            __webpack_require__(10);
            __webpack_require__(54);
            __webpack_require__(58);
            module.exports = __webpack_require__(18).Promise;

            /***/ },
        /* 9 */
        /***/ function(module, exports) {



            /***/ },
        /* 10 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var $at  = __webpack_require__(11)(true);

            // 21.1.3.27 String.prototype[@@iterator]()
            __webpack_require__(14)(String, 'String', function(iterated){
                this._t = String(iterated); // target
                this._i = 0;                // next index
                // 21.1.5.2.1 %StringIteratorPrototype%.next()
            }, function(){
                var O     = this._t
                    , index = this._i
                    , point;
                if(index >= O.length)return {value: undefined, done: true};
                point = $at(O, index);
                this._i += point.length;
                return {value: point, done: false};
            });

            /***/ },
        /* 11 */
        /***/ function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(12)
                , defined   = __webpack_require__(13);
            // true  -> String#at
            // false -> String#codePointAt
            module.exports = function(TO_STRING){
                return function(that, pos){
                    var s = String(defined(that))
                        , i = toInteger(pos)
                        , l = s.length
                        , a, b;
                    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
                    a = s.charCodeAt(i);
                    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
                        ? TO_STRING ? s.charAt(i) : a
                        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
                };
            };

            /***/ },
        /* 12 */
        /***/ function(module, exports) {

            // 7.1.4 ToInteger
            var ceil  = Math.ceil
                , floor = Math.floor;
            module.exports = function(it){
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
            };

            /***/ },
        /* 13 */
        /***/ function(module, exports) {

            // 7.2.1 RequireObjectCoercible(argument)
            module.exports = function(it){
                if(it == undefined)throw TypeError("Can't call method on  " + it);
                return it;
            };

            /***/ },
        /* 14 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var LIBRARY        = __webpack_require__(15)
                , $export        = __webpack_require__(16)
                , redefine       = __webpack_require__(31)
                , hide           = __webpack_require__(21)
                , has            = __webpack_require__(32)
                , Iterators      = __webpack_require__(33)
                , $iterCreate    = __webpack_require__(34)
                , setToStringTag = __webpack_require__(50)
                , getPrototypeOf = __webpack_require__(52)
                , ITERATOR       = __webpack_require__(51)('iterator')
                , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
                , FF_ITERATOR    = '@@iterator'
                , KEYS           = 'keys'
                , VALUES         = 'values';

            var returnThis = function(){ return this; };

            module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
                $iterCreate(Constructor, NAME, next);
                var getMethod = function(kind){
                    if(!BUGGY && kind in proto)return proto[kind];
                    switch(kind){
                        case KEYS: return function keys(){ return new Constructor(this, kind); };
                        case VALUES: return function values(){ return new Constructor(this, kind); };
                    } return function entries(){ return new Constructor(this, kind); };
                };
                var TAG        = NAME + ' Iterator'
                    , DEF_VALUES = DEFAULT == VALUES
                    , VALUES_BUG = false
                    , proto      = Base.prototype
                    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
                    , $default   = $native || getMethod(DEFAULT)
                    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
                    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
                    , methods, key, IteratorPrototype;
                // Fix native
                if($anyNative){
                    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
                    if(IteratorPrototype !== Object.prototype){
                        // Set @@toStringTag to native iterators
                        setToStringTag(IteratorPrototype, TAG, true);
                        // fix for some old engines
                        if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
                    }
                }
                // fix Array#{values, @@iterator}.name in V8 / FF
                if(DEF_VALUES && $native && $native.name !== VALUES){
                    VALUES_BUG = true;
                    $default = function values(){ return $native.call(this); };
                }
                // Define iterator
                if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
                    hide(proto, ITERATOR, $default);
                }
                // Plug for library
                Iterators[NAME] = $default;
                Iterators[TAG]  = returnThis;
                if(DEFAULT){
                    methods = {
                        values:  DEF_VALUES ? $default : getMethod(VALUES),
                        keys:    IS_SET     ? $default : getMethod(KEYS),
                        entries: $entries
                    };
                    if(FORCED)for(key in methods){
                        if(!(key in proto))redefine(proto, key, methods[key]);
                    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                }
                return methods;
            };

            /***/ },
        /* 15 */
        /***/ function(module, exports) {

            module.exports = true;

            /***/ },
        /* 16 */
        /***/ function(module, exports, __webpack_require__) {

            var global    = __webpack_require__(17)
                , core      = __webpack_require__(18)
                , ctx       = __webpack_require__(19)
                , hide      = __webpack_require__(21)
                , PROTOTYPE = 'prototype';

            var $export = function(type, name, source){
                var IS_FORCED = type & $export.F
                    , IS_GLOBAL = type & $export.G
                    , IS_STATIC = type & $export.S
                    , IS_PROTO  = type & $export.P
                    , IS_BIND   = type & $export.B
                    , IS_WRAP   = type & $export.W
                    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
                    , expProto  = exports[PROTOTYPE]
                    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
                    , key, own, out;
                if(IS_GLOBAL)source = name;
                for(key in source){
                    // contains in native
                    own = !IS_FORCED && target && target[key] !== undefined;
                    if(own && key in exports)continue;
                    // export native or passed
                    out = own ? target[key] : source[key];
                    // prevent global pollution for namespaces
                    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
                        // bind timers to global for call from export context
                        : IS_BIND && own ? ctx(out, global)
                        // wrap global constructors for prevent change them in library
                        : IS_WRAP && target[key] == out ? (function(C){
                        var F = function(a, b, c){
                            if(this instanceof C){
                                switch(arguments.length){
                                    case 0: return new C;
                                    case 1: return new C(a);
                                    case 2: return new C(a, b);
                                } return new C(a, b, c);
                            } return C.apply(this, arguments);
                        };
                        F[PROTOTYPE] = C[PROTOTYPE];
                        return F;
                        // make static versions for prototype methods
                    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
                    if(IS_PROTO){
                        (exports.virtual || (exports.virtual = {}))[key] = out;
                        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
                        if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
                    }
                }
            };
            // type bitmap
            $export.F = 1;   // forced
            $export.G = 2;   // global
            $export.S = 4;   // static
            $export.P = 8;   // proto
            $export.B = 16;  // bind
            $export.W = 32;  // wrap
            $export.U = 64;  // safe
            $export.R = 128; // real proto method for `library`
            module.exports = $export;

            /***/ },
        /* 17 */
        /***/ function(module, exports) {

            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            var global = module.exports = typeof window != 'undefined' && window.Math == Math
                ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
            if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

            /***/ },
        /* 18 */
        /***/ function(module, exports) {

            var core = module.exports = {version: '2.1.1'};
            if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

            /***/ },
        /* 19 */
        /***/ function(module, exports, __webpack_require__) {

            // optional / simple context binding
            var aFunction = __webpack_require__(20);
            module.exports = function(fn, that, length){
                aFunction(fn);
                if(that === undefined)return fn;
                switch(length){
                    case 1: return function(a){
                        return fn.call(that, a);
                    };
                    case 2: return function(a, b){
                        return fn.call(that, a, b);
                    };
                    case 3: return function(a, b, c){
                        return fn.call(that, a, b, c);
                    };
                }
                return function(/* ...args */){
                    return fn.apply(that, arguments);
                };
            };

            /***/ },
        /* 20 */
        /***/ function(module, exports) {

            module.exports = function(it){
                if(typeof it != 'function')throw TypeError(it + ' is not a function!');
                return it;
            };

            /***/ },
        /* 21 */
        /***/ function(module, exports, __webpack_require__) {

            var dP         = __webpack_require__(22)
                , createDesc = __webpack_require__(30);
            module.exports = __webpack_require__(26) ? function(object, key, value){
                return dP.f(object, key, createDesc(1, value));
            } : function(object, key, value){
                object[key] = value;
                return object;
            };

            /***/ },
        /* 22 */
        /***/ function(module, exports, __webpack_require__) {

            var anObject       = __webpack_require__(23)
                , IE8_DOM_DEFINE = __webpack_require__(25)
                , toPrimitive    = __webpack_require__(29)
                , dP             = Object.defineProperty;

            exports.f = __webpack_require__(26) ? Object.defineProperty : function defineProperty(O, P, Attributes){
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if(IE8_DOM_DEFINE)try {
                    return dP(O, P, Attributes);
                } catch(e){ /* empty */ }
                if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
                if('value' in Attributes)O[P] = Attributes.value;
                return O;
            };

            /***/ },
        /* 23 */
        /***/ function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(24);
            module.exports = function(it){
                if(!isObject(it))throw TypeError(it + ' is not an object!');
                return it;
            };

            /***/ },
        /* 24 */
        /***/ function(module, exports) {

            module.exports = function(it){
                return typeof it === 'object' ? it !== null : typeof it === 'function';
            };

            /***/ },
        /* 25 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = !__webpack_require__(26) && !__webpack_require__(27)(function(){
                    return Object.defineProperty(__webpack_require__(28)('div'), 'a', {get: function(){ return 7; }}).a != 7;
                });

            /***/ },
        /* 26 */
        /***/ function(module, exports, __webpack_require__) {

            // Thank's IE8 for his funny defineProperty
            module.exports = !__webpack_require__(27)(function(){
                return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
            });

            /***/ },
        /* 27 */
        /***/ function(module, exports) {

            module.exports = function(exec){
                try {
                    return !!exec();
                } catch(e){
                    return true;
                }
            };

            /***/ },
        /* 28 */
        /***/ function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(24)
                , document = __webpack_require__(17).document
                // in old IE typeof document.createElement is 'object'
                , is = isObject(document) && isObject(document.createElement);
            module.exports = function(it){
                return is ? document.createElement(it) : {};
            };

            /***/ },
        /* 29 */
        /***/ function(module, exports, __webpack_require__) {

            // 7.1.1 ToPrimitive(input [, PreferredType])
            var isObject = __webpack_require__(24);
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string
            module.exports = function(it, S){
                if(!isObject(it))return it;
                var fn, val;
                if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
                if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
                if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
                throw TypeError("Can't convert object to primitive value");
            };

            /***/ },
        /* 30 */
        /***/ function(module, exports) {

            module.exports = function(bitmap, value){
                return {
                    enumerable  : !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable    : !(bitmap & 4),
                    value       : value
                };
            };

            /***/ },
        /* 31 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(21);

            /***/ },
        /* 32 */
        /***/ function(module, exports) {

            var hasOwnProperty = {}.hasOwnProperty;
            module.exports = function(it, key){
                return hasOwnProperty.call(it, key);
            };

            /***/ },
        /* 33 */
        /***/ function(module, exports) {

            module.exports = {};

            /***/ },
        /* 34 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var create         = __webpack_require__(35)
                , descriptor     = __webpack_require__(30)
                , setToStringTag = __webpack_require__(50)
                , IteratorPrototype = {};

            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
            __webpack_require__(21)(IteratorPrototype, __webpack_require__(51)('iterator'), function(){ return this; });

            module.exports = function(Constructor, NAME, next){
                Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
                setToStringTag(Constructor, NAME + ' Iterator');
            };

            /***/ },
        /* 35 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            var anObject    = __webpack_require__(23)
                , dPs         = __webpack_require__(36)
                , enumBugKeys = __webpack_require__(48)
                , IE_PROTO    = __webpack_require__(45)('IE_PROTO')
                , Empty       = function(){ /* empty */ }
                , PROTOTYPE   = 'prototype';

            // Create object with fake `null` prototype: use iframe Object with cleared prototype
            var createDict = function(){
                // Thrash, waste and sodomy: IE GC bug
                var iframe = __webpack_require__(28)('iframe')
                    , i      = enumBugKeys.length
                    , gt     = '>'
                    , iframeDocument;
                iframe.style.display = 'none';
                __webpack_require__(49).appendChild(iframe);
                iframe.src = 'javascript:'; // eslint-disable-line no-script-url
                // createDict = iframe.contentWindow.Object;
                // html.removeChild(iframe);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write('<script>document.F=Object</script' + gt);
                iframeDocument.close();
                createDict = iframeDocument.F;
                while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
                return createDict();
            };

            module.exports = Object.create || function create(O, Properties){
                    var result;
                    if(O !== null){
                        Empty[PROTOTYPE] = anObject(O);
                        result = new Empty;
                        Empty[PROTOTYPE] = null;
                        // add "__proto__" for Object.getPrototypeOf polyfill
                        result[IE_PROTO] = O;
                    } else result = createDict();
                    return Properties === undefined ? result : dPs(result, Properties);
                };

            /***/ },
        /* 36 */
        /***/ function(module, exports, __webpack_require__) {

            var dP       = __webpack_require__(22)
                , anObject = __webpack_require__(23)
                , getKeys  = __webpack_require__(37);

            module.exports = __webpack_require__(26) ? Object.defineProperties : function defineProperties(O, Properties){
                anObject(O);
                var keys   = getKeys(Properties)
                    , length = keys.length
                    , i = 0
                    , P;
                while(length > i)dP.f(O, P = keys[i++], Properties[P]);
                return O;
            };

            /***/ },
        /* 37 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.14 / 15.2.3.14 Object.keys(O)
            var $keys       = __webpack_require__(38)
                , enumBugKeys = __webpack_require__(48);

            module.exports = Object.keys || function keys(O){
                    return $keys(O, enumBugKeys);
                };

            /***/ },
        /* 38 */
        /***/ function(module, exports, __webpack_require__) {

            var has          = __webpack_require__(32)
                , toIObject    = __webpack_require__(39)
                , arrayIndexOf = __webpack_require__(42)(false)
                , IE_PROTO     = __webpack_require__(45)('IE_PROTO');

            module.exports = function(object, names){
                var O      = toIObject(object)
                    , i      = 0
                    , result = []
                    , key;
                for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
                // Don't enum bug & hidden keys
                while(names.length > i)if(has(O, key = names[i++])){
                    ~arrayIndexOf(result, key) || result.push(key);
                }
                return result;
            };

            /***/ },
        /* 39 */
        /***/ function(module, exports, __webpack_require__) {

            // to indexed object, toObject with fallback for non-array-like ES3 strings
            var IObject = __webpack_require__(40)
                , defined = __webpack_require__(13);
            module.exports = function(it){
                return IObject(defined(it));
            };

            /***/ },
        /* 40 */
        /***/ function(module, exports, __webpack_require__) {

            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            var cof = __webpack_require__(41);
            module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
                return cof(it) == 'String' ? it.split('') : Object(it);
            };

            /***/ },
        /* 41 */
        /***/ function(module, exports) {

            var toString = {}.toString;

            module.exports = function(it){
                return toString.call(it).slice(8, -1);
            };

            /***/ },
        /* 42 */
        /***/ function(module, exports, __webpack_require__) {

            // false -> Array#indexOf
            // true  -> Array#includes
            var toIObject = __webpack_require__(39)
                , toLength  = __webpack_require__(43)
                , toIndex   = __webpack_require__(44);
            module.exports = function(IS_INCLUDES){
                return function($this, el, fromIndex){
                    var O      = toIObject($this)
                        , length = toLength(O.length)
                        , index  = toIndex(fromIndex, length)
                        , value;
                    // Array#includes uses SameValueZero equality algorithm
                    if(IS_INCLUDES && el != el)while(length > index){
                        value = O[index++];
                        if(value != value)return true;
                        // Array#toIndex ignores holes, Array#includes - not
                    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
                        if(O[index] === el)return IS_INCLUDES || index;
                    } return !IS_INCLUDES && -1;
                };
            };

            /***/ },
        /* 43 */
        /***/ function(module, exports, __webpack_require__) {

            // 7.1.15 ToLength
            var toInteger = __webpack_require__(12)
                , min       = Math.min;
            module.exports = function(it){
                return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
            };

            /***/ },
        /* 44 */
        /***/ function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(12)
                , max       = Math.max
                , min       = Math.min;
            module.exports = function(index, length){
                index = toInteger(index);
                return index < 0 ? max(index + length, 0) : min(index, length);
            };

            /***/ },
        /* 45 */
        /***/ function(module, exports, __webpack_require__) {

            var shared = __webpack_require__(46)('keys')
                , uid    = __webpack_require__(47);
            module.exports = function(key){
                return shared[key] || (shared[key] = uid(key));
            };

            /***/ },
        /* 46 */
        /***/ function(module, exports, __webpack_require__) {

            var global = __webpack_require__(17)
                , SHARED = '__core-js_shared__'
                , store  = global[SHARED] || (global[SHARED] = {});
            module.exports = function(key){
                return store[key] || (store[key] = {});
            };

            /***/ },
        /* 47 */
        /***/ function(module, exports) {

            var id = 0
                , px = Math.random();
            module.exports = function(key){
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
            };

            /***/ },
        /* 48 */
        /***/ function(module, exports) {

            // IE 8- don't enum bug keys
            module.exports = (
                'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
            ).split(',');

            /***/ },
        /* 49 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(17).document && document.documentElement;

            /***/ },
        /* 50 */
        /***/ function(module, exports, __webpack_require__) {

            var def = __webpack_require__(22).f
                , has = __webpack_require__(32)
                , TAG = __webpack_require__(51)('toStringTag');

            module.exports = function(it, tag, stat){
                if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
            };

            /***/ },
        /* 51 */
        /***/ function(module, exports, __webpack_require__) {

            var store      = __webpack_require__(46)('wks')
                , uid        = __webpack_require__(47)
                , Symbol     = __webpack_require__(17).Symbol
                , USE_SYMBOL = typeof Symbol == 'function';
            module.exports = function(name){
                return store[name] || (store[name] =
                        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
            };

            /***/ },
        /* 52 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
            var has         = __webpack_require__(32)
                , toObject    = __webpack_require__(53)
                , IE_PROTO    = __webpack_require__(45)('IE_PROTO')
                , ObjectProto = Object.prototype;

            module.exports = Object.getPrototypeOf || function(O){
                    O = toObject(O);
                    if(has(O, IE_PROTO))return O[IE_PROTO];
                    if(typeof O.constructor == 'function' && O instanceof O.constructor){
                        return O.constructor.prototype;
                    } return O instanceof Object ? ObjectProto : null;
                };

            /***/ },
        /* 53 */
        /***/ function(module, exports, __webpack_require__) {

            // 7.1.13 ToObject(argument)
            var defined = __webpack_require__(13);
            module.exports = function(it){
                return Object(defined(it));
            };

            /***/ },
        /* 54 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(55);
            var global        = __webpack_require__(17)
                , hide          = __webpack_require__(21)
                , Iterators     = __webpack_require__(33)
                , TO_STRING_TAG = __webpack_require__(51)('toStringTag');

            for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
                var NAME       = collections[i]
                    , Collection = global[NAME]
                    , proto      = Collection && Collection.prototype;
                if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = Iterators.Array;
            }

            /***/ },
        /* 55 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var addToUnscopables = __webpack_require__(56)
                , step             = __webpack_require__(57)
                , Iterators        = __webpack_require__(33)
                , toIObject        = __webpack_require__(39);

            // 22.1.3.4 Array.prototype.entries()
            // 22.1.3.13 Array.prototype.keys()
            // 22.1.3.29 Array.prototype.values()
            // 22.1.3.30 Array.prototype[@@iterator]()
            module.exports = __webpack_require__(14)(Array, 'Array', function(iterated, kind){
                this._t = toIObject(iterated); // target
                this._i = 0;                   // next index
                this._k = kind;                // kind
                // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
            }, function(){
                var O     = this._t
                    , kind  = this._k
                    , index = this._i++;
                if(!O || index >= O.length){
                    this._t = undefined;
                    return step(1);
                }
                if(kind == 'keys'  )return step(0, index);
                if(kind == 'values')return step(0, O[index]);
                return step(0, [index, O[index]]);
            }, 'values');

            // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
            Iterators.Arguments = Iterators.Array;

            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');

            /***/ },
        /* 56 */
        /***/ function(module, exports) {

            module.exports = function(){ /* empty */ };

            /***/ },
        /* 57 */
        /***/ function(module, exports) {

            module.exports = function(done, value){
                return {value: value, done: !!done};
            };

            /***/ },
        /* 58 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var LIBRARY            = __webpack_require__(15)
                , global             = __webpack_require__(17)
                , ctx                = __webpack_require__(19)
                , classof            = __webpack_require__(59)
                , $export            = __webpack_require__(16)
                , isObject           = __webpack_require__(24)
                , anObject           = __webpack_require__(23)
                , aFunction          = __webpack_require__(20)
                , anInstance         = __webpack_require__(60)
                , forOf              = __webpack_require__(61)
                , setProto           = __webpack_require__(65).set
                , speciesConstructor = __webpack_require__(68)
                , task               = __webpack_require__(69).set
                , microtask          = __webpack_require__(71)
                , PROMISE            = 'Promise'
                , TypeError          = global.TypeError
                , process            = global.process
                , $Promise           = global[PROMISE]
                , isNode             = classof(process) == 'process'
                , empty              = function(){ /* empty */ }
                , Internal, GenericPromiseCapability, Wrapper;

            var USE_NATIVE = !!function(){
                try {
                    // correct subclassing with @@species support
                    var promise      = $Promise.resolve(1)
                        , FakePromise1 = promise.constructor = function(exec){ exec(empty, empty); }
                        , FakePromise2 = function(exec){ exec(empty, empty); };
                    __webpack_require__(22)(FakePromise1, __webpack_require__(51)('species'), {value: FakePromise2});
                    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
                    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise2;
                } catch(e){ /* empty */ }
            }();

            // helpers
            var sameConstructor = function(a, b){
                // with library wrapper special case
                return a === b || a === $Promise && b === Wrapper;
            };
            var isThenable = function(it){
                var then;
                return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
            };
            var newPromiseCapability = function(C){
                return sameConstructor($Promise, C)
                    ? new PromiseCapability(C)
                    : new GenericPromiseCapability(C);
            };
            var PromiseCapability = GenericPromiseCapability = function(C){
                var resolve, reject;
                this.promise = new C(function($$resolve, $$reject){
                    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
                    resolve = $$resolve;
                    reject  = $$reject;
                });
                this.resolve = aFunction(resolve);
                this.reject  = aFunction(reject);
            };
            var perform = function(exec){
                try {
                    exec();
                } catch(e){
                    return {error: e};
                }
            };
            var notify = function(promise, isReject){
                if(promise._n)return;
                promise._n = true;
                var chain = promise._c;
                microtask(function(){
                    var value = promise._v
                        , ok    = promise._s == 1
                        , i     = 0;
                    var run = function(reaction){
                        var handler = ok ? reaction.ok : reaction.fail
                            , resolve = reaction.resolve
                            , reject  = reaction.reject
                            , result, then;
                        try {
                            if(handler){
                                if(!ok){
                                    if(promise._h == 2)onHandleUnhandled(promise);
                                    promise._h = 1;
                                }
                                result = handler === true ? value : handler(value);
                                if(result === reaction.promise){
                                    reject(TypeError('Promise-chain cycle'));
                                } else if(then = isThenable(result)){
                                    then.call(result, resolve, reject);
                                } else resolve(result);
                            } else reject(value);
                        } catch(e){
                            reject(e);
                        }
                    };
                    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
                    promise._c = [];
                    promise._n = false;
                    if(isReject && !promise._h)onUnhandled(promise);
                });
            };
            var onUnhandled = function(promise){
                task.call(global, function(){
                    if(isUnhandled(promise)){
                        var value = promise._v
                            , handler, console;
                        if(isNode){
                            process.emit('unhandledRejection', value, promise);
                        } else if(handler = global.onunhandledrejection){
                            handler({promise: promise, reason: value});
                        } else if((console = global.console) && console.error){
                            console.error('Unhandled promise rejection', value);
                        } promise._h = 2;
                    } promise._a = undefined;
                });
            };
            var isUnhandled = function(promise){
                var chain = promise._a || promise._c
                    , i     = 0
                    , reaction;
                if(promise._h == 1)return false;
                while(chain.length > i){
                    reaction = chain[i++];
                    if(reaction.fail || !isUnhandled(reaction.promise))return false;
                } return true;
            };
            var onHandleUnhandled = function(promise){
                task.call(global, function(){
                    var handler;
                    if(isNode){
                        process.emit('rejectionHandled', promise);
                    } else if(handler = global.onrejectionhandled){
                        handler({promise: promise, reason: promise._v});
                    }
                });
            };
            var $reject = function(value){
                var promise = this;
                if(promise._d)return;
                promise._d = true;
                promise = promise._w || promise; // unwrap
                promise._v = value;
                promise._s = 2;
                if(!promise._a)promise._a = promise._c.slice();
                notify(promise, true);
            };
            var $resolve = function(value){
                var promise = this
                    , then;
                if(promise._d)return;
                promise._d = true;
                promise = promise._w || promise; // unwrap
                try {
                    if(promise === value)throw TypeError("Promise can't be resolved itself");
                    if(then = isThenable(value)){
                        microtask(function(){
                            var wrapper = {_w: promise, _d: false}; // wrap
                            try {
                                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                            } catch(e){
                                $reject.call(wrapper, e);
                            }
                        });
                    } else {
                        promise._v = value;
                        promise._s = 1;
                        notify(promise, false);
                    }
                } catch(e){
                    $reject.call({_w: promise, _d: false}, e); // wrap
                }
            };

            // constructor polyfill
            if(!USE_NATIVE){
                // 25.4.3.1 Promise(executor)
                $Promise = function Promise(executor){
                    anInstance(this, $Promise, PROMISE, '_h');
                    aFunction(executor);
                    Internal.call(this);
                    try {
                        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                    } catch(err){
                        $reject.call(this, err);
                    }
                };
                Internal = function Promise(executor){
                    this._c = [];             // <- awaiting reactions
                    this._a = undefined;      // <- checked in isUnhandled reactions
                    this._s = 0;              // <- state
                    this._d = false;          // <- done
                    this._v = undefined;      // <- value
                    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
                    this._n = false;          // <- notify
                };
                Internal.prototype = __webpack_require__(72)($Promise.prototype, {
                    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
                    then: function then(onFulfilled, onRejected){
                        var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                        reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;
                        reaction.fail = typeof onRejected == 'function' && onRejected;
                        this._c.push(reaction);
                        if(this._a)this._a.push(reaction);
                        if(this._s)notify(this, false);
                        return reaction.promise;
                    },
                    // 25.4.5.1 Promise.prototype.catch(onRejected)
                    'catch': function(onRejected){
                        return this.then(undefined, onRejected);
                    }
                });
                PromiseCapability = function(){
                    var promise  = new Internal;
                    this.promise = promise;
                    this.resolve = ctx($resolve, promise, 1);
                    this.reject  = ctx($reject, promise, 1);
                };
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
            __webpack_require__(50)($Promise, PROMISE);
            __webpack_require__(73)(PROMISE);
            Wrapper = __webpack_require__(18)[PROMISE];

            // statics
            $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
                // 25.4.4.5 Promise.reject(r)
                reject: function reject(r){
                    var capability = newPromiseCapability(this)
                        , $$reject   = capability.reject;
                    $$reject(r);
                    return capability.promise;
                }
            });
            $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
                // 25.4.4.6 Promise.resolve(x)
                resolve: function resolve(x){
                    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
                    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
                    var capability = newPromiseCapability(this)
                        , $$resolve  = capability.resolve;
                    $$resolve(x);
                    return capability.promise;
                }
            });
            $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(74)(function(iter){
                    $Promise.all(iter)['catch'](empty);
                })), PROMISE, {
                // 25.4.4.1 Promise.all(iterable)
                all: function all(iterable){
                    var C          = this
                        , capability = newPromiseCapability(C)
                        , resolve    = capability.resolve
                        , reject     = capability.reject;
                    var abrupt = perform(function(){
                        var values    = []
                            , index     = 0
                            , remaining = 1;
                        forOf(iterable, false, function(promise){
                            var $index        = index++
                                , alreadyCalled = false;
                            values.push(undefined);
                            remaining++;
                            C.resolve(promise).then(function(value){
                                if(alreadyCalled)return;
                                alreadyCalled  = true;
                                values[$index] = value;
                                --remaining || resolve(values);
                            }, reject);
                        });
                        --remaining || resolve(values);
                    });
                    if(abrupt)reject(abrupt.error);
                    return capability.promise;
                },
                // 25.4.4.4 Promise.race(iterable)
                race: function race(iterable){
                    var C          = this
                        , capability = newPromiseCapability(C)
                        , reject     = capability.reject;
                    var abrupt = perform(function(){
                        forOf(iterable, false, function(promise){
                            C.resolve(promise).then(capability.resolve, reject);
                        });
                    });
                    if(abrupt)reject(abrupt.error);
                    return capability.promise;
                }
            });

            /***/ },
        /* 59 */
        /***/ function(module, exports, __webpack_require__) {

            // getting tag from 19.1.3.6 Object.prototype.toString()
            var cof = __webpack_require__(41)
                , TAG = __webpack_require__(51)('toStringTag')
                // ES3 wrong here
                , ARG = cof(function(){ return arguments; }()) == 'Arguments';

            module.exports = function(it){
                var O, T, B;
                return it === undefined ? 'Undefined' : it === null ? 'Null'
                    // @@toStringTag case
                    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
                    // builtinTag case
                    : ARG ? cof(O)
                    // ES3 arguments fallback
                    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
            };

            /***/ },
        /* 60 */
        /***/ function(module, exports) {

            module.exports = function(it, Constructor, name, forbiddenField){
                if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
                    throw TypeError(name + ': incorrect invocation!');
                } return it;
            };

            /***/ },
        /* 61 */
        /***/ function(module, exports, __webpack_require__) {

            var ctx         = __webpack_require__(19)
                , call        = __webpack_require__(62)
                , isArrayIter = __webpack_require__(63)
                , anObject    = __webpack_require__(23)
                , toLength    = __webpack_require__(43)
                , getIterFn   = __webpack_require__(64);
            module.exports = function(iterable, entries, fn, that, ITERATOR){
                var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
                    , f      = ctx(fn, that, entries ? 2 : 1)
                    , index  = 0
                    , length, step, iterator;
                if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
                // fast case for arrays with default iterator
                if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
                    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
                    call(iterator, f, step.value, entries);
                }
            };

            /***/ },
        /* 62 */
        /***/ function(module, exports, __webpack_require__) {

            // call something on iterator step with safe closing on error
            var anObject = __webpack_require__(23);
            module.exports = function(iterator, fn, value, entries){
                try {
                    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                    // 7.4.6 IteratorClose(iterator, completion)
                } catch(e){
                    var ret = iterator['return'];
                    if(ret !== undefined)anObject(ret.call(iterator));
                    throw e;
                }
            };

            /***/ },
        /* 63 */
        /***/ function(module, exports, __webpack_require__) {

            // check on default Array iterator
            var Iterators  = __webpack_require__(33)
                , ITERATOR   = __webpack_require__(51)('iterator')
                , ArrayProto = Array.prototype;

            module.exports = function(it){
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
            };

            /***/ },
        /* 64 */
        /***/ function(module, exports, __webpack_require__) {

            var classof   = __webpack_require__(59)
                , ITERATOR  = __webpack_require__(51)('iterator')
                , Iterators = __webpack_require__(33);
            module.exports = __webpack_require__(18).getIteratorMethod = function(it){
                if(it != undefined)return it[ITERATOR]
                    || it['@@iterator']
                    || Iterators[classof(it)];
            };

            /***/ },
        /* 65 */
        /***/ function(module, exports, __webpack_require__) {

            // Works with __proto__ only. Old v8 can't work with null proto objects.
            /* eslint-disable no-proto */
            var isObject = __webpack_require__(24)
                , anObject = __webpack_require__(23);
            var check = function(O, proto){
                anObject(O);
                if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
            };
            module.exports = {
                set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
                    function(test, buggy, set){
                        try {
                            set = __webpack_require__(19)(Function.call, __webpack_require__(66).f(Object.prototype, '__proto__').set, 2);
                            set(test, []);
                            buggy = !(test instanceof Array);
                        } catch(e){ buggy = true; }
                        return function setPrototypeOf(O, proto){
                            check(O, proto);
                            if(buggy)O.__proto__ = proto;
                            else set(O, proto);
                            return O;
                        };
                    }({}, false) : undefined),
                check: check
            };

            /***/ },
        /* 66 */
        /***/ function(module, exports, __webpack_require__) {

            var pIE            = __webpack_require__(67)
                , createDesc     = __webpack_require__(30)
                , toIObject      = __webpack_require__(39)
                , toPrimitive    = __webpack_require__(29)
                , has            = __webpack_require__(32)
                , IE8_DOM_DEFINE = __webpack_require__(25)
                , gOPD           = Object.getOwnPropertyDescriptor;

            exports.f = __webpack_require__(26) ? gOPD : function getOwnPropertyDescriptor(O, P){
                O = toIObject(O);
                P = toPrimitive(P, true);
                if(IE8_DOM_DEFINE)try {
                    return gOPD(O, P);
                } catch(e){ /* empty */ }
                if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
            };

            /***/ },
        /* 67 */
        /***/ function(module, exports) {

            exports.f = {}.propertyIsEnumerable;

            /***/ },
        /* 68 */
        /***/ function(module, exports, __webpack_require__) {

            // 7.3.20 SpeciesConstructor(O, defaultConstructor)
            var anObject  = __webpack_require__(23)
                , aFunction = __webpack_require__(20)
                , SPECIES   = __webpack_require__(51)('species');
            module.exports = function(O, D){
                var C = anObject(O).constructor, S;
                return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
            };

            /***/ },
        /* 69 */
        /***/ function(module, exports, __webpack_require__) {

            var ctx                = __webpack_require__(19)
                , invoke             = __webpack_require__(70)
                , html               = __webpack_require__(49)
                , cel                = __webpack_require__(28)
                , global             = __webpack_require__(17)
                , process            = global.process
                , setTask            = global.setImmediate
                , clearTask          = global.clearImmediate
                , MessageChannel     = global.MessageChannel
                , counter            = 0
                , queue              = {}
                , ONREADYSTATECHANGE = 'onreadystatechange'
                , defer, channel, port;
            var run = function(){
                var id = +this;
                if(queue.hasOwnProperty(id)){
                    var fn = queue[id];
                    delete queue[id];
                    fn();
                }
            };
            var listner = function(event){
                run.call(event.data);
            };
            // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
            if(!setTask || !clearTask){
                setTask = function setImmediate(fn){
                    var args = [], i = 1;
                    while(arguments.length > i)args.push(arguments[i++]);
                    queue[++counter] = function(){
                        invoke(typeof fn == 'function' ? fn : Function(fn), args);
                    };
                    defer(counter);
                    return counter;
                };
                clearTask = function clearImmediate(id){
                    delete queue[id];
                };
                // Node.js 0.8-
                if(__webpack_require__(41)(process) == 'process'){
                    defer = function(id){
                        process.nextTick(ctx(run, id, 1));
                    };
                    // Browsers with MessageChannel, includes WebWorkers
                } else if(MessageChannel){
                    channel = new MessageChannel;
                    port    = channel.port2;
                    channel.port1.onmessage = listner;
                    defer = ctx(port.postMessage, port, 1);
                    // Browsers with postMessage, skip WebWorkers
                    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
                } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
                    defer = function(id){
                        global.postMessage(id + '', '*');
                    };
                    global.addEventListener('message', listner, false);
                    // IE8-
                } else if(ONREADYSTATECHANGE in cel('script')){
                    defer = function(id){
                        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
                            html.removeChild(this);
                            run.call(id);
                        };
                    };
                    // Rest old browsers
                } else {
                    defer = function(id){
                        setTimeout(ctx(run, id, 1), 0);
                    };
                }
            }
            module.exports = {
                set:   setTask,
                clear: clearTask
            };

            /***/ },
        /* 70 */
        /***/ function(module, exports) {

            // fast apply, http://jsperf.lnkit.com/fast-apply/5
            module.exports = function(fn, args, that){
                var un = that === undefined;
                switch(args.length){
                    case 0: return un ? fn()
                        : fn.call(that);
                    case 1: return un ? fn(args[0])
                        : fn.call(that, args[0]);
                    case 2: return un ? fn(args[0], args[1])
                        : fn.call(that, args[0], args[1]);
                    case 3: return un ? fn(args[0], args[1], args[2])
                        : fn.call(that, args[0], args[1], args[2]);
                    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                        : fn.call(that, args[0], args[1], args[2], args[3]);
                } return              fn.apply(that, args);
            };

            /***/ },
        /* 71 */
        /***/ function(module, exports, __webpack_require__) {

            var global    = __webpack_require__(17)
                , macrotask = __webpack_require__(69).set
                , Observer  = global.MutationObserver || global.WebKitMutationObserver
                , process   = global.process
                , Promise   = global.Promise
                , isNode    = __webpack_require__(41)(process) == 'process'
                , head, last, notify;

            var flush = function(){
                var parent, domain, fn;
                if(isNode && (parent = process.domain)){
                    process.domain = null;
                    parent.exit();
                }
                while(head){
                    domain = head.domain;
                    fn     = head.fn;
                    if(domain)domain.enter();
                    fn(); // <- currently we use it only for Promise - try / catch not required
                    if(domain)domain.exit();
                    head = head.next;
                } last = undefined;
                if(parent)parent.enter();
            };

            // Node.js
            if(isNode){
                notify = function(){
                    process.nextTick(flush);
                };
                // browsers with MutationObserver
            } else if(Observer){
                var toggle = 1
                    , node   = document.createTextNode('');
                new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
                notify = function(){
                    node.data = toggle = -toggle;
                };
                // environments with maybe non-completely correct, but existent Promise
            } else if(Promise && Promise.resolve){
                notify = function(){
                    Promise.resolve().then(flush);
                };
                // for other environments - macrotask based on:
                // - setImmediate
                // - MessageChannel
                // - window.postMessag
                // - onreadystatechange
                // - setTimeout
            } else {
                notify = function(){
                    // strange IE + webpack dev server bug - use .call(global)
                    macrotask.call(global, flush);
                };
            }

            module.exports = function(fn){
                var task = {fn: fn, next: undefined, domain: isNode && process.domain};
                if(last)last.next = task;
                if(!head){
                    head = task;
                    notify();
                } last = task;
            };

            /***/ },
        /* 72 */
        /***/ function(module, exports, __webpack_require__) {

            var hide = __webpack_require__(21);
            module.exports = function(target, src, safe){
                for(var key in src){
                    if(safe && target[key])target[key] = src[key];
                    else hide(target, key, src[key]);
                } return target;
            };

            /***/ },
        /* 73 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var global      = __webpack_require__(17)
                , core        = __webpack_require__(18)
                , dP          = __webpack_require__(22)
                , DESCRIPTORS = __webpack_require__(26)
                , SPECIES     = __webpack_require__(51)('species');

            module.exports = function(KEY){
                var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
                if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
                    configurable: true,
                    get: function(){ return this; }
                });
            };

            /***/ },
        /* 74 */
        /***/ function(module, exports, __webpack_require__) {

            var ITERATOR     = __webpack_require__(51)('iterator')
                , SAFE_CLOSING = false;

            try {
                var riter = [7][ITERATOR]();
                riter['return'] = function(){ SAFE_CLOSING = true; };
                Array.from(riter, function(){ throw 2; });
            } catch(e){ /* empty */ }

            module.exports = function(exec, skipClosing){
                if(!skipClosing && !SAFE_CLOSING)return false;
                var safe = false;
                try {
                    var arr  = [7]
                        , iter = arr[ITERATOR]();
                    iter.next = function(){ safe = true; };
                    arr[ITERATOR] = function(){ return iter; };
                    exec(arr);
                } catch(e){ /* empty */ }
                return safe;
            };

            /***/ },
        /* 75 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(76), __esModule: true };

            /***/ },
        /* 76 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(77);
            module.exports = __webpack_require__(18).Object.setPrototypeOf;

            /***/ },
        /* 77 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.3.19 Object.setPrototypeOf(O, proto)
            var $export = __webpack_require__(16);
            $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(65).set});

            /***/ },
        /* 78 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(79), __esModule: true };

            /***/ },
        /* 79 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(80);
            var $Object = __webpack_require__(18).Object;
            module.exports = function create(P, D){
                return $Object.create(P, D);
            };

            /***/ },
        /* 80 */
        /***/ function(module, exports, __webpack_require__) {

            var $export = __webpack_require__(16)
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            $export($export.S, 'Object', {create: __webpack_require__(35)});

            /***/ },
        /* 81 */
        /***/ function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _iterator = __webpack_require__(82);

            var _iterator2 = _interopRequireDefault(_iterator);

            var _symbol = __webpack_require__(84);

            var _symbol2 = _interopRequireDefault(_symbol);

            var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof(obj);
            } : function (obj) {
                return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
            };

            /***/ },
        /* 82 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(83), __esModule: true };

            /***/ },
        /* 83 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(10);
            __webpack_require__(54);
            module.exports = __webpack_require__(51)('iterator');

            /***/ },
        /* 84 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(85), __esModule: true };

            /***/ },
        /* 85 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(86);
            __webpack_require__(9);
            module.exports = __webpack_require__(18).Symbol;

            /***/ },
        /* 86 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            // ECMAScript 6 symbols shim
            var global         = __webpack_require__(17)
                , core           = __webpack_require__(18)
                , has            = __webpack_require__(32)
                , DESCRIPTORS    = __webpack_require__(26)
                , $export        = __webpack_require__(16)
                , redefine       = __webpack_require__(31)
                , META           = __webpack_require__(87).KEY
                , $fails         = __webpack_require__(27)
                , shared         = __webpack_require__(46)
                , setToStringTag = __webpack_require__(50)
                , uid            = __webpack_require__(47)
                , wks            = __webpack_require__(51)
                , keyOf          = __webpack_require__(88)
                , enumKeys       = __webpack_require__(89)
                , isArray        = __webpack_require__(91)
                , anObject       = __webpack_require__(23)
                , toIObject      = __webpack_require__(39)
                , toPrimitive    = __webpack_require__(29)
                , createDesc     = __webpack_require__(30)
                , _create        = __webpack_require__(35)
                , gOPNExt        = __webpack_require__(92)
                , $GOPD          = __webpack_require__(66)
                , $DP            = __webpack_require__(22)
                , gOPD           = $GOPD.f
                , dP             = $DP.f
                , gOPN           = gOPNExt.f
                , $Symbol        = global.Symbol
                , $JSON          = global.JSON
                , _stringify     = $JSON && $JSON.stringify
                , setter         = false
                , HIDDEN         = wks('_hidden')
                , isEnum         = {}.propertyIsEnumerable
                , SymbolRegistry = shared('symbol-registry')
                , AllSymbols     = shared('symbols')
                , ObjectProto    = Object.prototype
                , USE_NATIVE     = typeof $Symbol == 'function';

            // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
            var setSymbolDesc = DESCRIPTORS && $fails(function(){
                return _create(dP({}, 'a', {
                        get: function(){ return dP(this, 'a', {value: 7}).a; }
                    })).a != 7;
            }) ? function(it, key, D){
                var protoDesc = gOPD(ObjectProto, key);
                if(protoDesc)delete ObjectProto[key];
                dP(it, key, D);
                if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
            } : dP;

            var wrap = function(tag){
                var sym = AllSymbols[tag] = _create($Symbol.prototype);
                sym._k = tag;
                DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
                    configurable: true,
                    set: function(value){
                        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
                        setSymbolDesc(this, tag, createDesc(1, value));
                    }
                });
                return sym;
            };

            var isSymbol = function(it){
                return typeof it == 'symbol';
            };

            var $defineProperty = function defineProperty(it, key, D){
                anObject(it);
                key = toPrimitive(key, true);
                anObject(D);
                if(has(AllSymbols, key)){
                    if(!D.enumerable){
                        if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
                        it[HIDDEN][key] = true;
                    } else {
                        if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
                        D = _create(D, {enumerable: createDesc(0, false)});
                    } return setSymbolDesc(it, key, D);
                } return dP(it, key, D);
            };
            var $defineProperties = function defineProperties(it, P){
                anObject(it);
                var keys = enumKeys(P = toIObject(P))
                    , i    = 0
                    , l = keys.length
                    , key;
                while(l > i)$defineProperty(it, key = keys[i++], P[key]);
                return it;
            };
            var $create = function create(it, P){
                return P === undefined ? _create(it) : $defineProperties(_create(it), P);
            };
            var $propertyIsEnumerable = function propertyIsEnumerable(key){
                var E = isEnum.call(this, key = toPrimitive(key, true));
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
            };
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
                var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
                if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
                return D;
            };
            var $getOwnPropertyNames = function getOwnPropertyNames(it){
                var names  = gOPN(toIObject(it))
                    , result = []
                    , i      = 0
                    , key;
                while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
                return result;
            };
            var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
                var names  = gOPN(toIObject(it))
                    , result = []
                    , i      = 0
                    , key;
                while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
                return result;
            };
            var $stringify = function stringify(it){
                if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
                var args = [it]
                    , i    = 1
                    , replacer, $replacer;
                while(arguments.length > i)args.push(arguments[i++]);
                replacer = args[1];
                if(typeof replacer == 'function')$replacer = replacer;
                if($replacer || !isArray(replacer))replacer = function(key, value){
                    if($replacer)value = $replacer.call(this, key, value);
                    if(!isSymbol(value))return value;
                };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
            };
            var BUGGY_JSON = $fails(function(){
                var S = $Symbol();
                // MS Edge converts symbol values to JSON as {}
                // WebKit converts symbol values to JSON as null
                // V8 throws on boxed symbols
                return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
            });

            // 19.4.1.1 Symbol([description])
            if(!USE_NATIVE){
                $Symbol = function Symbol(){
                    if(isSymbol(this))throw TypeError('Symbol is not a constructor');
                    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
                };
                redefine($Symbol.prototype, 'toString', function toString(){
                    return this._k;
                });

                isSymbol = function(it){
                    return it instanceof $Symbol;
                };

                $GOPD.f = $getOwnPropertyDescriptor;
                $DP.f   = $defineProperty;
                __webpack_require__(93).f = gOPNExt.f = $getOwnPropertyNames;
                __webpack_require__(67).f  = $propertyIsEnumerable
                __webpack_require__(90).f = $getOwnPropertySymbols;

                if(DESCRIPTORS && !__webpack_require__(15)){
                    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
                }
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

            // 19.4.2.2 Symbol.hasInstance
            // 19.4.2.3 Symbol.isConcatSpreadable
            // 19.4.2.4 Symbol.iterator
            // 19.4.2.6 Symbol.match
            // 19.4.2.8 Symbol.replace
            // 19.4.2.9 Symbol.search
            // 19.4.2.10 Symbol.species
            // 19.4.2.11 Symbol.split
            // 19.4.2.12 Symbol.toPrimitive
            // 19.4.2.13 Symbol.toStringTag
            // 19.4.2.14 Symbol.unscopables
            for(var symbols = (
                'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
            ).split(','), i = 0; symbols.length > i; ){
                var key     = symbols[i++]
                    , Wrapper = core.Symbol
                    , sym     = wks(key);
                if(!(key in Wrapper))dP(Wrapper, key, {value: USE_NATIVE ? sym : wrap(sym)});
            };

            setter = true;

            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
                // 19.4.2.1 Symbol.for(key)
                'for': function(key){
                    return has(SymbolRegistry, key += '')
                        ? SymbolRegistry[key]
                        : SymbolRegistry[key] = $Symbol(key);
                },
                // 19.4.2.5 Symbol.keyFor(sym)
                keyFor: function keyFor(key){
                    return keyOf(SymbolRegistry, key);
                },
                useSetter: function(){ setter = true; },
                useSimple: function(){ setter = false; }
            });

            $export($export.S + $export.F * !USE_NATIVE, 'Object', {
                // 19.1.2.2 Object.create(O [, Properties])
                create: $create,
                // 19.1.2.4 Object.defineProperty(O, P, Attributes)
                defineProperty: $defineProperty,
                // 19.1.2.3 Object.defineProperties(O, Properties)
                defineProperties: $defineProperties,
                // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
                // 19.1.2.7 Object.getOwnPropertyNames(O)
                getOwnPropertyNames: $getOwnPropertyNames,
                // 19.1.2.8 Object.getOwnPropertySymbols(O)
                getOwnPropertySymbols: $getOwnPropertySymbols
            });

            // 24.3.2 JSON.stringify(value [, replacer [, space]])
            $JSON && $export($export.S + $export.F * (!USE_NATIVE || BUGGY_JSON), 'JSON', {stringify: $stringify});

            // 19.4.3.5 Symbol.prototype[@@toStringTag]
            setToStringTag($Symbol, 'Symbol');
            // 20.2.1.9 Math[@@toStringTag]
            setToStringTag(Math, 'Math', true);
            // 24.3.3 JSON[@@toStringTag]
            setToStringTag(global.JSON, 'JSON', true);

            /***/ },
        /* 87 */
        /***/ function(module, exports, __webpack_require__) {

            var META     = __webpack_require__(47)('meta')
                , isObject = __webpack_require__(24)
                , has      = __webpack_require__(32)
                , setDesc  = __webpack_require__(22).f
                , id       = 0;
            var isExtensible = Object.isExtensible || function(){
                    return true;
                };
            var FREEZE = !__webpack_require__(27)(function(){
                return isExtensible(Object.preventExtensions({}));
            });
            var setMeta = function(it){
                setDesc(it, META, {value: {
                    i: 'O' + ++id, // object ID
                    w: {}          // weak collections IDs
                }});
            };
            var fastKey = function(it, create){
                // return primitive with prefix
                if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
                if(!has(it, META)){
                    // can't set metadata to uncaught frozen object
                    if(!isExtensible(it))return 'F';
                    // not necessary to add metadata
                    if(!create)return 'E';
                    // add missing metadata
                    setMeta(it);
                    // return object ID
                } return it[META].i;
            };
            var getWeak = function(it, create){
                if(!has(it, META)){
                    // can't set metadata to uncaught frozen object
                    if(!isExtensible(it))return true;
                    // not necessary to add metadata
                    if(!create)return false;
                    // add missing metadata
                    setMeta(it);
                    // return hash weak collections IDs
                } return it[META].w;
            };
            // add metadata on freeze-family methods calling
            var onFreeze = function(it){
                if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
                return it;
            };
            var meta = module.exports = {
                KEY:      META,
                NEED:     false,
                fastKey:  fastKey,
                getWeak:  getWeak,
                onFreeze: onFreeze
            };

            /***/ },
        /* 88 */
        /***/ function(module, exports, __webpack_require__) {

            var getKeys   = __webpack_require__(37)
                , toIObject = __webpack_require__(39);
            module.exports = function(object, el){
                var O      = toIObject(object)
                    , keys   = getKeys(O)
                    , length = keys.length
                    , index  = 0
                    , key;
                while(length > index)if(O[key = keys[index++]] === el)return key;
            };

            /***/ },
        /* 89 */
        /***/ function(module, exports, __webpack_require__) {

            // all enumerable object keys, includes symbols
            var getKeys = __webpack_require__(37)
                , gOPS    = __webpack_require__(90)
                , pIE     = __webpack_require__(67);
            module.exports = function(it){
                var result     = getKeys(it)
                    , getSymbols = gOPS.f;
                if(getSymbols){
                    var symbols = getSymbols(it)
                        , isEnum  = pIE.f
                        , i       = 0
                        , key;
                    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
                } return result;
            };

            /***/ },
        /* 90 */
        /***/ function(module, exports) {

            exports.f = Object.getOwnPropertySymbols;

            /***/ },
        /* 91 */
        /***/ function(module, exports, __webpack_require__) {

            // 7.2.2 IsArray(argument)
            var cof = __webpack_require__(41);
            module.exports = Array.isArray || function isArray(arg){
                    return cof(arg) == 'Array';
                };

            /***/ },
        /* 92 */
        /***/ function(module, exports, __webpack_require__) {

            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
            var toIObject = __webpack_require__(39)
                , gOPN      = __webpack_require__(93).f
                , toString  = {}.toString;

            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
                ? Object.getOwnPropertyNames(window) : [];

            var getWindowNames = function(it){
                try {
                    return gOPN.f(it);
                } catch(e){
                    return windowNames.slice();
                }
            };

            module.exports.f = function getOwnPropertyNames(it){
                return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
            };

            /***/ },
        /* 93 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
            var $keys      = __webpack_require__(38)
                , hiddenKeys = __webpack_require__(48).concat('length', 'prototype');

            exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
                    return $keys(O, hiddenKeys);
                };

            /***/ },
        /* 94 */
        /***/ function(module, exports) {

            "use strict";

            exports.__esModule = true;

            exports.default = function (instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            };

            /***/ },
        /* 95 */
        /***/ function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _defineProperty = __webpack_require__(96);

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            /***/ },
        /* 96 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(97), __esModule: true };

            /***/ },
        /* 97 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(98);
            var $Object = __webpack_require__(18).Object;
            module.exports = function defineProperty(it, key, desc){
                return $Object.defineProperty(it, key, desc);
            };

            /***/ },
        /* 98 */
        /***/ function(module, exports, __webpack_require__) {

            var $export = __webpack_require__(16);
            // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
            $export($export.S + $export.F * !__webpack_require__(26), 'Object', {defineProperty: __webpack_require__(22).f});

            /***/ },
        /* 99 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);
            var ClosureValue = __webpack_require__(141);
            var ObjectValue = __webpack_require__(120);
            var FutureValue = __webpack_require__(143);
            var RegExpValue = __webpack_require__(144);
            var PropertyDescriptor = __webpack_require__(127);
            var ErrorValue = __webpack_require__(145);
            var ArrayValue = __webpack_require__(146);
            var EvaluatorInstruction = __webpack_require__(142);

            var Frame = function Frame(type, o) {
                (0, _classCallCheck3.default)(this, Frame);

                this.type = type;
                for (var k in o) {
                    this[k] = o[k];
                }
            };

            var Evaluator = function () {
                function Evaluator(realm, n, s) {
                    (0, _classCallCheck3.default)(this, Evaluator);

                    this.realm = realm;
                    var that = this;
                    this.lastValue = null;
                    this.ast = n;
                    this.defaultYieldPower = 5;
                    this.yieldPower = this.defaultYieldPower;
                    /**
                     * @type {Object[]}
                     * @property {Generator} generator
                     * @property {string} type
                     * @property {ast} ast
                     */
                    this.frames = [];
                    if (n) this.pushAST(n, s);
                }

                (0, _createClass3.default)(Evaluator, [{
                    key: 'pushAST',
                    value: function pushAST(n, s) {
                        var that = this;
                        var gen = n ? this.branch(n, s) : _regenerator2.default.mark(function _callee() {
                            return _regenerator2.default.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            _context.next = 2;
                                            return EvaluatorInstruction.stepMinor;

                                        case 2:
                                            return _context.abrupt('return', _context.sent);

                                        case 3:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        })();
                        this.pushFrame({ generator: gen, type: 'program', scope: s, ast: n });
                    }
                }, {
                    key: 'unwindStack',
                    value: function unwindStack(target, canCrossFxBounds, label) {
                        var finallyFrames = [];
                        for (var i = 0; i < this.frames.length; ++i) {
                            var t = this.frames[i].type;
                            var match = t == target || target == 'return' && t == 'function';
                            if (match && label) {
                                match = label == this.frames[i].label;
                            }

                            if (match) {
                                var j = i + 1;
                                for (; j < this.frames.length; ++j) {
                                    if (this.frames[j].type != 'finally') break;
                                }var fr = this.frames[j];
                                this.frames.splice(0, i + 1);
                                this.saveFrameShortcuts();
                                Array.prototype.unshift.apply(this.frames, finallyFrames);
                                return fr;
                            } else if (target == 'return' && this.frames[i].retValue) {
                                var fr = this.frames[i];
                                this.frames.splice(0, i);
                                this.saveFrameShortcuts();
                                Array.prototype.unshift.apply(this.frames, finallyFrames);
                                return fr;
                            } else if (!canCrossFxBounds && this.frames[i].type == 'function') {
                                break;
                            } else if (t == 'finally') {
                                finallyFrames.push(this.frames[i]);
                            }
                        }
                        return false;
                    }
                }, {
                    key: 'next',
                    value: function next(lastValueOveride) {
                        var frames = this.frames;

                        //Implement proper tailcalls by hand.
                        do {
                            var top = frames[0];
                            var result = undefined;
                            //console.log(top.type, top.ast && top.ast.type);

                            if (top.exception) {
                                this.lastValue = top.exception;
                                delete top.exception;
                            } else if (top.retValue) {
                                this.lastValue = top.retValue;
                                delete top.retValue;
                            }

                            result = top.generator.next(lastValueOveride || this.lastValue);
                            lastValueOveride = undefined;
                            var val = result.value;

                            if (val instanceof EvaluatorInstruction) {
                                switch (val.type) {
                                    case 'branch':
                                        this.branchFrame(val.kind, val.ast, val.scope, val.extra);
                                        continue;
                                    case 'getEvaluator':
                                        //lastValueOveride = this;
                                        //continue;
                                        return this.next(this);
                                    case 'waitForFramePop':
                                        continue;
                                    case 'framePushed':
                                        continue;
                                    case 'event':
                                    case 'step':
                                        if (this.instrument) this.instrument(this, val);
                                        return { done: false, value: val };
                                }
                            }

                            if (val instanceof CompletionRecord) {
                                this.processCompletionValueMeaning(val);
                                this.lastValue = val.value;
                                continue;
                            }
                            //if ( !val ) console.log("Bad val somewhere around", this.topFrame.type);
                            if (this.instrument) this.instrument(this, val);

                            if (val && val.then) {
                                if (top && top.type !== 'await') {
                                    this.pushFrame({ generator: _regenerator2.default.mark(function _callee2(f) {
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        if (f.resolved) {
                                                            _context2.next = 5;
                                                            break;
                                                        }

                                                        _context2.next = 3;
                                                        return f;

                                                    case 3:
                                                        _context2.next = 0;
                                                        break;

                                                    case 5:
                                                        if (!f.successful) {
                                                            _context2.next = 9;
                                                            break;
                                                        }

                                                        return _context2.abrupt('return', f.value);

                                                    case 9:
                                                        return _context2.abrupt('return', new CompletionRecord(CompletionRecord.THROW, f.value));

                                                    case 10:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, this);
                                    })(val), type: 'await' });
                                }
                                return { done: false, value: val };
                            }

                            this.lastValue = val;
                            if (result.done) {
                                var lastFrame = this.popFrame();

                                // Latient values can't cross function calls.
                                // Dont do this, and you get coffeescript mode.
                                if (lastFrame.type === 'function' && !lastFrame.returnLastValue) {
                                    this.lastValue = Value.undef;
                                }

                                if (frames.length === 0) return { done: true, value: result.value };else continue;
                            }
                        } while (false);
                        return { done: false, value: this.lastValue };
                    }
                }, {
                    key: 'processCompletionValueMeaning',
                    value: function processCompletionValueMeaning(val) {
                        if (!(val.value instanceof Value)) {
                            if (val.value instanceof Error) {
                                throw new Error('Value was an error: ' + val.value.stack);
                            }
                            throw new Error('Value isnt of type Value, its' + val.value.toString());
                        }

                        switch (val.type) {
                            case CompletionRecord.CONTINUE:
                                if (this.unwindStack('continue', false, val.target)) return true;
                                throw new Error('Cant find matching loop frame for continue');
                            case CompletionRecord.BREAK:
                                if (this.unwindStack('loop', false, val.target)) return true;
                                throw new Error('Cant find matching loop frame for break');
                            case CompletionRecord.RETURN:
                                var rfr = this.unwindStack('return', false);
                                if (!rfr) throw new Error('Cant find function bounds.');
                                rfr.retValue = val.value;
                                return true;
                            case CompletionRecord.THROW:
                                //TODO: Fix this nonsense:
                                var e = val.value.toNative();
                                //val.value.native = e;

                                var smallStack = undefined;
                                if (e && e.stack) smallStack = e.stack.split(/\n/).slice(0, 4).join('\n');
                                var stk = this.buildStacktrace(e).join('\n    ');
                                var bestFrame = undefined;
                                for (var i = 0; i < this.frames.length; ++i) {
                                    if (this.frames[i].ast) {
                                        bestFrame = this.frames[i];
                                        break;
                                    }
                                }

                                if (val.value instanceof ErrorValue) {
                                    if (this.realm.options.addExtraErrorInfoToStacks && val.value.extra) {
                                        stk += '\n-------------';
                                        for (var key in val.value.extra) {
                                            var vv = val.value.extra[key];
                                            if (vv instanceof Value) stk += '\n' + key + ' => ' + vv.debugString;else stk += '\n' + key + ' => ' + vv;
                                        }
                                    }
                                }

                                if (e instanceof Error) {
                                    e.stack = stk;
                                    if (smallStack && this.realm.options.addInternalStack) e.stack += '\n-------------\n' + smallStack;
                                    if (bestFrame) {
                                        e.range = bestFrame.ast.range;
                                        e.loc = bestFrame.ast.loc;
                                    }
                                }

                                if (val.value instanceof ErrorValue) {
                                    if (!val.value.has('stack')) {
                                        val.value.setImmediate('stack', Value.fromNative(stk));
                                        val.value.properties['stack'].enumerable = false;
                                    }
                                }

                                var tfr = this.unwindStack('catch', true);
                                if (tfr) {
                                    tfr.exception = val;
                                    this.lastValue = val;
                                    return true;
                                }
                                var line = -1;
                                if (this.topFrame.ast && this.topFrame.ast.attr) {
                                    line = this.topFrame.ast.attr.pos.start_line;
                                }
                                //console.log(this.buildStacktrace(val.value.toNative()));
                                throw val.value.toNative();
                            case CompletionRecord.NORMAL:
                                return false;
                        }
                    }
                }, {
                    key: 'buildStacktrace',
                    value: function buildStacktrace(e) {
                        var lines = e ? [e.toString()] : [];
                        for (var _iterator = this.frames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var f = _ref;

                            //if ( f.type !== 'function' ) continue;
                            if (f.ast) {
                                var line = 'at ' + (f.ast.srcName || f.ast.type) + ' ';
                                if (f.ast.loc) line += '(<src>:' + f.ast.loc.start.line + ':' + f.ast.loc.start.column + ')';
                                lines.push(line);
                            }
                        }
                        return lines;
                    }
                }, {
                    key: 'pushFrame',
                    value: function pushFrame(frame) {
                        frame.srcAst = frame.ast;
                        if (frame.yieldPower === undefined) frame.yieldPower = this.defaultYieldPower;
                        this.frames.unshift(new Frame(frame.type, frame));
                        this.saveFrameShortcuts();
                    }
                }, {
                    key: 'popFrame',
                    value: function popFrame() {
                        var frame = this.frames.shift();
                        this.saveFrameShortcuts();
                        return frame;
                    }
                }, {
                    key: 'saveFrameShortcuts',
                    value: function saveFrameShortcuts() {
                        var prev = this.yieldPower;
                        if (this.frames.length == 0) {
                            this.topFrame = undefined;
                            this.yieldPower = this.defaultYieldPower;
                        } else {
                            this.topFrame = this.frames[0];
                            this.yieldPower = this.topFrame.yieldPower;
                        }
                    }
                }, {
                    key: 'fromNative',
                    value: function fromNative(native) {
                        return this.realm.valueFromNative(native);
                    }
                }, {
                    key: 'generator',
                    value: function generator() {
                        return { next: this.next.bind(this), throw: function _throw(e) {
                            throw e;
                        } };
                    }
                }, {
                    key: 'breakFrames',
                    value: function breakFrames() {}
                }, {
                    key: 'resolveRef',
                    value: _regenerator2.default.mark(function resolveRef(n, s, create) {
                        var oldAST, iref, idx, ref;
                        return _regenerator2.default.wrap(function resolveRef$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        oldAST = this.topFrame.ast;

                                        this.topFrame.ast = n;
                                        _context6.t0 = n.type;
                                        _context6.next = _context6.t0 === 'Identifier' ? 5 : _context6.t0 === 'MemberExpression' ? 9 : 28;
                                        break;

                                    case 5:
                                        iref = s.ref(n.name, s.realm);

                                        if (!iref) {
                                            iref = {
                                                getValue: _regenerator2.default.mark(function getValue() {
                                                    var err;
                                                    return _regenerator2.default.wrap(function getValue$(_context3) {
                                                        while (1) {
                                                            switch (_context3.prev = _context3.next) {
                                                                case 0:
                                                                    err = CompletionRecord.makeReferenceError(s.realm, n.name + ' is not defined');
                                                                    return _context3.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'read', ident: n.name, strict: s.strict }), 't0', 2);

                                                                case 2:
                                                                    _context3.next = 4;
                                                                    return err;

                                                                case 4:
                                                                    return _context3.abrupt('return', _context3.sent);

                                                                case 5:
                                                                case 'end':
                                                                    return _context3.stop();
                                                            }
                                                        }
                                                    }, getValue, this);
                                                }),
                                                del: function del() {
                                                    return true;
                                                }
                                            };
                                            if (!create || s.strict) {
                                                iref.setValue = _regenerator2.default.mark(function _callee3() {
                                                    var err;
                                                    return _regenerator2.default.wrap(function _callee3$(_context4) {
                                                        while (1) {
                                                            switch (_context4.prev = _context4.next) {
                                                                case 0:
                                                                    err = CompletionRecord.makeReferenceError(s.realm, n.name + ' is not defined');
                                                                    return _context4.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'write', ident: n.name, strict: s.strict }), 't0', 2);

                                                                case 2:
                                                                    _context4.next = 4;
                                                                    return err;

                                                                case 4:
                                                                    return _context4.abrupt('return', _context4.sent);

                                                                case 5:
                                                                case 'end':
                                                                    return _context4.stop();
                                                            }
                                                        }
                                                    }, _callee3, this);
                                                });
                                            } else {
                                                iref.setValue = _regenerator2.default.mark(function _callee4(value) {
                                                    var aref;
                                                    return _regenerator2.default.wrap(function _callee4$(_context5) {
                                                        while (1) {
                                                            switch (_context5.prev = _context5.next) {
                                                                case 0:
                                                                    s.global.set(n.name, value, s);
                                                                    aref = s.global.ref(n.name, s.realm);

                                                                    this.setValue = aref.setValue;
                                                                    this.getValue = aref.getValue;
                                                                    this.del = aref.delete;

                                                                case 5:
                                                                case 'end':
                                                                    return _context5.stop();
                                                            }
                                                        }
                                                    }, _callee4, this);
                                                });
                                            }
                                        }
                                        this.topFrame.ast = oldAST;
                                        return _context6.abrupt('return', iref);

                                    case 9:
                                        idx = undefined;
                                        return _context6.delegateYield(this.branch(n.object, s), 't1', 11);

                                    case 11:
                                        ref = _context6.t1;

                                        if (!n.computed) {
                                            _context6.next = 17;
                                            break;
                                        }

                                        return _context6.delegateYield(this.branch(n.property, s), 't2', 14);

                                    case 14:
                                        idx = _context6.t2.toNative();
                                        _context6.next = 18;
                                        break;

                                    case 17:
                                        idx = n.property.name;

                                    case 18:
                                        if (ref) {
                                            _context6.next = 22;
                                            break;
                                        }

                                        _context6.next = 21;
                                        return CompletionRecord.makeTypeError(s.realm, 'Can\'t write property of undefined: ' + idx);

                                    case 21:
                                        return _context6.abrupt('return', _context6.sent);

                                    case 22:
                                        if (ref.ref) {
                                            _context6.next = 26;
                                            break;
                                        }

                                        _context6.next = 25;
                                        return CompletionRecord.makeTypeError(s.realm, 'Can\'t write property of non-object type: ' + idx);

                                    case 25:
                                        return _context6.abrupt('return', _context6.sent);

                                    case 26:

                                        this.topFrame.ast = oldAST;
                                        return _context6.abrupt('return', ref.ref(idx, s.realm));

                                    case 28:
                                        _context6.next = 30;
                                        return CompletionRecord.makeTypeError(s.realm, 'Couldnt resolve ref component: ' + n.type);

                                    case 30:
                                        return _context6.abrupt('return', _context6.sent);

                                    case 31:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, resolveRef, this);
                    })
                }, {
                    key: 'partialMemberExpression',
                    value: _regenerator2.default.mark(function partialMemberExpression(left, n, s) {
                        var right;
                        return _regenerator2.default.wrap(function partialMemberExpression$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        if (!n.computed) {
                                            _context7.next = 7;
                                            break;
                                        }

                                        return _context7.delegateYield(this.branch(n.property, s), 't0', 2);

                                    case 2:
                                        right = _context7.t0;
                                        return _context7.delegateYield(left.get(right.toNative(), s.realm), 't1', 4);

                                    case 4:
                                        return _context7.abrupt('return', _context7.t1);

                                    case 7:
                                        if (!(n.property.type == 'Identifier')) {
                                            _context7.next = 14;
                                            break;
                                        }

                                        if (left) {
                                            _context7.next = 10;
                                            break;
                                        }

                                        throw 'Cant index ' + n.property.name + ' of undefined';

                                    case 10:
                                        return _context7.delegateYield(left.get(n.property.name, s.realm), 't2', 11);

                                    case 11:
                                        return _context7.abrupt('return', _context7.t2);

                                    case 14:
                                        if (left) {
                                            _context7.next = 16;
                                            break;
                                        }

                                        throw 'Cant index ' + n.property.value.toString() + ' of undefined';

                                    case 16:
                                        return _context7.delegateYield(left.get(n.property.value.toString(), s.realm), 't3', 17);

                                    case 17:
                                        return _context7.abrupt('return', _context7.t3);

                                    case 18:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, partialMemberExpression, this);
                    })

                    //NOTE: Returns generator, fast return yield *;

                }, {
                    key: 'doBinaryEvaluation',
                    value: function doBinaryEvaluation(operator, left, right, realm) {
                        switch (operator) {
                            case '==':
                                return left.doubleEquals(right, realm);
                            case '!=':
                                return left.notEquals(right, realm);
                            case '===':
                                return left.tripleEquals(right, realm);
                            case '!==':
                                return left.doubleNotEquals(right, realm);
                            case '+':
                                return left.add(right, realm);
                            case '-':
                                return left.subtract(right, realm);
                            case '*':
                                return left.multiply(right, realm);
                            case '/':
                                return left.divide(right, realm);
                            case '%':
                                return left.mod(right, realm);
                            case '|':
                                return left.bitOr(right, realm);
                            case '^':
                                return left.bitXor(right, realm);
                            case '&':
                                return left.bitAnd(right, realm);
                            case 'in':
                                return right.inOperator(left, realm);
                            case 'instanceof':
                                return left.instanceOf(right, realm);
                            case '>':
                                return left.gt(right, realm);
                            case '<':
                                return left.lt(right, realm);
                            case '>=':
                                return left.gte(right, realm);
                            case '<=':
                                return left.lte(right, realm);
                            case '<<':
                                return left.shiftLeft(right, realm);
                            case '>>':
                                return left.shiftRight(right, realm);
                            case '>>>':
                                return left.shiftRightZF(right, realm);
                            default:
                                throw new Error('Unknown binary operator: ' + operator);
                        }
                    }
                }, {
                    key: 'branchFrame',
                    value: function branchFrame(type, n, s, extra) {
                        var frame = { generator: this.branch(n, s), type: type, scope: s, ast: n };

                        if (extra) {
                            for (var k in extra) {
                                frame[k] = extra[k];
                            }
                        }
                        this.pushFrame(frame);
                        return EvaluatorInstruction.framePushed;
                    }
                }, {
                    key: 'beforeNode',
                    value: function beforeNode(n) {
                        var tf = this.topFrame;
                        var state = { top: tf, ast: tf.ast, node: n };
                        tf.ast = n;
                        return state;
                    }
                }, {
                    key: 'afterNode',
                    value: function afterNode(state, r) {
                        var tf = this.topFrame;
                        tf.value = r;
                        tf.ast = state.ast;
                    }

                    /**
                     * @private
                     * @param {object} n - AST Node to dispatch
                     * @param {Scope} s - Current evaluation scope
                     */

                }, {
                    key: 'branch',
                    value: function branch(n, s) {
                        var _this = this;

                        if (!n.dispatch) {
                            (function () {
                                var nextStep = _this.findNextStep(n.type);

                                n.dispatch = _regenerator2.default.mark(function _callee5(that, n, s) {
                                    var state, result;
                                    return _regenerator2.default.wrap(function _callee5$(_context8) {
                                        while (1) {
                                            switch (_context8.prev = _context8.next) {
                                                case 0:
                                                    state = that.beforeNode(n);
                                                    return _context8.delegateYield(nextStep(that, n, s), 't0', 2);

                                                case 2:
                                                    result = _context8.t0;

                                                    if (!(result instanceof CompletionRecord)) {
                                                        _context8.next = 7;
                                                        break;
                                                    }

                                                    _context8.next = 6;
                                                    return result;

                                                case 6:
                                                    result = _context8.sent;

                                                case 7:
                                                    if (!(result && result.then)) {
                                                        _context8.next = 11;
                                                        break;
                                                    }

                                                    _context8.next = 10;
                                                    return result;

                                                case 10:
                                                    result = _context8.sent;

                                                case 11:

                                                    that.afterNode(state, result);

                                                    return _context8.abrupt('return', result);

                                                case 13:
                                                case 'end':
                                                    return _context8.stop();
                                            }
                                        }
                                    }, _callee5, this);
                                });
                            })();
                        }
                        return n.dispatch(this, n, s);
                    }
                }, {
                    key: 'insterment',
                    get: function get() {
                        return this.instrument;
                    },
                    set: function set(v) {
                        this.instrument = v;
                    }
                }]);
                return Evaluator;
            }();

            Evaluator.prototype.findNextStep = __webpack_require__(150);

            module.exports = Evaluator;

            /***/ },
        /* 100 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(101), __esModule: true };

            /***/ },
        /* 101 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(54);
            __webpack_require__(10);
            module.exports = __webpack_require__(102);

            /***/ },
        /* 102 */
        /***/ function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(23)
                , get      = __webpack_require__(64);
            module.exports = __webpack_require__(18).getIterator = function(it){
                var iterFn = get(it);
                if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
                return anObject(iterFn.call(it));
            };

            /***/ },
        /* 103 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _defineProperties = __webpack_require__(104);

            var _defineProperties2 = _interopRequireDefault(_defineProperties);

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _weakMap = __webpack_require__(107);

            var _weakMap2 = _interopRequireDefault(_weakMap);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var CompletionRecord = __webpack_require__(115);
            var GenDash = __webpack_require__(116);

            var undef = undefined,
                nil = undefined,
                tru = undefined,
                fals = undefined,
                nan = undefined,
                emptyString = undefined,
                zero = undefined,
                one = undefined,
                negone = undefined,
                negzero = undefined,
                smallIntValues = undefined;
            var cache = new _weakMap2.default();
            var bookmarks = new _weakMap2.default();
            var ObjectValue = undefined,
                PrimitiveValue = undefined,
                StringValue = undefined,
                NumberValue = undefined,
                BridgeValue = undefined,
                Evaluator = undefined;

            var serial = 0;
            /**
             * Represents a value a variable could take.
             */

            var Value = function () {
                (0, _createClass3.default)(Value, null, [{
                    key: 'fromPrimativeNative',

                    /**
                     * Convert a native javascript primative value to a Value
                     * @param {any} value - The value to convert
                     */
                    value: function fromPrimativeNative(value) {
                        if (!value) {
                            if (value === undefined) return undef;
                            if (value === null) return nil;
                            if (value === false) return fals;
                            if (value === '') return emptyString;
                        }

                        if (value === true) return tru;

                        if (typeof value === 'number') {
                            if (value === 0) {
                                return 1 / value > 0 ? zero : negzero;
                            }
                            if (value | 0 === value) {
                                var snv = smallIntValues[value + 1];
                                if (snv) return snv;
                            }
                            return new NumberValue(value);
                        }
                        if (typeof value === 'string') return new StringValue(value);
                        if (typeof value === 'boolean') return new PrimitiveValue(value);
                    }
                }, {
                    key: 'hasBookmark',
                    value: function hasBookmark(native) {
                        return bookmarks.has(native);
                    }
                }, {
                    key: 'getBookmark',
                    value: function getBookmark(native) {
                        return bookmarks.get(native);
                    }

                    /**
                     * Convert a native javascript value to a Value
                     *
                     * @param {any} value - The value to convert
                     * @param {Realm} realm - The realm of the new value.
                     */

                }, {
                    key: 'fromNative',
                    value: function fromNative(value, realm) {
                        if (value instanceof Value) return value;
                        var prim = Value.fromPrimativeNative(value);
                        if (prim) return prim;

                        if (value instanceof Error) {
                            if (!realm) throw new Error('We needed a realm, but we didnt have one.  We were sad :(');
                            if (value instanceof TypeError) return realm.TypeError.makeFrom(value);
                            if (value instanceof ReferenceError) return realm.ReferenceError.makeFrom(value);
                            if (value instanceof SyntaxError) return realm.SyntaxError.makeFrom(value);else return realm.Error.makeFrom(value);
                        }

                        if (Value.hasBookmark(value)) {
                            return Value.getBookmark(value);
                        }

                        throw new TypeError('Tried to load an unsafe native value into the interperter:' + (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) + ' / ' + value);
                        //TODO: Is this cache dangerous?
                        if (!cache.has(value)) {
                            var nue = new BridgeValue(realm, value);
                            cache.set(value, nue);
                            return nue;
                        }
                        return cache.get(value);
                    }

                    /**
                     * Holds a value representing `undefined`
                     *
                     * @returns {UndefinedValue}
                     */

                }, {
                    key: 'createNativeBookmark',
                    value: function createNativeBookmark(v, realm) {
                        var out;
                        var thiz = this;
                        if (typeof v.call === 'function') {
                            switch (realm.options.bookmarkInvocationMode) {
                                case 'loop':

                                    out = function Bookmark() {
                                        var Evaluator = __webpack_require__(99);
                                        var cthis = realm.makeForForeignObject(this);
                                        var c = v.call(cthis, [], realm.globalScope);
                                        var evalu = new Evaluator(realm, null, realm.globalScope);
                                        evalu.pushFrame({ type: 'program', generator: c, scope: realm.globalScope });
                                        var gen = evalu.generator();
                                        var result = undefined;
                                        do {
                                            result = gen.next();
                                        } while (!result.done);
                                        return result.value.toNative();
                                    };
                                    break;
                                default:
                                    out = function Bookmark() {
                                        throw new Error('Atempted to invoke bookmark for ' + v.debugString);
                                    };
                            }
                        } else {
                            out = {};
                        }
                        (0, _defineProperties2.default)(out, {
                            toString: { value: function value() {
                                return v.debugString;
                            }, writable: true },
                            inspect: { value: function value() {
                                return v.debugString;
                            }, writable: true }
                        });
                        bookmarks.set(out, v);
                        return out;
                    }
                }, {
                    key: 'undef',
                    get: function get() {
                        return undef;
                    }

                    /**
                     * Holds a value representing `null`
                     *
                     * @returns {NullValue}
                     */

                }, {
                    key: 'null',
                    get: function get() {
                        return nil;
                    }

                    /**
                     * Holds a value representing `true`
                     *
                     * @returns {BooleanValue} true
                     */

                }, {
                    key: 'true',
                    get: function get() {
                        return tru;
                    }

                    /**
                     * Holds a value representing `fasle`
                     *
                     * @returns {BooleanValue} false
                     */

                }, {
                    key: 'false',
                    get: function get() {
                        return fals;
                    }

                    /**
                     * Holds a value representing `NaN`
                     *
                     * @returns {NumberValue} NaN
                     */

                }, {
                    key: 'nan',
                    get: function get() {
                        return nan;
                    }

                    /**
                     * Holds a value representing `''`
                     *
                     * @returns {StringValue} ''
                     */

                }, {
                    key: 'emptyString',
                    get: function get() {
                        return emptyString;
                    }

                    /**
                     * Holds a value representing `0`
                     *
                     * @returns {NumberValue} 0
                     */

                }, {
                    key: 'zero',
                    get: function get() {
                        return zero;
                    }
                }]);

                function Value() {
                    (0, _classCallCheck3.default)(this, Value);

                    this.serial = serial++;
                }

                /**
                 * Converts this value to a native javascript value.
                 *
                 * @abstract
                 * @returns {*}
                 */

                (0, _createClass3.default)(Value, [{
                    key: 'toNative',
                    value: function toNative() {
                        throw new Error('Unimplemented: Value#toNative');
                    }

                    /**
                     * A string representation of this Value suitable for display when
                     * debugging.
                     * @abstract
                     * @returns {string}
                     */

                }, {
                    key: 'inspect',
                    value: function inspect() {
                        return this.debugString;
                    }

                    //TODO: Kill this

                }, {
                    key: 'fromNative',
                    value: function fromNative(other, realm) {
                        return Value.fromNative(other, realm);
                    }

                    /**
                     * Indexes the value to get the value of a property.
                     * i.e. `value[name]`
                     * @param {String} name
                     * @param {Realm} realm
                     * @abstract
                     * @returns {Value}
                     */

                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        var err;
                        return _regenerator2.default.wrap(function get$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        err = "Can't access get " + name + ' of that type: ' + __webpack_require__(117).inspect(this);
                                        return _context.abrupt('return', CompletionRecord.makeTypeError(realm, err));

                                    case 2:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'getImmediate',
                    value: function getImmediate(name) {
                        return GenDash.syncGenHelper(this.get(name));
                    }

                    /**
                     * Computes the javascript expression `!value`
                     * @returns {Value}
                     */

                }, {
                    key: 'not',
                    value: _regenerator2.default.mark(function not() {
                        return _regenerator2.default.wrap(function not$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.abrupt('return', !this.truthy ? Value.true : Value.false);

                                    case 1:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, not, this);
                    })

                    /**
                     * Computes the javascript expression `+value`
                     * @returns {Value}
                     */

                }, {
                    key: 'unaryPlus',
                    value: _regenerator2.default.mark(function unaryPlus() {
                        return _regenerator2.default.wrap(function unaryPlus$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        _context3.t0 = Value;
                                        return _context3.delegateYield(this.toNumberValue(), 't1', 2);

                                    case 2:
                                        _context3.t2 = +_context3.t1;
                                        return _context3.abrupt('return', _context3.t0.fromNative.call(_context3.t0, _context3.t2));

                                    case 4:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, unaryPlus, this);
                    })

                    /**
                     * Computes the javascript expression `-value`
                     * @returns {Value}
                     */

                }, {
                    key: 'unaryMinus',
                    value: _regenerator2.default.mark(function unaryMinus() {
                        return _regenerator2.default.wrap(function unaryMinus$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        _context4.t0 = Value;
                                        return _context4.delegateYield(this.toNumberValue(), 't1', 2);

                                    case 2:
                                        _context4.t2 = -_context4.t1;
                                        return _context4.abrupt('return', _context4.t0.fromNative.call(_context4.t0, _context4.t2));

                                    case 4:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, unaryMinus, this);
                    })

                    /**
                     * Computes the javascript expression `typeof value`
                     * @returns {Value}
                     */

                }, {
                    key: 'typeOf',
                    value: _regenerator2.default.mark(function typeOf() {
                        return _regenerator2.default.wrap(function typeOf$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', Value.fromNative(this.jsTypeName));

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, typeOf, this);
                    })

                    /**
                     * Computes the javascript expression `!(value == other)`
                     * @param {Value} other - The other value
                     * @param {Realm} realm - The realm to use when creating resuls.
                     * @returns {Value}
                     */

                }, {
                    key: 'notEquals',
                    value: _regenerator2.default.mark(function notEquals(other, realm) {
                        var result;
                        return _regenerator2.default.wrap(function notEquals$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.delegateYield(this.doubleEquals(other, realm), 't0', 1);

                                    case 1:
                                        result = _context6.t0;
                                        return _context6.delegateYield(result.not(), 't1', 3);

                                    case 3:
                                        return _context6.abrupt('return', _context6.t1);

                                    case 4:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, notEquals, this);
                    })

                    /**
                     * Computes the javascript expression `!(value === other)`
                     * @param {Value} other - The other value
                     * @param {Realm} realm - The realm to use when creating resuls.
                     * @returns {Value}
                     */

                }, {
                    key: 'doubleNotEquals',
                    value: _regenerator2.default.mark(function doubleNotEquals(other, realm) {
                        var result;
                        return _regenerator2.default.wrap(function doubleNotEquals$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        return _context7.delegateYield(this.tripleEquals(other, realm), 't0', 1);

                                    case 1:
                                        result = _context7.t0;
                                        return _context7.delegateYield(result.not(), 't1', 3);

                                    case 3:
                                        return _context7.abrupt('return', _context7.t1);

                                    case 4:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, doubleNotEquals, this);
                    })

                    /**
                     * Computes the javascript expression `value === other`
                     * @param {Value} other - The other value
                     * @param {Realm} realm - The realm to use when creating resuls.
                     * @returns {Value}
                     */

                }, {
                    key: 'tripleEquals',
                    value: _regenerator2.default.mark(function tripleEquals(other, realm) {
                        return _regenerator2.default.wrap(function tripleEquals$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        return _context8.abrupt('return', other === this ? Value.true : Value.false);

                                    case 1:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, tripleEquals, this);
                    })
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew(realm) {
                        var nue, p;
                        return _regenerator2.default.wrap(function makeThisForNew$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        nue = new ObjectValue(realm);
                                        p = this.properties['prototype'];

                                        if (p) nue.setPrototype(p.value);
                                        return _context9.abrupt('return', nue);

                                    case 4:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })

                    /**
                     * Computes the javascript expression `value > other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'gt',
                    value: _regenerator2.default.mark(function gt(other) {
                        return _regenerator2.default.wrap(function gt$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        _context10.t0 = this;
                                        return _context10.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context10.t2 = _context10.t1;
                                        return _context10.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context10.t4 = _context10.t3;
                                        _context10.t5 = _context10.t2 > _context10.t4;
                                        return _context10.abrupt('return', _context10.t0.fromNative.call(_context10.t0, _context10.t5));

                                    case 7:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, gt, this);
                    })

                    /**
                     * Computes the javascript expression `value < other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'lt',
                    value: _regenerator2.default.mark(function lt(other) {
                        return _regenerator2.default.wrap(function lt$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        _context11.t0 = this;
                                        return _context11.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context11.t2 = _context11.t1;
                                        return _context11.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context11.t4 = _context11.t3;
                                        _context11.t5 = _context11.t2 < _context11.t4;
                                        return _context11.abrupt('return', _context11.t0.fromNative.call(_context11.t0, _context11.t5));

                                    case 7:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, lt, this);
                    })

                    /**
                     * Computes the javascript expression `value >= other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'gte',
                    value: _regenerator2.default.mark(function gte(other) {
                        return _regenerator2.default.wrap(function gte$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        _context12.t0 = this;
                                        return _context12.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context12.t2 = _context12.t1;
                                        return _context12.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context12.t4 = _context12.t3;
                                        _context12.t5 = _context12.t2 >= _context12.t4;
                                        return _context12.abrupt('return', _context12.t0.fromNative.call(_context12.t0, _context12.t5));

                                    case 7:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, gte, this);
                    })

                    /**
                     * Computes the javascript expression `value <= other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'lte',
                    value: _regenerator2.default.mark(function lte(other) {
                        return _regenerator2.default.wrap(function lte$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        _context13.t0 = this;
                                        return _context13.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context13.t2 = _context13.t1;
                                        return _context13.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context13.t4 = _context13.t3;
                                        _context13.t5 = _context13.t2 <= _context13.t4;
                                        return _context13.abrupt('return', _context13.t0.fromNative.call(_context13.t0, _context13.t5));

                                    case 7:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, lte, this);
                    })

                    /**
                     * Computes the javascript expression `value - other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'subtract',
                    value: _regenerator2.default.mark(function subtract(other) {
                        return _regenerator2.default.wrap(function subtract$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        _context14.t0 = this;
                                        return _context14.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context14.t2 = _context14.t1;
                                        return _context14.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context14.t4 = _context14.t3;
                                        _context14.t5 = _context14.t2 - _context14.t4;
                                        return _context14.abrupt('return', _context14.t0.fromNative.call(_context14.t0, _context14.t5));

                                    case 7:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, subtract, this);
                    })

                    /**
                     * Computes the javascript expression `value / other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'divide',
                    value: _regenerator2.default.mark(function divide(other) {
                        return _regenerator2.default.wrap(function divide$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        _context15.t0 = this;
                                        return _context15.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context15.t2 = _context15.t1;
                                        return _context15.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context15.t4 = _context15.t3;
                                        _context15.t5 = _context15.t2 / _context15.t4;
                                        return _context15.abrupt('return', _context15.t0.fromNative.call(_context15.t0, _context15.t5));

                                    case 7:
                                    case 'end':
                                        return _context15.stop();
                                }
                            }
                        }, divide, this);
                    })

                    /**
                     * Computes the javascript expression `value * other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'multiply',
                    value: _regenerator2.default.mark(function multiply(other) {
                        return _regenerator2.default.wrap(function multiply$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        _context16.t0 = this;
                                        return _context16.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context16.t2 = _context16.t1;
                                        return _context16.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context16.t4 = _context16.t3;
                                        _context16.t5 = _context16.t2 * _context16.t4;
                                        return _context16.abrupt('return', _context16.t0.fromNative.call(_context16.t0, _context16.t5));

                                    case 7:
                                    case 'end':
                                        return _context16.stop();
                                }
                            }
                        }, multiply, this);
                    })

                    /**
                     * Computes the javascript expression `value % other`
                     * @param {Value} other - The other value
                     * @returns {Value}
                     */

                }, {
                    key: 'mod',
                    value: _regenerator2.default.mark(function mod(other) {
                        return _regenerator2.default.wrap(function mod$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        _context17.t0 = this;
                                        return _context17.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context17.t2 = _context17.t1;
                                        return _context17.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context17.t4 = _context17.t3;
                                        _context17.t5 = _context17.t2 % _context17.t4;
                                        return _context17.abrupt('return', _context17.t0.fromNative.call(_context17.t0, _context17.t5));

                                    case 7:
                                    case 'end':
                                        return _context17.stop();
                                }
                            }
                        }, mod, this);
                    })
                }, {
                    key: 'bitNot',
                    value: _regenerator2.default.mark(function bitNot() {
                        return _regenerator2.default.wrap(function bitNot$(_context18) {
                            while (1) {
                                switch (_context18.prev = _context18.next) {
                                    case 0:
                                        _context18.t0 = this;
                                        return _context18.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context18.t2 = ~_context18.t1;
                                        return _context18.abrupt('return', _context18.t0.fromNative.call(_context18.t0, _context18.t2));

                                    case 4:
                                    case 'end':
                                        return _context18.stop();
                                }
                            }
                        }, bitNot, this);
                    })
                }, {
                    key: 'shiftLeft',
                    value: _regenerator2.default.mark(function shiftLeft(other) {
                        return _regenerator2.default.wrap(function shiftLeft$(_context19) {
                            while (1) {
                                switch (_context19.prev = _context19.next) {
                                    case 0:
                                        _context19.t0 = this;
                                        return _context19.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context19.t2 = _context19.t1;
                                        return _context19.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context19.t4 = _context19.t3;
                                        _context19.t5 = _context19.t2 << _context19.t4;
                                        return _context19.abrupt('return', _context19.t0.fromNative.call(_context19.t0, _context19.t5));

                                    case 7:
                                    case 'end':
                                        return _context19.stop();
                                }
                            }
                        }, shiftLeft, this);
                    })
                }, {
                    key: 'shiftRight',
                    value: _regenerator2.default.mark(function shiftRight(other) {
                        return _regenerator2.default.wrap(function shiftRight$(_context20) {
                            while (1) {
                                switch (_context20.prev = _context20.next) {
                                    case 0:
                                        _context20.t0 = this;
                                        return _context20.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context20.t2 = _context20.t1;
                                        return _context20.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context20.t4 = _context20.t3;
                                        _context20.t5 = _context20.t2 >> _context20.t4;
                                        return _context20.abrupt('return', _context20.t0.fromNative.call(_context20.t0, _context20.t5));

                                    case 7:
                                    case 'end':
                                        return _context20.stop();
                                }
                            }
                        }, shiftRight, this);
                    })
                }, {
                    key: 'shiftRightZF',
                    value: _regenerator2.default.mark(function shiftRightZF(other) {
                        return _regenerator2.default.wrap(function shiftRightZF$(_context21) {
                            while (1) {
                                switch (_context21.prev = _context21.next) {
                                    case 0:
                                        _context21.t0 = this;
                                        return _context21.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context21.t2 = _context21.t1;
                                        return _context21.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context21.t4 = _context21.t3;
                                        _context21.t5 = _context21.t2 >>> _context21.t4;
                                        return _context21.abrupt('return', _context21.t0.fromNative.call(_context21.t0, _context21.t5));

                                    case 7:
                                    case 'end':
                                        return _context21.stop();
                                }
                            }
                        }, shiftRightZF, this);
                    })
                }, {
                    key: 'bitAnd',
                    value: _regenerator2.default.mark(function bitAnd(other) {
                        return _regenerator2.default.wrap(function bitAnd$(_context22) {
                            while (1) {
                                switch (_context22.prev = _context22.next) {
                                    case 0:
                                        _context22.t0 = this;
                                        return _context22.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context22.t2 = _context22.t1;
                                        return _context22.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context22.t4 = _context22.t3;
                                        _context22.t5 = _context22.t2 & _context22.t4;
                                        return _context22.abrupt('return', _context22.t0.fromNative.call(_context22.t0, _context22.t5));

                                    case 7:
                                    case 'end':
                                        return _context22.stop();
                                }
                            }
                        }, bitAnd, this);
                    })
                }, {
                    key: 'bitOr',
                    value: _regenerator2.default.mark(function bitOr(other) {
                        return _regenerator2.default.wrap(function bitOr$(_context23) {
                            while (1) {
                                switch (_context23.prev = _context23.next) {
                                    case 0:
                                        _context23.t0 = this;
                                        return _context23.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context23.t2 = _context23.t1;
                                        return _context23.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context23.t4 = _context23.t3;
                                        _context23.t5 = _context23.t2 | _context23.t4;
                                        return _context23.abrupt('return', _context23.t0.fromNative.call(_context23.t0, _context23.t5));

                                    case 7:
                                    case 'end':
                                        return _context23.stop();
                                }
                            }
                        }, bitOr, this);
                    })
                }, {
                    key: 'bitXor',
                    value: _regenerator2.default.mark(function bitXor(other) {
                        return _regenerator2.default.wrap(function bitXor$(_context24) {
                            while (1) {
                                switch (_context24.prev = _context24.next) {
                                    case 0:
                                        _context24.t0 = this;
                                        return _context24.delegateYield(this.toNumberNative(), 't1', 2);

                                    case 2:
                                        _context24.t2 = _context24.t1;
                                        return _context24.delegateYield(other.toNumberNative(), 't3', 4);

                                    case 4:
                                        _context24.t4 = _context24.t3;
                                        _context24.t5 = _context24.t2 ^ _context24.t4;
                                        return _context24.abrupt('return', _context24.t0.fromNative.call(_context24.t0, _context24.t5));

                                    case 7:
                                    case 'end':
                                        return _context24.stop();
                                }
                            }
                        }, bitXor, this);
                    })

                    /**
                     * Is the value is truthy, i.e. `!!value`
                     *
                     * @abstract
                     * @type {boolean}
                     */

                }, {
                    key: 'toNumberValue',
                    value: _regenerator2.default.mark(function toNumberValue() {
                        return _regenerator2.default.wrap(function toNumberValue$(_context25) {
                            while (1) {
                                switch (_context25.prev = _context25.next) {
                                    case 0:
                                        throw new Error('Unimplemented: Value#toNumberValue');

                                    case 1:
                                    case 'end':
                                        return _context25.stop();
                                }
                            }
                        }, toNumberValue, this);
                    })
                }, {
                    key: 'toStringValue',
                    value: _regenerator2.default.mark(function toStringValue() {
                        return _regenerator2.default.wrap(function toStringValue$(_context26) {
                            while (1) {
                                switch (_context26.prev = _context26.next) {
                                    case 0:
                                        throw new Error('Unimplemented: Value#StringValue');

                                    case 1:
                                    case 'end':
                                        return _context26.stop();
                                }
                            }
                        }, toStringValue, this);
                    })
                }, {
                    key: 'toStringNative',
                    value: _regenerator2.default.mark(function toStringNative() {
                        return _regenerator2.default.wrap(function toStringNative$(_context27) {
                            while (1) {
                                switch (_context27.prev = _context27.next) {
                                    case 0:
                                        return _context27.delegateYield(this.toStringValue(), 't0', 1);

                                    case 1:
                                        return _context27.abrupt('return', _context27.t0.native);

                                    case 2:
                                    case 'end':
                                        return _context27.stop();
                                }
                            }
                        }, toStringNative, this);
                    })
                }, {
                    key: 'toBooleanValue',
                    value: _regenerator2.default.mark(function toBooleanValue() {
                        return _regenerator2.default.wrap(function toBooleanValue$(_context28) {
                            while (1) {
                                switch (_context28.prev = _context28.next) {
                                    case 0:
                                        return _context28.abrupt('return', this.truthy ? tru : fals);

                                    case 1:
                                    case 'end':
                                        return _context28.stop();
                                }
                            }
                        }, toBooleanValue, this);
                    })
                }, {
                    key: 'toUIntNative',
                    value: _regenerator2.default.mark(function toUIntNative() {
                        var nv;
                        return _regenerator2.default.wrap(function toUIntNative$(_context29) {
                            while (1) {
                                switch (_context29.prev = _context29.next) {
                                    case 0:
                                        return _context29.delegateYield(this.toNumberValue(), 't0', 1);

                                    case 1:
                                        nv = _context29.t0;
                                        return _context29.abrupt('return', Math.floor(nv.native));

                                    case 3:
                                    case 'end':
                                        return _context29.stop();
                                }
                            }
                        }, toUIntNative, this);
                    })
                }, {
                    key: 'toIntNative',
                    value: _regenerator2.default.mark(function toIntNative() {
                        var nv;
                        return _regenerator2.default.wrap(function toIntNative$(_context30) {
                            while (1) {
                                switch (_context30.prev = _context30.next) {
                                    case 0:
                                        return _context30.delegateYield(this.toNumberValue(), 't0', 1);

                                    case 1:
                                        nv = _context30.t0;
                                        return _context30.abrupt('return', Math.floor(nv.native));

                                    case 3:
                                    case 'end':
                                        return _context30.stop();
                                }
                            }
                        }, toIntNative, this);
                    })
                }, {
                    key: 'toNumberNative',
                    value: _regenerator2.default.mark(function toNumberNative() {
                        var nv;
                        return _regenerator2.default.wrap(function toNumberNative$(_context31) {
                            while (1) {
                                switch (_context31.prev = _context31.next) {
                                    case 0:
                                        return _context31.delegateYield(this.toNumberValue(), 't0', 1);

                                    case 1:
                                        nv = _context31.t0;
                                        return _context31.abrupt('return', nv.native);

                                    case 3:
                                    case 'end':
                                        return _context31.stop();
                                }
                            }
                        }, toNumberNative, this);
                    })
                }, {
                    key: 'toPrimitiveValue',
                    value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
                        return _regenerator2.default.wrap(function toPrimitiveValue$(_context32) {
                            while (1) {
                                switch (_context32.prev = _context32.next) {
                                    case 0:
                                        throw new Error('Unimplemented: Value#jsTypeName');

                                    case 1:
                                    case 'end':
                                        return _context32.stop();
                                }
                            }
                        }, toPrimitiveValue, this);
                    })
                }, {
                    key: 'toPrimitiveNative',
                    value: _regenerator2.default.mark(function toPrimitiveNative(preferedType) {
                        return _regenerator2.default.wrap(function toPrimitiveNative$(_context33) {
                            while (1) {
                                switch (_context33.prev = _context33.next) {
                                    case 0:
                                        return _context33.delegateYield(this.toPrimitiveValue(), 't0', 1);

                                    case 1:
                                        return _context33.abrupt('return', _context33.t0.native);

                                    case 2:
                                    case 'end':
                                        return _context33.stop();
                                }
                            }
                        }, toPrimitiveNative, this);
                    })

                    /**
                     * Quickly make a generator for this value
                     */

                }, {
                    key: 'fastGen',
                    value: _regenerator2.default.mark(function fastGen() {
                        return _regenerator2.default.wrap(function fastGen$(_context34) {
                            while (1) {
                                switch (_context34.prev = _context34.next) {
                                    case 0:
                                        return _context34.abrupt('return', this);

                                    case 1:
                                    case 'end':
                                        return _context34.stop();
                                }
                            }
                        }, fastGen, this);
                    })
                }, {
                    key: 'debugString',
                    get: function get() {
                        var native = this.toNative();
                        return native ? native.toString() : '???';
                    }
                }, {
                    key: 'truthy',
                    get: function get() {
                        throw new Error('Unimplemented: Value#truthy');
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        throw new Error('Unimplemented: Value#jsTypeName');
                    }
                }, {
                    key: 'specTypeName',
                    get: function get() {
                        return this.jsTypeName;
                    }
                }, {
                    key: 'isCallable',
                    get: function get() {
                        return typeof this.call === 'function';
                    }
                }]);
                return Value;
            }();

            module.exports = Value;

            ObjectValue = __webpack_require__(120);
            PrimitiveValue = __webpack_require__(128);
            StringValue = __webpack_require__(131);
            NumberValue = __webpack_require__(136);
            var UndefinedValue = __webpack_require__(140);
            var NullValue = __webpack_require__(137);

            undef = new UndefinedValue();
            nil = new NullValue();
            tru = new PrimitiveValue(true);
            fals = new PrimitiveValue(false);
            nan = new PrimitiveValue(NaN);
            emptyString = new StringValue('');

            zero = new NumberValue(0);
            negzero = new NumberValue(-0);
            one = new NumberValue(1);
            negone = new NumberValue(-1);
            smallIntValues = [negone, zero, one, new NumberValue(2), new NumberValue(3), new NumberValue(4), new NumberValue(5), new NumberValue(6), new NumberValue(7), new NumberValue(8), new NumberValue(9)];

            /***/ },
        /* 104 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(105), __esModule: true };

            /***/ },
        /* 105 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(106);
            var $Object = __webpack_require__(18).Object;
            module.exports = function defineProperties(T, D){
                return $Object.defineProperties(T, D);
            };

            /***/ },
        /* 106 */
        /***/ function(module, exports, __webpack_require__) {

            var $export = __webpack_require__(16);
            // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
            $export($export.S + $export.F * !__webpack_require__(26), 'Object', {defineProperties: __webpack_require__(36)});

            /***/ },
        /* 107 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(108), __esModule: true };

            /***/ },
        /* 108 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(9);
            __webpack_require__(54);
            __webpack_require__(109);
            module.exports = __webpack_require__(18).WeakMap;

            /***/ },
        /* 109 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var each         = __webpack_require__(110)(0)
                , redefine     = __webpack_require__(31)
                , meta         = __webpack_require__(87)
                , assign       = __webpack_require__(112)
                , weak         = __webpack_require__(113)
                , isObject     = __webpack_require__(24)
                , has          = __webpack_require__(32)
                , getWeak      = meta.getWeak
                , isExtensible = Object.isExtensible
                , uncaughtFrozenStore = weak.ufstore
                , tmp          = {}
                , InternalMap;

            var wrapper = function(get){
                return function WeakMap(){
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            };

            var methods = {
                // 23.3.3.3 WeakMap.prototype.get(key)
                get: function get(key){
                    if(isObject(key)){
                        var data = getWeak(key);
                        if(data === true)return uncaughtFrozenStore(this).get(key);
                        return data ? data[this._i] : undefined;
                    }
                },
                // 23.3.3.5 WeakMap.prototype.set(key, value)
                set: function set(key, value){
                    return weak.def(this, key, value);
                }
            };

            // 23.3 WeakMap Objects
            var $WeakMap = module.exports = __webpack_require__(114)('WeakMap', wrapper, methods, weak, true, true);

            // IE11 WeakMap frozen keys fix
            if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
                InternalMap = weak.getConstructor(wrapper);
                assign(InternalMap.prototype, methods);
                meta.NEED = true;
                each(['delete', 'has', 'get', 'set'], function(key){
                    var proto  = $WeakMap.prototype
                        , method = proto[key];
                    redefine(proto, key, function(a, b){
                        // store frozen objects on internal weakmap shim
                        if(isObject(a) && !isExtensible(a)){
                            if(!this._f)this._f = new InternalMap;
                            var result = this._f[key](a, b);
                            return key == 'set' ? this : result;
                            // store all the rest on native weakmap
                        } return method.call(this, a, b);
                    });
                });
            }

            /***/ },
        /* 110 */
        /***/ function(module, exports, __webpack_require__) {

            // 0 -> Array#forEach
            // 1 -> Array#map
            // 2 -> Array#filter
            // 3 -> Array#some
            // 4 -> Array#every
            // 5 -> Array#find
            // 6 -> Array#findIndex
            var ctx      = __webpack_require__(19)
                , IObject  = __webpack_require__(40)
                , toObject = __webpack_require__(53)
                , toLength = __webpack_require__(43)
                , asc      = __webpack_require__(111);
            module.exports = function(TYPE, $create){
                var IS_MAP        = TYPE == 1
                    , IS_FILTER     = TYPE == 2
                    , IS_SOME       = TYPE == 3
                    , IS_EVERY      = TYPE == 4
                    , IS_FIND_INDEX = TYPE == 6
                    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
                    , create        = $create || asc;
                return function($this, callbackfn, that){
                    var O      = toObject($this)
                        , self   = IObject(O)
                        , f      = ctx(callbackfn, that, 3)
                        , length = toLength(self.length)
                        , index  = 0
                        , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
                        , val, res;
                    for(;length > index; index++)if(NO_HOLES || index in self){
                        val = self[index];
                        res = f(val, index, O);
                        if(TYPE){
                            if(IS_MAP)result[index] = res;            // map
                            else if(res)switch(TYPE){
                                case 3: return true;                    // some
                                case 5: return val;                     // find
                                case 6: return index;                   // findIndex
                                case 2: result.push(val);               // filter
                            } else if(IS_EVERY)return false;          // every
                        }
                    }
                    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
                };
            };

            /***/ },
        /* 111 */
        /***/ function(module, exports, __webpack_require__) {

            // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
            var isObject = __webpack_require__(24)
                , isArray  = __webpack_require__(91)
                , SPECIES  = __webpack_require__(51)('species');
            module.exports = function(original, length){
                var C;
                if(isArray(original)){
                    C = original.constructor;
                    // cross-realm fallback
                    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
                    if(isObject(C)){
                        C = C[SPECIES];
                        if(C === null)C = undefined;
                    }
                } return new (C === undefined ? Array : C)(length);
            };

            /***/ },
        /* 112 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            // 19.1.2.1 Object.assign(target, source, ...)
            var getKeys  = __webpack_require__(37)
                , gOPS     = __webpack_require__(90)
                , pIE      = __webpack_require__(67)
                , toObject = __webpack_require__(53)
                , IObject  = __webpack_require__(40);

            // should work with symbols and should have deterministic property order (V8 bug)
            module.exports = __webpack_require__(27)(function(){
                var a = Object.assign
                    , A = {}
                    , B = {}
                    , S = Symbol()
                    , K = 'abcdefghijklmnopqrst';
                A[S] = 7;
                K.split('').forEach(function(k){ B[k] = k; });
                return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
            }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
                var T     = toObject(target)
                    , aLen  = arguments.length
                    , index = 1
                    , getSymbols = gOPS.f
                    , isEnum     = pIE.f;
                while(aLen > index){
                    var S      = IObject(arguments[index++])
                        , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
                        , length = keys.length
                        , j      = 0
                        , key;
                    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
                }
                return T;
            } : Object.assign;

            /***/ },
        /* 113 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var redefineAll       = __webpack_require__(72)
                , getWeak           = __webpack_require__(87).getWeak
                , anObject          = __webpack_require__(23)
                , isObject          = __webpack_require__(24)
                , anInstance        = __webpack_require__(60)
                , forOf             = __webpack_require__(61)
                , createArrayMethod = __webpack_require__(110)
                , $has              = __webpack_require__(32)
                , arrayFind         = createArrayMethod(5)
                , arrayFindIndex    = createArrayMethod(6)
                , id                = 0;

            // fallback for uncaught frozen keys
            var uncaughtFrozenStore = function(that){
                return that._l || (that._l = new UncaughtFrozenStore);
            };
            var UncaughtFrozenStore = function(){
                this.a = [];
            };
            var findUncaughtFrozen = function(store, key){
                return arrayFind(store.a, function(it){
                    return it[0] === key;
                });
            };
            UncaughtFrozenStore.prototype = {
                get: function(key){
                    var entry = findUncaughtFrozen(this, key);
                    if(entry)return entry[1];
                },
                has: function(key){
                    return !!findUncaughtFrozen(this, key);
                },
                set: function(key, value){
                    var entry = findUncaughtFrozen(this, key);
                    if(entry)entry[1] = value;
                    else this.a.push([key, value]);
                },
                'delete': function(key){
                    var index = arrayFindIndex(this.a, function(it){
                        return it[0] === key;
                    });
                    if(~index)this.a.splice(index, 1);
                    return !!~index;
                }
            };

            module.exports = {
                getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
                    var C = wrapper(function(that, iterable){
                        anInstance(that, C, NAME, '_i');
                        that._i = id++;      // collection id
                        that._l = undefined; // leak store for uncaught frozen objects
                        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
                    });
                    redefineAll(C.prototype, {
                        // 23.3.3.2 WeakMap.prototype.delete(key)
                        // 23.4.3.3 WeakSet.prototype.delete(value)
                        'delete': function(key){
                            if(!isObject(key))return false;
                            var data = getWeak(key);
                            if(data === true)return uncaughtFrozenStore(this)['delete'](key);
                            return data && $has(data, this._i) && delete data[this._i];
                        },
                        // 23.3.3.4 WeakMap.prototype.has(key)
                        // 23.4.3.4 WeakSet.prototype.has(value)
                        has: function has(key){
                            if(!isObject(key))return false;
                            var data = getWeak(key);
                            if(data === true)return uncaughtFrozenStore(this).has(key);
                            return data && $has(data, this._i);
                        }
                    });
                    return C;
                },
                def: function(that, key, value){
                    var data = getWeak(anObject(key), true);
                    if(data === true)uncaughtFrozenStore(that).set(key, value);
                    else data[that._i] = value;
                    return that;
                },
                ufstore: uncaughtFrozenStore
            };

            /***/ },
        /* 114 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            var global         = __webpack_require__(17)
                , $export        = __webpack_require__(16)
                , meta           = __webpack_require__(87)
                , fails          = __webpack_require__(27)
                , hide           = __webpack_require__(21)
                , redefineAll    = __webpack_require__(72)
                , forOf          = __webpack_require__(61)
                , anInstance     = __webpack_require__(60)
                , isObject       = __webpack_require__(24)
                , setToStringTag = __webpack_require__(50)
                , dP             = __webpack_require__(22).f
                , each           = __webpack_require__(110)(0)
                , DESCRIPTORS    = __webpack_require__(26);

            module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
                var Base  = global[NAME]
                    , C     = Base
                    , ADDER = IS_MAP ? 'set' : 'add'
                    , proto = C && C.prototype
                    , O     = {};
                if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
                        new C().entries().next();
                    }))){
                    // create collection constructor
                    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                    redefineAll(C.prototype, methods);
                    meta.NEED = true;
                } else {
                    C = wrapper(function(target, iterable){
                        anInstance(target, C, NAME, '_c');
                        target._c = new Base;
                        if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
                    });
                    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
                        var IS_ADDER = KEY == 'add' || KEY == 'set';
                        if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
                            anInstance(this, C, KEY);
                            if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
                            var result = this._c[KEY](a === 0 ? 0 : a, b);
                            return IS_ADDER ? this : result;
                        });
                    });
                    if('size' in proto)dP(C.prototype, 'size', {
                        get: function(){
                            return this._c.size;
                        }
                    });
                }

                setToStringTag(C, NAME);

                O[NAME] = C;
                $export($export.G + $export.W + $export.F, O);

                if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

                return C;
            };

            /***/ },
        /* 115 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);

            var CompletionRecord = function () {
                function CompletionRecord(type, value, target) {
                    (0, _classCallCheck3.default)(this, CompletionRecord);

                    if (value === undefined) {
                        value = type;
                        type = CompletionRecord.NORMAL;
                    }

                    this.type = type;
                    this.value = value;
                    this.target = target;
                }

                (0, _createClass3.default)(CompletionRecord, [{
                    key: 'addExtra',

                    /**
                     * Easy access to value.addExtra.
                     * Note: Returns a generator.
                     * @param {Object} obj - Extra properties
                     */
                    value: function addExtra(obj) {
                        return this.value.addExtra(obj);
                    }
                }, {
                    key: 'abrupt',
                    get: function get() {
                        return this.type !== CompletionRecord.NORMAL;
                    }
                }], [{
                    key: 'makeTypeError',
                    value: function makeTypeError(realm, msg) {
                        var err = undefined;
                        if (msg instanceof Error) err = realm.TypeError.makeFrom(msg);else err = realm.TypeError.make(msg);
                        return new CompletionRecord(CompletionRecord.THROW, err);
                    }
                }, {
                    key: 'makeReferenceError',
                    value: function makeReferenceError(realm, msg) {
                        var err = undefined;
                        if (msg instanceof Error) err = realm.ReferenceError.makeFrom(msg);else err = realm.ReferenceError.make(msg);
                        return new CompletionRecord(CompletionRecord.THROW, err);
                    }
                }, {
                    key: 'makeSyntaxError',
                    value: function makeSyntaxError(realm, msg) {
                        var err = undefined;
                        if (msg instanceof Error) err = realm.SyntaxError.makeFrom(msg);else err = realm.SyntaxError.make(msg);
                        return new CompletionRecord(CompletionRecord.THROW, err);
                    }
                }, {
                    key: 'makeRangeError',
                    value: function makeRangeError(realm, msg) {
                        var err = undefined;
                        if (msg instanceof Error) err = realm.RangeError.makeFrom(msg);else err = realm.RangeError.make(msg);
                        return new CompletionRecord(CompletionRecord.THROW, err);
                    }
                }]);
                return CompletionRecord;
            }();

            module.exports = CompletionRecord;

            CompletionRecord.NORMAL = 0;
            CompletionRecord.BREAK = 1;
            CompletionRecord.CONTINUE = 2;
            CompletionRecord.RETURN = 3;
            CompletionRecord.THROW = 4;

            /***/ },
        /* 116 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var _marked = [sortValArray, mergeValArray].map(_regenerator2.default.mark);

            function sortValArray(arr, comp) {
                var mid, left, right;
                return _regenerator2.default.wrap(function sortValArray$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(arr.length < 2)) {
                                    _context.next = 2;
                                    break;
                                }

                                return _context.abrupt('return', arr);

                            case 2:
                                mid = Math.floor(arr.length / 2);
                                return _context.delegateYield(sortValArray(arr.slice(0, mid), comp), 't0', 4);

                            case 4:
                                left = _context.t0;
                                return _context.delegateYield(sortValArray(arr.slice(mid, arr.length), comp), 't1', 6);

                            case 6:
                                right = _context.t1;
                                return _context.delegateYield(mergeValArray(left, right, comp), 't2', 8);

                            case 8:
                                return _context.abrupt('return', _context.t2);

                            case 9:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _marked[0], this);
            }

            function mergeValArray(l, r, comp) {
                var result;
                return _regenerator2.default.wrap(function mergeValArray$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                result = [];

                            case 1:
                                if (!(l.length && r.length)) {
                                    _context2.next = 10;
                                    break;
                                }

                                return _context2.delegateYield(comp(l[0], r[0]), 't0', 3);

                            case 3:
                                if (!_context2.t0) {
                                    _context2.next = 7;
                                    break;
                                }

                                result.push(l.shift());
                                _context2.next = 8;
                                break;

                            case 7:
                                result.push(r.shift());

                            case 8:
                                _context2.next = 1;
                                break;

                            case 10:

                                while (l.length) {
                                    result.push(l.shift());
                                }while (r.length) {
                                result.push(r.shift());
                            }return _context2.abrupt('return', result);

                            case 13:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _marked[1], this);
            }

            var GenDash = function () {
                function GenDash() {
                    (0, _classCallCheck3.default)(this, GenDash);
                }

                (0, _createClass3.default)(GenDash, null, [{
                    key: 'identify',
                    value: _regenerator2.default.mark(function identify(value) {
                        return _regenerator2.default.wrap(function identify$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.abrupt('return', value);

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, identify, this);
                    })
                }, {
                    key: 'map',
                    value: _regenerator2.default.mark(function map(what, fx) {
                        var out, i;
                        return _regenerator2.default.wrap(function map$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        fx = fx || GenDash.identify;
                                        out = new Array(what.length);
                                        i = 0;

                                    case 3:
                                        if (!(i < what.length)) {
                                            _context4.next = 9;
                                            break;
                                        }

                                        return _context4.delegateYield(fx(what[i], i, what), 't0', 5);

                                    case 5:
                                        out[i] = _context4.t0;

                                    case 6:
                                        ++i;
                                        _context4.next = 3;
                                        break;

                                    case 9:
                                        return _context4.abrupt('return', out);

                                    case 10:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, map, this);
                    })
                }, {
                    key: 'each',
                    value: _regenerator2.default.mark(function each(what, fx) {
                        var _i;

                        return _regenerator2.default.wrap(function each$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        if (!(what == null)) {
                                            _context5.next = 2;
                                            break;
                                        }

                                        return _context5.abrupt('return', what);

                                    case 2:
                                        _i = 0;

                                    case 3:
                                        if (!(_i < what.length)) {
                                            _context5.next = 11;
                                            break;
                                        }

                                        return _context5.delegateYield(fx(what[_i], _i, what), 't0', 5);

                                    case 5:
                                        _context5.t1 = _context5.t0;

                                        if (!(false === _context5.t1)) {
                                            _context5.next = 8;
                                            break;
                                        }

                                        return _context5.abrupt('break', 11);

                                    case 8:
                                        ++_i;
                                        _context5.next = 3;
                                        break;

                                    case 11:
                                        return _context5.abrupt('return', what);

                                    case 12:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, each, this);
                    })
                }, {
                    key: 'noop',
                    value: _regenerator2.default.mark(function noop() {
                        return _regenerator2.default.wrap(function noop$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, noop, this);
                    })
                }, {
                    key: 'sort',
                    value: _regenerator2.default.mark(function sort(what, comp) {
                        return _regenerator2.default.wrap(function sort$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        comp = comp || _regenerator2.default.mark(function _callee(left, right) {
                                                return _regenerator2.default.wrap(function _callee$(_context7) {
                                                    while (1) {
                                                        switch (_context7.prev = _context7.next) {
                                                            case 0:
                                                                return _context7.abrupt('return', left < right);

                                                            case 1:
                                                            case 'end':
                                                                return _context7.stop();
                                                        }
                                                    }
                                                }, _callee, this);
                                            });
                                        return _context8.delegateYield(sortValArray(what, comp), 't0', 2);

                                    case 2:
                                        return _context8.abrupt('return', _context8.t0);

                                    case 3:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, sort, this);
                    })
                }, {
                    key: 'values',
                    value: _regenerator2.default.mark(function values(what) {
                        var out, o;
                        return _regenerator2.default.wrap(function values$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        out = [];
                                        _context9.t0 = _regenerator2.default.keys(what);

                                    case 2:
                                        if ((_context9.t1 = _context9.t0()).done) {
                                            _context9.next = 9;
                                            break;
                                        }

                                        o = _context9.t1.value;

                                        if (Object.hasOwnProperty(o)) {
                                            _context9.next = 6;
                                            break;
                                        }

                                        return _context9.abrupt('continue', 2);

                                    case 6:
                                        out.push(what[o]);
                                        _context9.next = 2;
                                        break;

                                    case 9:
                                        return _context9.abrupt('return', out);

                                    case 10:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, values, this);
                    })
                }, {
                    key: 'keys',
                    value: _regenerator2.default.mark(function keys(what) {
                        var out, _o;

                        return _regenerator2.default.wrap(function keys$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        out = [];
                                        _context10.t0 = _regenerator2.default.keys(what);

                                    case 2:
                                        if ((_context10.t1 = _context10.t0()).done) {
                                            _context10.next = 9;
                                            break;
                                        }

                                        _o = _context10.t1.value;

                                        if (Object.hasOwnProperty(_o)) {
                                            _context10.next = 6;
                                            break;
                                        }

                                        return _context10.abrupt('continue', 2);

                                    case 6:
                                        out.push(_o);
                                        _context10.next = 2;
                                        break;

                                    case 9:
                                        return _context10.abrupt('return', out);

                                    case 10:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, keys, this);
                    })
                }, {
                    key: 'identity',
                    value: _regenerator2.default.mark(function identity(value) {
                        return _regenerator2.default.wrap(function identity$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        return _context11.abrupt('return', value);

                                    case 1:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, identity, this);
                    })
                }, {
                    key: 'syncGenHelper',
                    value: function syncGenHelper(gen) {
                        var val = gen.next();
                        if (!val.done) {
                            console.log('This code path uses a helper, but the actual method yielded...');
                            throw new Error('This code path uses a helper, but the actual method yielded...');
                        }
                        return val.value;
                    }
                }]);
                return GenDash;
            }();

            module.exports = GenDash;

            /***/ },
        /* 117 */
        /***/ function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                var formatRegExp = /%[sdj%]/g;
                exports.format = function(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for (var i = 0; i < arguments.length; i++) {
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }

                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                        if (x === '%%') return '%';
                        if (i >= len) return x;
                        switch (x) {
                            case '%s': return String(args[i++]);
                            case '%d': return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    });
                    for (var x = args[i]; i < len; x = args[++i]) {
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };


                // Mark that a method should not be used.
                // Returns a modified function which warns once by default.
                // If --no-deprecation is set, then it is a no-op.
                exports.deprecate = function(fn, msg) {
                    // Allow for deprecating things in the process of starting up.
                    if (isUndefined(global.process)) {
                        return function() {
                            return exports.deprecate(fn, msg).apply(this, arguments);
                        };
                    }

                    if (process.noDeprecation === true) {
                        return fn;
                    }

                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }

                    return deprecated;
                };


                var debugs = {};
                var debugEnviron;
                exports.debuglog = function(set) {
                    if (isUndefined(debugEnviron))
                        debugEnviron = process.env.NODE_DEBUG || '';
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                            var pid = process.pid;
                            debugs[set] = function() {
                                var msg = exports.format.apply(exports, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function() {};
                        }
                    }
                    return debugs[set];
                };


                /**
                 * Echos the value of a value. Trys to print the value out
                 * in the best way possible given the different types.
                 *
                 * @param {Object} obj The object to print out.
                 * @param {Object} opts Optional options object that alters the output.
                 */
                /* legacy: obj, showHidden, depth, colors*/
                function inspect(obj, opts) {
                    // default options
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        // legacy...
                        ctx.showHidden = opts;
                    } else if (opts) {
                        // got an "options" object
                        exports._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports.inspect = inspect;


                // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                inspect.colors = {
                    'bold' : [1, 22],
                    'italic' : [3, 23],
                    'underline' : [4, 24],
                    'inverse' : [7, 27],
                    'white' : [37, 39],
                    'grey' : [90, 39],
                    'black' : [30, 39],
                    'blue' : [34, 39],
                    'cyan' : [36, 39],
                    'green' : [32, 39],
                    'magenta' : [35, 39],
                    'red' : [31, 39],
                    'yellow' : [33, 39]
                };

                // Don't use 'blue' not visible on cmd.exe
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    // "name": intentionally not styling
                    'regexp': 'red'
                };


                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];

                    if (style) {
                        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                            '\u001b[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }


                function stylizeNoColor(str, styleType) {
                    return str;
                }


                function arrayToHash(array) {
                    var hash = {};

                    array.forEach(function(val, idx) {
                        hash[val] = true;
                    });

                    return hash;
                }


                function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (ctx.customInspect &&
                        value &&
                        isFunction(value.inspect) &&
                        // Filter out the util module, it's inspect function is special
                        value.inspect !== exports.inspect &&
                        // Also filter out any prototype objects using the circular check.
                        !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }

                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }

                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);

                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }

                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (isError(value)
                        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }

                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }

                    var base = '', array = false, braces = ['{', '}'];

                    // Make Array say that they are Array
                    if (isArray(value)) {
                        array = true;
                        braces = ['[', ']'];
                    }

                    // Make functions say that they are functions
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }

                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }

                    // Make dates with properties first say the date
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }

                    // Make error with message first say the error
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }

                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }

                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }

                    ctx.seen.push(value);

                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function(key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }

                    ctx.seen.pop();

                    return reduceToSingleString(output, base, braces);
                }


                function formatPrimitive(ctx, value) {
                    if (isUndefined(value))
                        return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                .replace(/'/g, "\\'")
                                .replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value))
                        return ctx.stylize('' + value, 'number');
                    if (isBoolean(value))
                        return ctx.stylize('' + value, 'boolean');
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value))
                        return ctx.stylize('null', 'null');
                }


                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }


                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) {
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function(key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                key, true));
                        }
                    });
                    return output;
                }


                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function(line) {
                                        return '  ' + line;
                                    }).join('\n').substr(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function(line) {
                                            return '   ' + line;
                                        }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.substr(1, name.length - 2);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, "\\'")
                                .replace(/\\"/g, '"')
                                .replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, 'string');
                        }
                    }

                    return name + ': ' + str;
                }


                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);

                    if (length > 60) {
                        return braces[0] +
                            (base === '' ? '' : base + '\n ') +
                            ' ' +
                            output.join(',\n  ') +
                            ' ' +
                            braces[1];
                    }

                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }


                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }
                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports.isObject = isObject;

                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }
                exports.isDate = isDate;

                function isError(e) {
                    return isObject(e) &&
                        (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' ||  // ES6 symbol
                        typeof arg === 'undefined';
                }
                exports.isPrimitive = isPrimitive;

                exports.isBuffer = __webpack_require__(118);

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }


                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }


                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                    'Oct', 'Nov', 'Dec'];

                // 26 Feb 16:19:34
                function timestamp() {
                    var d = new Date();
                    var time = [pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())].join(':');
                    return [d.getDate(), months[d.getMonth()], time].join(' ');
                }


                // log is just a thin wrapper to console.log that prepends a timestamp
                exports.log = function() {
                    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                };


                /**
                 * Inherit the prototype methods from one constructor into another.
                 *
                 * The Function.prototype.inherits from lang.js rewritten as a standalone
                 * function (not on Function.prototype). NOTE: If this file is to be loaded
                 * during bootstrapping this function needs to be rewritten using some native
                 * functions as prototype setup using normal JavaScript does not work as
                 * expected during bootstrapping (see mirror.js in r114903).
                 *
                 * @param {function} ctor Constructor function which needs to inherit the
                 *     prototype.
                 * @param {function} superCtor Constructor function to inherit prototype from.
                 */
                exports.inherits = __webpack_require__(119);

                exports._extend = function(origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;

                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) {
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };

                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(6)))

            /***/ },
        /* 118 */
        /***/ function(module, exports) {

            module.exports = function isBuffer(arg) {
                return arg && typeof arg === 'object'
                    && typeof arg.copy === 'function'
                    && typeof arg.fill === 'function'
                    && typeof arg.readUInt8 === 'function';
            }

            /***/ },
        /* 119 */
        /***/ function(module, exports) {

            if (typeof Object.create === 'function') {
                // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
            } else {
                // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    var TempCtor = function () {}
                    TempCtor.prototype = superCtor.prototype
                    ctor.prototype = new TempCtor()
                    ctor.prototype.constructor = ctor
                }
            }


            /***/ },
        /* 120 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _setPrototypeOf = __webpack_require__(75);

            var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

            var _defineProperty = __webpack_require__(96);

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            var _create = __webpack_require__(78);

            var _create2 = _interopRequireDefault(_create);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var PropertyDescriptor = __webpack_require__(127);
            var CompletionRecord = __webpack_require__(115);
            var PrimitiveValue = __webpack_require__(128);
            var NullValue = __webpack_require__(137);
            var GenDash = __webpack_require__(116);

            var alwaysFalse = function alwaysFalse() {
                return false;
            };
            var undefinedReturningGenerator = _regenerator2.default.mark(function undefinedReturningGenerator() {
                return _regenerator2.default.wrap(function undefinedReturningGenerator$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.abrupt('return', Value.undef);

                            case 1:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, undefinedReturningGenerator, this);
            });

            var ObjRefrence = function () {
                function ObjRefrence(object, name, ctxthis) {
                    (0, _classCallCheck3.default)(this, ObjRefrence);

                    this.object = object;
                    this.name = name;
                    this.ctxthis = ctxthis;
                }

                (0, _createClass3.default)(ObjRefrence, [{
                    key: 'del',
                    value: function del(s) {
                        return this.object.delete(this.name, s);
                    }
                }, {
                    key: 'getValue',
                    value: function getValue(s) {
                        return this.object.get(this.name, this.ctxthis || this.object, s);
                    }
                }, {
                    key: 'setValue',
                    value: function setValue(value, s) {
                        return this.object.set(this.name, value, s);
                    }
                }]);
                return ObjRefrence;
            }();

            /**
             * Represents an Object.
             */

            var ObjectValue = function (_Value) {
                (0, _inherits3.default)(ObjectValue, _Value);

                function ObjectValue(realm, proto) {
                    (0, _classCallCheck3.default)(this, ObjectValue);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ObjectValue).call(this));

                    _this.extensable = true;
                    _this.realm = realm;
                    if (proto) _this.eraseAndSetPrototype(proto);else if (realm) _this.eraseAndSetPrototype(realm.ObjectPrototype);else _this.properties = (0, _create2.default)(null);
                    return _this;
                }

                (0, _createClass3.default)(ObjectValue, [{
                    key: 'ref',
                    value: function ref(name, ctxthis) {
                        var existing = this.properties[name];
                        var thiz = this;

                        var get = undefined;
                        if (existing) {
                            return new ObjRefrence(this, name, ctxthis);
                        } else {
                            return {
                                name: name,
                                object: thiz,
                                isVariable: false,
                                del: alwaysFalse,
                                getValue: undefinedReturningGenerator,
                                setValue: function setValue(to, s) {
                                    return this.object.set(this.name, to, s);
                                }
                            };
                        }
                    }

                    //Note: Returns generator by tailcall.

                }, {
                    key: 'set',
                    value: function set(name, value, s, extra) {
                        var thiz = this;
                        extra = extra || {};
                        if (!Object.prototype.hasOwnProperty.call(this.properties, name)) {
                            if (!this.extensable) {
                                //TODO: Should we throw here in strict mode?
                                return Value.undef.fastGen();
                            }
                            var v = new PropertyDescriptor(value);
                            v.enumerable = 'enumerable' in extra ? extra.enumerable : true;
                            this.properties[name] = v;

                            return v.setValue(this, value, s);
                        }

                        return this.properties[name].setValue(this, value, s);
                    }
                }, {
                    key: 'rawSetProperty',
                    value: function rawSetProperty(name, value) {
                        this.properties[name] = value;
                    }
                }, {
                    key: 'setImmediate',
                    value: function setImmediate(name, value) {
                        if (name in this.properties) {
                            if (Object.prototype.hasOwnProperty.call(this.properties, name)) {
                                if (this.properties[name].direct) {
                                    this.properties[name].value = value;
                                    return;
                                }
                            }
                        } else if (this.extensable) {
                            var v = new PropertyDescriptor(value);
                            v.del = this.delete.bind(this, name);
                            this.properties[name] = v;
                            return;
                        }
                        return GenDash.syncGenHelper(this.set(name, value, this.realm));
                    }
                }, {
                    key: 'has',
                    value: function has(name) {
                        return name in this.properties;
                    }
                }, {
                    key: 'delete',
                    value: function _delete(name, s) {
                        var po = this.properties[name];
                        if (!po.configurable) {
                            if (s.strict) return CompletionRecord.makeTypeError(s.realm, "Can't delete nonconfigurable object");else return false;
                        }
                        return delete this.properties[name];
                    }
                }, {
                    key: 'toNative',
                    value: function toNative() {
                        var _this2 = this;

                        //TODO: This is really a mess and should maybe be somewhere else.
                        var bk = Value.createNativeBookmark(this, this.realm);
                        if (this.jsTypeName === 'function') return bk;

                        var _loop = function _loop(p) {
                            var name = p; //work around bug in FF where the scope of p is incorrect
                            var po = _this2.properties[name];
                            if (Object.prototype.hasOwnProperty.call(bk, name)) return 'continue';
                            if (bk[p] !== undefined) return 'continue';

                            (0, _defineProperty2.default)(bk, p, {
                                get: function get() {
                                    var c = _this2.properties[name].value;
                                    return c === undefined ? undefined : c.toNative();
                                },
                                set: function set(v) {
                                    _this2.properties[name].value = Value.fromNative(v, _this2.realm);
                                },
                                enumerable: po.enumerable,
                                configurable: po.configurable
                            });
                        };

                        for (var p in this.properties) {
                            var _ret = _loop(p);

                            if (_ret === 'continue') continue;
                        }
                        return bk;
                    }
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.delegateYield(this.toPrimitiveValue(), 't0', 1);

                                    case 1:
                                        _context2.t1 = other;
                                        return _context2.delegateYield(_context2.t0.add(_context2.t1), 't2', 3);

                                    case 3:
                                        return _context2.abrupt('return', _context2.t2);

                                    case 4:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, add, this);
                    })
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        var hint, pv, pthis;
                        return _regenerator2.default.wrap(function doubleEquals$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        if (!(other instanceof PrimitiveValue)) {
                                            _context3.next = 6;
                                            break;
                                        }

                                        hint = other.jsTypeName == 'string' ? 'string' : 'number';
                                        return _context3.delegateYield(this.toPrimitiveValue(hint), 't0', 3);

                                    case 3:
                                        pv = _context3.t0;
                                        return _context3.delegateYield(pv.doubleEquals(other), 't1', 5);

                                    case 5:
                                        return _context3.abrupt('return', _context3.t1);

                                    case 6:
                                        return _context3.delegateYield(this.toPrimitiveValue('string'), 't2', 7);

                                    case 7:
                                        pthis = _context3.t2;
                                        return _context3.delegateYield(pthis.doubleEquals(other), 't3', 9);

                                    case 9:
                                        return _context3.abrupt('return', _context3.t3);

                                    case 10:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'inOperator',
                    value: _regenerator2.default.mark(function inOperator(str) {
                        var svalue;
                        return _regenerator2.default.wrap(function inOperator$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.delegateYield(str.toStringValue(), 't0', 1);

                                    case 1:
                                        svalue = _context4.t0;
                                        return _context4.abrupt('return', this.has(svalue.toNative()) ? Value.true : Value.false);

                                    case 3:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, inOperator, this);
                    })
                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm, ctxthis) {
                        var existing;
                        return _regenerator2.default.wrap(function get$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        existing = this.properties[name];

                                        if (existing) {
                                            _context5.next = 3;
                                            break;
                                        }

                                        return _context5.abrupt('return', Value.undef);

                                    case 3:
                                        if (!existing.direct) {
                                            _context5.next = 5;
                                            break;
                                        }

                                        return _context5.abrupt('return', existing.value);

                                    case 5:
                                        return _context5.delegateYield(existing.getValue(ctxthis || this), 't0', 6);

                                    case 6:
                                        return _context5.abrupt('return', _context5.t0);

                                    case 7:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'getImmediate',
                    value: function getImmediate(name, realm, ctxthis) {
                        var existing = this.properties[name];
                        if (!existing) return Value.undef;
                        if (existing.direct) return existing.value;
                        return GenDash.syncGenHelper(existing.getValue(ctxthis || this));
                    }
                }, {
                    key: 'instanceOf',
                    value: _regenerator2.default.mark(function instanceOf(other, realm) {
                        return _regenerator2.default.wrap(function instanceOf$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.delegateYield(other.constructorOf(this, realm), 't0', 1);

                                    case 1:
                                        return _context6.abrupt('return', _context6.t0);

                                    case 2:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, instanceOf, this);
                    })
                }, {
                    key: 'constructorOf',
                    value: _regenerator2.default.mark(function constructorOf(what, realm) {
                        var target, pt, checked;
                        return _regenerator2.default.wrap(function constructorOf$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        return _context7.delegateYield(this.get('prototype'), 't0', 1);

                                    case 1:
                                        target = _context7.t0;
                                        pt = what.getPrototype(realm);
                                        checked = [];

                                    case 4:
                                        if (!pt) {
                                            _context7.next = 13;
                                            break;
                                        }

                                        if (!(pt === target)) {
                                            _context7.next = 7;
                                            break;
                                        }

                                        return _context7.abrupt('return', Value.true);

                                    case 7:
                                        checked.push(pt);
                                        pt = pt.getPrototype(realm);

                                        if (!(checked.indexOf(pt) !== -1)) {
                                            _context7.next = 11;
                                            break;
                                        }

                                        return _context7.abrupt('return', Value.false);

                                    case 11:
                                        _context7.next = 4;
                                        break;

                                    case 13:
                                        return _context7.abrupt('return', Value.false);

                                    case 14:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, constructorOf, this);
                    })
                }, {
                    key: 'observableProperties',
                    value: _regenerator2.default.mark(function observableProperties(realm) {
                        var p;
                        return _regenerator2.default.wrap(function observableProperties$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        _context8.t0 = _regenerator2.default.keys(this.properties);

                                    case 1:
                                        if ((_context8.t1 = _context8.t0()).done) {
                                            _context8.next = 9;
                                            break;
                                        }

                                        p = _context8.t1.value;

                                        if (this.properties[p].enumerable) {
                                            _context8.next = 5;
                                            break;
                                        }

                                        return _context8.abrupt('continue', 1);

                                    case 5:
                                        _context8.next = 7;
                                        return this.fromNative(p);

                                    case 7:
                                        _context8.next = 1;
                                        break;

                                    case 9:
                                        return _context8.abrupt('return');

                                    case 10:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, observableProperties, this);
                    })
                }, {
                    key: 'getPropertyValueMap',
                    value: function getPropertyValueMap() {
                        var list = {};
                        for (var _p in this.properties) {
                            var v = this.properties[_p];
                            if (v.value) {
                                list[_p] = v.value;
                            }
                        }
                        return list;
                    }
                }, {
                    key: 'hasOwnProperty',
                    value: function hasOwnProperty(name) {
                        return Object.prototype.hasOwnProperty.call(this.properties, name);
                    }
                }, {
                    key: 'setPrototype',
                    value: function setPrototype(val) {
                        if (!this.properties) return this.eraseAndSetPrototype(val);
                        if (val === null || val === undefined || val instanceof NullValue) {
                            (0, _setPrototypeOf2.default)(this.properties, null);
                            this.proto = null;
                            return;
                        }
                        this.proto = val;
                        (0, _setPrototypeOf2.default)(this.properties, val.properties);
                    }
                }, {
                    key: 'eraseAndSetPrototype',
                    value: function eraseAndSetPrototype(val) {
                        if (val === null || val === undefined || val instanceof NullValue) {
                            this.proto = null;
                            this.properties = (0, _create2.default)(null);
                        } else {
                            this.proto = val;
                            this.properties = (0, _create2.default)(val.properties);
                        }
                    }
                }, {
                    key: 'getPrototype',
                    value: function getPrototype() {
                        return this.proto;
                    }
                }, {
                    key: 'toPrimitiveValue',
                    value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
                        var methodNames, _iterator, _isArray, _i, _ref, _name, method, rescr, res;

                        return _regenerator2.default.wrap(function toPrimitiveValue$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        methodNames = undefined;

                                        if (preferedType == 'string') {
                                            methodNames = ['toString', 'valueOf'];
                                        } else {
                                            methodNames = ['valueOf', 'toString'];
                                        }

                                        _iterator = methodNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

                                    case 3:
                                        if (!_isArray) {
                                            _context9.next = 9;
                                            break;
                                        }

                                        if (!(_i >= _iterator.length)) {
                                            _context9.next = 6;
                                            break;
                                        }

                                        return _context9.abrupt('break', 36);

                                    case 6:
                                        _ref = _iterator[_i++];
                                        _context9.next = 13;
                                        break;

                                    case 9:
                                        _i = _iterator.next();

                                        if (!_i.done) {
                                            _context9.next = 12;
                                            break;
                                        }

                                        return _context9.abrupt('break', 36);

                                    case 12:
                                        _ref = _i.value;

                                    case 13:
                                        _name = _ref;
                                        return _context9.delegateYield(this.get(_name), 't0', 15);

                                    case 15:
                                        method = _context9.t0;

                                        if (!(method && method.call)) {
                                            _context9.next = 34;
                                            break;
                                        }

                                        return _context9.delegateYield(method.call(this, [], this.realm.globalScope), 't1', 18);

                                    case 18:
                                        _context9.next = 20;
                                        return _context9.t1;

                                    case 20:
                                        rescr = _context9.sent;
                                        //TODO: There should be more aruments here
                                        res = Value.undef;

                                        if (rescr instanceof CompletionRecord) {
                                            _context9.next = 26;
                                            break;
                                        }

                                        res = rescr;
                                        _context9.next = 32;
                                        break;

                                    case 26:
                                        if (!(rescr.type == CompletionRecord.RETURN)) {
                                            _context9.next = 30;
                                            break;
                                        }

                                        res = rescr.value;
                                        _context9.next = 32;
                                        break;

                                    case 30:
                                        if (!(rescr.type != CompletionRecord.NORMAL)) {
                                            _context9.next = 32;
                                            break;
                                        }

                                        return _context9.abrupt('continue', 34);

                                    case 32:
                                        if (!(res.specTypeName !== 'object')) {
                                            _context9.next = 34;
                                            break;
                                        }

                                        return _context9.abrupt('return', res);

                                    case 34:
                                        _context9.next = 3;
                                        break;

                                    case 36:
                                        _context9.next = 38;
                                        return CompletionRecord.makeTypeError(this.realm, 'Cannot convert object to primitive value');

                                    case 38:
                                        return _context9.abrupt('return', _context9.sent);

                                    case 39:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, toPrimitiveValue, this);
                    })
                }, {
                    key: 'toNumberValue',
                    value: _regenerator2.default.mark(function toNumberValue() {
                        var prim;
                        return _regenerator2.default.wrap(function toNumberValue$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        return _context10.delegateYield(this.toPrimitiveValue('number'), 't0', 1);

                                    case 1:
                                        prim = _context10.t0;
                                        return _context10.delegateYield(prim.toNumberValue(), 't1', 3);

                                    case 3:
                                        return _context10.abrupt('return', _context10.t1);

                                    case 4:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, toNumberValue, this);
                    })
                }, {
                    key: 'toObjectValue',
                    value: _regenerator2.default.mark(function toObjectValue(realm) {
                        return _regenerator2.default.wrap(function toObjectValue$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        return _context11.abrupt('return', this);

                                    case 1:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, toObjectValue, this);
                    })
                }, {
                    key: 'toStringValue',
                    value: _regenerator2.default.mark(function toStringValue() {
                        var prim, gen;
                        return _regenerator2.default.wrap(function toStringValue$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        return _context12.delegateYield(this.toPrimitiveValue('string'), 't0', 1);

                                    case 1:
                                        prim = _context12.t0;
                                        gen = prim.toStringValue();
                                        return _context12.delegateYield(gen, 't1', 4);

                                    case 4:
                                        return _context12.abrupt('return', _context12.t1);

                                    case 5:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, toStringValue, this);
                    })
                }, {
                    key: 'debugString',
                    get: function get() {
                        var strProps = ['{', '[', this.clazz, ']'];
                        var delim = [];
                        if (this.wellKnownName) {
                            strProps.push('(', this.wellKnownName, ')');
                        }
                        if (this.proto) {
                            delim.push('[[Prototype]]: ' + (this.proto.wellKnownName || this.proto.clazz || this.proto.jsTypeName));
                        }
                        for (var n in this.properties) {
                            if (!Object.prototype.hasOwnProperty.call(this.properties, n)) continue;
                            var val = this.properties[n].value;
                            if (this.properties[n].getter || this.properties[n].setter) delim.push(n + ': [Getter/Setter]');else if (val.specTypeName === 'object') delim.push(n + ': [Object]');else if (val.specTypeName === 'function') delim.push(n + ': [Function]');else delim.push(n + ': ' + val.debugString);
                        }
                        strProps.push(delim.join(', '));
                        strProps.push('} ]');
                        return strProps.join(' ');
                    }
                }, {
                    key: 'truthy',
                    get: function get() {
                        return true;
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        if (typeof this.call !== 'function') return 'object';
                        return 'function';
                    }
                }, {
                    key: 'specTypeName',
                    get: function get() {
                        return 'object';
                    }
                }]);
                return ObjectValue;
            }(Value);

            ObjectValue.prototype.clazz = 'Object';

            module.exports = ObjectValue;

            /***/ },
        /* 121 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(122), __esModule: true };

            /***/ },
        /* 122 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(123);
            module.exports = __webpack_require__(18).Object.getPrototypeOf;

            /***/ },
        /* 123 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.9 Object.getPrototypeOf(O)
            var toObject        = __webpack_require__(53)
                , $getPrototypeOf = __webpack_require__(52);

            __webpack_require__(124)('getPrototypeOf', function(){
                return function getPrototypeOf(it){
                    return $getPrototypeOf(toObject(it));
                };
            });

            /***/ },
        /* 124 */
        /***/ function(module, exports, __webpack_require__) {

            // most Object methods by ES6 should accept primitives
            var $export = __webpack_require__(16)
                , core    = __webpack_require__(18)
                , fails   = __webpack_require__(27);
            module.exports = function(KEY, exec){
                var fn  = (core.Object || {})[KEY] || Object[KEY]
                    , exp = {};
                exp[KEY] = exec(fn);
                $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
            };

            /***/ },
        /* 125 */
        /***/ function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function (self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
            };

            /***/ },
        /* 126 */
        /***/ function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _setPrototypeOf = __webpack_require__(75);

            var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

            var _create = __webpack_require__(78);

            var _create2 = _interopRequireDefault(_create);

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function (subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
                }

                subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
            };

            /***/ },
        /* 127 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);

            var serial = 0;

            //TODO: We should call this a PropertyDescriptor, not a variable.

            var PropertyDescriptor = function () {
                function PropertyDescriptor(value, enumerable) {
                    (0, _classCallCheck3.default)(this, PropertyDescriptor);

                    this.value = value;
                    this.serial = serial++;
                    this.configurable = true;
                    this.enumerable = enumerable !== undefined ? !!enumerable : true;
                    this.writable = true;
                    this.getter = undefined;
                    this.setter = undefined;
                }

                (0, _createClass3.default)(PropertyDescriptor, [{
                    key: 'getValue',
                    value: _regenerator2.default.mark(function getValue(thiz) {
                        return _regenerator2.default.wrap(function getValue$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        thiz = thiz || Value.null;

                                        if (!this.getter) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.delegateYield(this.getter.call(thiz, []), 't0', 3);

                                    case 3:
                                        return _context.abrupt('return', _context.t0);

                                    case 4:
                                        return _context.abrupt('return', this.value);

                                    case 5:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, getValue, this);
                    })
                }, {
                    key: 'setValue',
                    value: _regenerator2.default.mark(function setValue(thiz, to, s) {
                        return _regenerator2.default.wrap(function setValue$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        thiz = thiz || Value.null;

                                        if (!this.setter) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        return _context2.delegateYield(this.setter.call(thiz, [to], s), 't0', 3);

                                    case 3:
                                        return _context2.abrupt('return', _context2.t0);

                                    case 4:
                                        if (this.writable) {
                                            _context2.next = 10;
                                            break;
                                        }

                                        if (!(!s || !s.strict)) {
                                            _context2.next = 7;
                                            break;
                                        }

                                        return _context2.abrupt('return', this.value);

                                    case 7:
                                        _context2.next = 9;
                                        return CompletionRecord.makeTypeError(s.realm, "Can't write to non-writable value.");

                                    case 9:
                                        return _context2.abrupt('return', _context2.sent);

                                    case 10:
                                        this.value = to;
                                        return _context2.abrupt('return', this.value);

                                    case 12:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, setValue, this);
                    })
                }, {
                    key: 'direct',
                    get: function get() {
                        return !this.getter && !this.setter && this.writable;
                    }
                }]);
                return PropertyDescriptor;
            }();

            module.exports = PropertyDescriptor;

            /***/ },
        /* 128 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _stringify = __webpack_require__(129);

            var _stringify2 = _interopRequireDefault(_stringify);

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _create = __webpack_require__(78);

            var _create2 = _interopRequireDefault(_create);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);
            var StringValue = undefined;

            /**
             * Represents a primitive value.
             */

            var PrimitiveValue = function (_Value) {
                (0, _inherits3.default)(PrimitiveValue, _Value);

                function PrimitiveValue(value) {
                    (0, _classCallCheck3.default)(this, PrimitiveValue);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PrimitiveValue).call(this, null));

                    _this.native = value;
                    //Object.defineProperty(this, 'native', {
                    //	'value': value,
                    //	'enumerable': true
                    //});
                    return _this;
                }

                (0, _createClass3.default)(PrimitiveValue, [{
                    key: 'ref',
                    value: function ref(name, realm) {
                        var that = this;
                        var out = (0, _create2.default)(null);
                        out.getValue = _regenerator2.default.mark(function _callee() {
                            return _regenerator2.default.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            return _context.delegateYield(that.get(name, realm), 't0', 1);

                                        case 1:
                                            return _context.abrupt('return', _context.t0);

                                        case 2:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        });
                        out.setValue = _regenerator2.default.mark(function _callee2(to) {
                            return _regenerator2.default.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            return _context2.delegateYield(that.set(name, to, realm), 't0', 1);

                                        case 1:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        });
                        return out;
                    }
                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(what, realm) {
                        return _regenerator2.default.wrap(function get$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.delegateYield(this.derivePrototype(realm).get(what, realm), 't0', 1);

                                    case 1:
                                        return _context3.abrupt('return', _context3.t0);

                                    case 2:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'set',
                    value: _regenerator2.default.mark(function set(what, to, realm) {
                        return _regenerator2.default.wrap(function set$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, set, this);
                    })
                }, {
                    key: 'derivePrototype',

                    //Can't set primative properties.
                    value: function derivePrototype(realm) {
                        switch ((0, _typeof3.default)(this.native)) {
                            case 'string':
                                return realm.StringPrototype;
                            case 'number':
                                return realm.NumberPrototype;
                            case 'boolean':
                                return realm.BooleanPrototype;
                        }
                    }
                }, {
                    key: 'toNative',
                    value: function toNative() {
                        return this.native;
                    }
                }, {
                    key: 'asString',
                    value: _regenerator2.default.mark(function asString() {
                        return _regenerator2.default.wrap(function asString$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', this.native.toString());

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, asString, this);
                    })
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        var native, num;
                        return _regenerator2.default.wrap(function doubleEquals$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        native = this.native;

                                        if (!(other instanceof PrimitiveValue)) {
                                            _context6.next = 5;
                                            break;
                                        }

                                        return _context6.abrupt('return', Value.fromNative(this.native == other.native));

                                    case 5:
                                        if (!(typeof native === 'number')) {
                                            _context6.next = 15;
                                            break;
                                        }

                                        if (!(other instanceof StringValue)) {
                                            _context6.next = 12;
                                            break;
                                        }

                                        return _context6.delegateYield(other.toNumberValue(), 't0', 8);

                                    case 8:
                                        num = _context6.t0;
                                        return _context6.abrupt('return', Value.from(native === num.toNative()));

                                    case 12:
                                        return _context6.abrupt('return', Value.false);

                                    case 13:
                                        _context6.next = 18;
                                        break;

                                    case 15:
                                        if (!(typeof native == 'boolean')) {
                                            _context6.next = 18;
                                            break;
                                        }

                                        return _context6.delegateYield(this.toNumberValue().doubleEquals(other), 't1', 17);

                                    case 17:
                                        return _context6.abrupt('return', _context6.t1);

                                    case 18:
                                        return _context6.abrupt('return', Value.false);

                                    case 19:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'tripleEquals',
                    value: _regenerator2.default.mark(function tripleEquals(other) {
                        return _regenerator2.default.wrap(function tripleEquals$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        return _context7.abrupt('return', this.native === other.toNative() ? Value.true : Value.false);

                                    case 1:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, tripleEquals, this);
                    })
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        _context8.t0 = this;
                                        _context8.t1 = this.native;
                                        return _context8.delegateYield(other.toPrimitiveNative(), 't2', 3);

                                    case 3:
                                        _context8.t3 = _context8.t2;
                                        _context8.t4 = _context8.t1 + _context8.t3;
                                        return _context8.abrupt('return', _context8.t0.fromNative.call(_context8.t0, _context8.t4));

                                    case 6:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, add, this);
                    })
                }, {
                    key: 'inOperator',
                    value: _regenerator2.default.mark(function inOperator(other) {
                        return _regenerator2.default.wrap(function inOperator$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        return _context9.abrupt('return', this.fromNative(this.native in other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, inOperator, this);
                    })
                }, {
                    key: 'instanceOf',
                    value: _regenerator2.default.mark(function instanceOf(other) {
                        return _regenerator2.default.wrap(function instanceOf$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        return _context10.abrupt('return', Value.false);

                                    case 1:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, instanceOf, this);
                    })
                }, {
                    key: 'unaryPlus',
                    value: _regenerator2.default.mark(function unaryPlus() {
                        return _regenerator2.default.wrap(function unaryPlus$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        return _context11.abrupt('return', this.fromNative(+this.native));

                                    case 1:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, unaryPlus, this);
                    })
                }, {
                    key: 'unaryMinus',
                    value: _regenerator2.default.mark(function unaryMinus() {
                        return _regenerator2.default.wrap(function unaryMinus$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        return _context12.abrupt('return', this.fromNative(-this.native));

                                    case 1:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, unaryMinus, this);
                    })
                }, {
                    key: 'not',
                    value: _regenerator2.default.mark(function not() {
                        return _regenerator2.default.wrap(function not$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        return _context13.abrupt('return', this.fromNative(!this.native));

                                    case 1:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, not, this);
                    })
                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        var pt;
                        return _regenerator2.default.wrap(function get$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        pt = this.derivePrototype(realm);
                                        return _context14.delegateYield(pt.get(name, realm, this), 't0', 2);

                                    case 2:
                                        return _context14.abrupt('return', _context14.t0);

                                    case 3:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'observableProperties',
                    value: _regenerator2.default.mark(function observableProperties(realm) {
                        return _regenerator2.default.wrap(function observableProperties$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        return _context15.delegateYield(this.derivePrototype(realm).observableProperties(realm), 't0', 1);

                                    case 1:
                                    case 'end':
                                        return _context15.stop();
                                }
                            }
                        }, observableProperties, this);
                    })
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew() {
                        return _regenerator2.default.wrap(function makeThisForNew$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        throw new Error('Naw');

                                    case 1:
                                    case 'end':
                                        return _context16.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })
                }, {
                    key: 'getPrototype',
                    value: function getPrototype(realm) {
                        return this.derivePrototype(realm);
                    }
                }, {
                    key: 'toPrimitiveValue',
                    value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
                        return _regenerator2.default.wrap(function toPrimitiveValue$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        return _context17.abrupt('return', this);

                                    case 1:
                                    case 'end':
                                        return _context17.stop();
                                }
                            }
                        }, toPrimitiveValue, this);
                    })
                }, {
                    key: 'toStringValue',
                    value: _regenerator2.default.mark(function toStringValue() {
                        return _regenerator2.default.wrap(function toStringValue$(_context18) {
                            while (1) {
                                switch (_context18.prev = _context18.next) {
                                    case 0:
                                        if (!(typeof this.native === 'string')) {
                                            _context18.next = 2;
                                            break;
                                        }

                                        return _context18.abrupt('return', this);

                                    case 2:
                                        return _context18.abrupt('return', this.fromNative(String(this.native)));

                                    case 3:
                                    case 'end':
                                        return _context18.stop();
                                }
                            }
                        }, toStringValue, this);
                    })
                }, {
                    key: 'toNumberValue',
                    value: _regenerator2.default.mark(function toNumberValue() {
                        return _regenerator2.default.wrap(function toNumberValue$(_context19) {
                            while (1) {
                                switch (_context19.prev = _context19.next) {
                                    case 0:
                                        if (!(typeof this.native === 'number')) {
                                            _context19.next = 2;
                                            break;
                                        }

                                        return _context19.abrupt('return', this);

                                    case 2:
                                        return _context19.abrupt('return', this.fromNative(Number(this.native)));

                                    case 3:
                                    case 'end':
                                        return _context19.stop();
                                }
                            }
                        }, toNumberValue, this);
                    })
                }, {
                    key: 'debugString',
                    get: function get() {
                        if ((0, _typeof3.default)(this.native) === 'object') return '[native object]';else if (typeof this.native === 'function') return '[native function]';else if (typeof this.native === 'string') return (0, _stringify2.default)(this.native);else return '' + this.native;
                    }
                }, {
                    key: 'truthy',
                    get: function get() {
                        return !!this.native;
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return (0, _typeof3.default)(this.native);
                    }
                }]);
                return PrimitiveValue;
            }(Value);

            module.exports = PrimitiveValue;

            StringValue = __webpack_require__(131);

            /***/ },
        /* 129 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(130), __esModule: true };

            /***/ },
        /* 130 */
        /***/ function(module, exports, __webpack_require__) {

            var core  = __webpack_require__(18)
                , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
            module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
                return $JSON.stringify.apply($JSON, arguments);
            };

            /***/ },
        /* 131 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _get2 = __webpack_require__(132);

            var _get3 = _interopRequireDefault(_get2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var PrimitiveValue = __webpack_require__(128);
            var Value = __webpack_require__(103);
            var NumberValue = undefined;

            var StringValue = function (_PrimitiveValue) {
                (0, _inherits3.default)(StringValue, _PrimitiveValue);

                function StringValue() {
                    (0, _classCallCheck3.default)(this, StringValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(StringValue).apply(this, arguments));
                }

                (0, _createClass3.default)(StringValue, [{
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        var idx;
                        return _regenerator2.default.wrap(function get$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        idx = Number(name);

                                        if (isNaN(idx)) {
                                            _context.next = 3;
                                            break;
                                        }

                                        return _context.abrupt('return', StringValue.fromNative(this.native[idx]));

                                    case 3:
                                        if (!(name === 'length')) {
                                            _context.next = 5;
                                            break;
                                        }

                                        return _context.abrupt('return', StringValue.fromNative(this.native.length));

                                    case 5:
                                        return _context.delegateYield((0, _get3.default)((0, _getPrototypeOf2.default)(StringValue.prototype), 'get', this).call(this, name, realm), 't0', 6);

                                    case 6:
                                        return _context.abrupt('return', _context.t0);

                                    case 7:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        var rv;
                        return _regenerator2.default.wrap(function doubleEquals$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        if (!(other instanceof StringValue)) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        return _context2.abrupt('return', Value.fromNative(this.native == other.native));

                                    case 4:
                                        if (!(other instanceof NumberValue)) {
                                            _context2.next = 9;
                                            break;
                                        }

                                        return _context2.delegateYield(this.toNumberValue(), 't0', 6);

                                    case 6:
                                        rv = _context2.t0;
                                        return _context2.delegateYield(rv.doubleEquals(other), 't1', 8);

                                    case 8:
                                        return _context2.abrupt('return', _context2.t1);

                                    case 9:
                                        return _context2.abrupt('return', Value.false);

                                    case 10:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'gt',
                    value: _regenerator2.default.mark(function gt(other) {
                        return _regenerator2.default.wrap(function gt$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        _context3.t0 = this;
                                        _context3.t1 = this.native;
                                        return _context3.delegateYield(other.toStringNative(), 't2', 3);

                                    case 3:
                                        _context3.t3 = _context3.t2;
                                        _context3.t4 = _context3.t1 > _context3.t3;
                                        return _context3.abrupt('return', _context3.t0.fromNative.call(_context3.t0, _context3.t4));

                                    case 6:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, gt, this);
                    })
                }, {
                    key: 'lt',
                    value: _regenerator2.default.mark(function lt(other) {
                        return _regenerator2.default.wrap(function lt$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        _context4.t0 = this;
                                        _context4.t1 = this.native;
                                        return _context4.delegateYield(other.toStringNative(), 't2', 3);

                                    case 3:
                                        _context4.t3 = _context4.t2;
                                        _context4.t4 = _context4.t1 < _context4.t3;
                                        return _context4.abrupt('return', _context4.t0.fromNative.call(_context4.t0, _context4.t4));

                                    case 6:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, lt, this);
                    })
                }, {
                    key: 'gte',
                    value: _regenerator2.default.mark(function gte(other) {
                        return _regenerator2.default.wrap(function gte$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        _context5.t0 = this;
                                        _context5.t1 = this.native;
                                        return _context5.delegateYield(other.toStringNative(), 't2', 3);

                                    case 3:
                                        _context5.t3 = _context5.t2;
                                        _context5.t4 = _context5.t1 >= _context5.t3;
                                        return _context5.abrupt('return', _context5.t0.fromNative.call(_context5.t0, _context5.t4));

                                    case 6:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, gte, this);
                    })
                }, {
                    key: 'lte',
                    value: _regenerator2.default.mark(function lte(other) {
                        return _regenerator2.default.wrap(function lte$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        _context6.t0 = this;
                                        _context6.t1 = this.native;
                                        return _context6.delegateYield(other.toStringNative(), 't2', 3);

                                    case 3:
                                        _context6.t3 = _context6.t2;
                                        _context6.t4 = _context6.t1 <= _context6.t3;
                                        return _context6.abrupt('return', _context6.t0.fromNative.call(_context6.t0, _context6.t4));

                                    case 6:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, lte, this);
                    })
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        _context7.t0 = this;
                                        _context7.t1 = this.native;
                                        return _context7.delegateYield(other.toPrimitiveNative('string'), 't2', 3);

                                    case 3:
                                        _context7.t3 = _context7.t2;
                                        _context7.t4 = _context7.t1 + _context7.t3;
                                        return _context7.abrupt('return', _context7.t0.fromNative.call(_context7.t0, _context7.t4));

                                    case 6:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, add, this);
                    })
                }]);
                return StringValue;
            }(PrimitiveValue);

            module.exports = StringValue;

            NumberValue = __webpack_require__(136);

            /***/ },
        /* 132 */
        /***/ function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _getOwnPropertyDescriptor = __webpack_require__(133);

            var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

                if (desc === undefined) {
                    var parent = (0, _getPrototypeOf2.default)(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            /***/ },
        /* 133 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(134), __esModule: true };

            /***/ },
        /* 134 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(135);
            var $Object = __webpack_require__(18).Object;
            module.exports = function getOwnPropertyDescriptor(it, key){
                return $Object.getOwnPropertyDescriptor(it, key);
            };

            /***/ },
        /* 135 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
            var toIObject                 = __webpack_require__(39)
                , $getOwnPropertyDescriptor = __webpack_require__(66).f;

            __webpack_require__(124)('getOwnPropertyDescriptor', function(){
                return function getOwnPropertyDescriptor(it, key){
                    return $getOwnPropertyDescriptor(toIObject(it), key);
                };
            });

            /***/ },
        /* 136 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var PrimitiveValue = __webpack_require__(128);
            var Value = __webpack_require__(103);
            var StringValue = undefined;

            var NumberValue = function (_PrimitiveValue) {
                (0, _inherits3.default)(NumberValue, _PrimitiveValue);

                function NumberValue() {
                    (0, _classCallCheck3.default)(this, NumberValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(NumberValue).apply(this, arguments));
                }

                (0, _createClass3.default)(NumberValue, [{
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        var on;
                        return _regenerator2.default.wrap(function doubleEquals$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (!(other instanceof NumberValue)) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.fromNative(this.native == other.native));

                                    case 4:
                                        if (!(other instanceof StringValue)) {
                                            _context.next = 11;
                                            break;
                                        }

                                        return _context.delegateYield(other.toNumberValue(), 't0', 6);

                                    case 6:
                                        on = _context.t0;
                                        return _context.delegateYield(this.doubleEquals(on), 't1', 8);

                                    case 8:
                                        return _context.abrupt('return', _context.t1);

                                    case 11:
                                        return _context.delegateYield(other.toNumberValue(), 't2', 12);

                                    case 12:
                                        on = _context.t2;
                                        return _context.delegateYield(this.doubleEquals(on), 't3', 14);

                                    case 14:
                                        return _context.abrupt('return', _context.t3);

                                    case 15:
                                        return _context.abrupt('return', Value.false);

                                    case 16:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        _context2.t0 = this;
                                        _context2.t1 = this.native;
                                        return _context2.delegateYield(other.toPrimitiveNative(), 't2', 3);

                                    case 3:
                                        _context2.t3 = _context2.t2;
                                        _context2.t4 = _context2.t1 + _context2.t3;
                                        return _context2.abrupt('return', _context2.t0.fromNative.call(_context2.t0, _context2.t4));

                                    case 6:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, add, this);
                    })
                }]);
                return NumberValue;
            }(PrimitiveValue);

            module.exports = NumberValue;

            StringValue = __webpack_require__(131);

            /***/ },
        /* 137 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EmptyValue = __webpack_require__(138);
            var Value = __webpack_require__(103);

            var NullValue = function (_EmptyValue) {
                (0, _inherits3.default)(NullValue, _EmptyValue);

                function NullValue() {
                    (0, _classCallCheck3.default)(this, NullValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(NullValue).apply(this, arguments));
                }

                (0, _createClass3.default)(NullValue, [{
                    key: 'toNative',
                    value: function toNative() {
                        return null;
                    }
                }, {
                    key: 'tripleEquals',
                    value: _regenerator2.default.mark(function tripleEquals(other, realm) {
                        return _regenerator2.default.wrap(function tripleEquals$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.abrupt('return', other instanceof NullValue ? Value.true : Value.false);

                                    case 1:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, tripleEquals, this);
                    })
                }, {
                    key: 'asString',
                    value: _regenerator2.default.mark(function asString() {
                        return _regenerator2.default.wrap(function asString$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.abrupt('return', 'null');

                                    case 1:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, asString, this);
                    })
                }, {
                    key: 'toPrimitiveValue',
                    value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
                        return _regenerator2.default.wrap(function toPrimitiveValue$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.abrupt('return', this);

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, toPrimitiveValue, this);
                    })
                }, {
                    key: 'toNumberValue',
                    value: _regenerator2.default.mark(function toNumberValue() {
                        return _regenerator2.default.wrap(function toNumberValue$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', Value.zero);

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, toNumberValue, this);
                    })
                }, {
                    key: 'toStringValue',
                    value: _regenerator2.default.mark(function toStringValue() {
                        return _regenerator2.default.wrap(function toStringValue$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', Value.fromNative('null'));

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, toStringValue, this);
                    })
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return 'object';
                    }
                }, {
                    key: 'specTypeName',
                    get: function get() {
                        return 'null';
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        return 'null';
                    }
                }]);
                return NullValue;
            }(EmptyValue);

            module.exports = NullValue;

            /***/ },
        /* 138 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var BridgeValue = __webpack_require__(139);
            var CompletionRecord = __webpack_require__(115);

            var EmptyValue = function (_Value) {
                (0, _inherits3.default)(EmptyValue, _Value);

                function EmptyValue() {
                    (0, _classCallCheck3.default)(this, EmptyValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(EmptyValue).call(this, null));
                }

                (0, _createClass3.default)(EmptyValue, [{
                    key: 'not',
                    value: _regenerator2.default.mark(function not() {
                        return _regenerator2.default.wrap(function not$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.abrupt('return', Value.fromNative(true));

                                    case 1:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, not, this);
                    })
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        return _regenerator2.default.wrap(function doubleEquals$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        if (!(other instanceof EmptyValue)) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        return _context2.abrupt('return', Value.true);

                                    case 4:
                                        if (!(other instanceof BridgeValue)) {
                                            _context2.next = 8;
                                            break;
                                        }

                                        return _context2.abrupt('return', this.fromNative(this.toNative() == other.toNative()));

                                    case 8:
                                        return _context2.abrupt('return', Value.false);

                                    case 9:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'observableProperties',
                    value: _regenerator2.default.mark(function observableProperties(realm) {
                        return _regenerator2.default.wrap(function observableProperties$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.abrupt('return');

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, observableProperties, this);
                    })
                }, {
                    key: 'instanceOf',
                    value: _regenerator2.default.mark(function instanceOf() {
                        return _regenerator2.default.wrap(function instanceOf$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', Value.false);

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, instanceOf, this);
                    })

                    /**
                     * @param {String} name
                     * @param {Realm} realm
                     * @returns {CompletionRecord} Indexing empty values is a type error.
                     */

                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        var str, err;
                        return _regenerator2.default.wrap(function get$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        str = 'Cannot read property \'' + name + '\' of ' + this.specTypeName;
                                        err = CompletionRecord.makeTypeError(realm, str);
                                        return _context5.delegateYield(err.addExtra({ code: 'IndexEmpty', target: this, prop: name }), 't0', 3);

                                    case 3:
                                        return _context5.abrupt('return', err);

                                    case 4:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'truthy',
                    get: function get() {
                        return false;
                    }
                }]);
                return EmptyValue;
            }(Value);

            module.exports = EmptyValue;

            /***/ },
        /* 139 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _create = __webpack_require__(78);

            var _create2 = _interopRequireDefault(_create);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);
            /**
             * Represents a value that maps directly to an untrusted local value.
             */

            var BridgeValue = function (_Value) {
                (0, _inherits3.default)(BridgeValue, _Value);

                function BridgeValue(value) {
                    (0, _classCallCheck3.default)(this, BridgeValue);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(BridgeValue).call(this));

                    _this.native = value;
                    return _this;
                }

                (0, _createClass3.default)(BridgeValue, [{
                    key: 'makeBridge',
                    value: function makeBridge(value) {
                        return BridgeValue.make(value);
                    }
                }, {
                    key: 'ref',
                    value: function ref(name) {
                        var that = this;
                        var out = (0, _create2.default)(null);
                        var str = function str(value) {
                            return that.native[name] = value.toNative();
                        };
                        out.getValue = _regenerator2.default.mark(function _callee() {
                            return _regenerator2.default.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            return _context.abrupt('return', that.native[name]);

                                        case 1:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        });
                        out.setValue = _regenerator2.default.mark(function _callee2(to) {
                            return _regenerator2.default.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            return _context2.abrupt('return', str(to));

                                        case 1:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        });

                        return out;
                    }
                }, {
                    key: 'toNative',
                    value: function toNative() {
                        return this.native;
                    }
                }, {
                    key: 'asString',
                    value: _regenerator2.default.mark(function asString() {
                        return _regenerator2.default.wrap(function asString$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.abrupt('return', this.native.toString());

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, asString, this);
                    })
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        return _regenerator2.default.wrap(function doubleEquals$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', this.makeBridge(this.native == other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'tripleEquals',
                    value: _regenerator2.default.mark(function tripleEquals(other) {
                        return _regenerator2.default.wrap(function tripleEquals$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', this.makeBridge(this.native === other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, tripleEquals, this);
                    })
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.abrupt('return', this.makeBridge(this.native + other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, add, this);
                    })
                }, {
                    key: 'subtract',
                    value: _regenerator2.default.mark(function subtract(other) {
                        return _regenerator2.default.wrap(function subtract$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        return _context7.abrupt('return', this.makeBridge(this.native - other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, subtract, this);
                    })
                }, {
                    key: 'multiply',
                    value: _regenerator2.default.mark(function multiply(other) {
                        return _regenerator2.default.wrap(function multiply$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        return _context8.abrupt('return', this.makeBridge(this.native * other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, multiply, this);
                    })
                }, {
                    key: 'divide',
                    value: _regenerator2.default.mark(function divide(other) {
                        return _regenerator2.default.wrap(function divide$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        return _context9.abrupt('return', this.makeBridge(this.native / other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, divide, this);
                    })
                }, {
                    key: 'mod',
                    value: _regenerator2.default.mark(function mod(other) {
                        return _regenerator2.default.wrap(function mod$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        return _context10.abrupt('return', this.makeBridge(this.native % other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, mod, this);
                    })
                }, {
                    key: 'shiftLeft',
                    value: _regenerator2.default.mark(function shiftLeft(other) {
                        return _regenerator2.default.wrap(function shiftLeft$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        return _context11.abrupt('return', this.makeBridge(this.native << other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, shiftLeft, this);
                    })
                }, {
                    key: 'shiftRight',
                    value: _regenerator2.default.mark(function shiftRight(other) {
                        return _regenerator2.default.wrap(function shiftRight$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        return _context12.abrupt('return', this.makeBridge(this.native >> other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, shiftRight, this);
                    })
                }, {
                    key: 'shiftRightZF',
                    value: _regenerator2.default.mark(function shiftRightZF(other) {
                        return _regenerator2.default.wrap(function shiftRightZF$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        return _context13.abrupt('return', this.makeBridge(this.native >>> other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, shiftRightZF, this);
                    })
                }, {
                    key: 'bitAnd',
                    value: _regenerator2.default.mark(function bitAnd(other) {
                        return _regenerator2.default.wrap(function bitAnd$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        return _context14.abrupt('return', this.makeBridge(this.native & other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, bitAnd, this);
                    })
                }, {
                    key: 'bitOr',
                    value: _regenerator2.default.mark(function bitOr(other) {
                        return _regenerator2.default.wrap(function bitOr$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        return _context15.abrupt('return', this.makeBridge(this.native | other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context15.stop();
                                }
                            }
                        }, bitOr, this);
                    })
                }, {
                    key: 'bitXor',
                    value: _regenerator2.default.mark(function bitXor(other) {
                        return _regenerator2.default.wrap(function bitXor$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        return _context16.abrupt('return', this.makeBridge(this.native ^ other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context16.stop();
                                }
                            }
                        }, bitXor, this);
                    })
                }, {
                    key: 'gt',
                    value: _regenerator2.default.mark(function gt(other) {
                        return _regenerator2.default.wrap(function gt$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        return _context17.abrupt('return', this.makeBridge(this.native > other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context17.stop();
                                }
                            }
                        }, gt, this);
                    })
                }, {
                    key: 'lt',
                    value: _regenerator2.default.mark(function lt(other) {
                        return _regenerator2.default.wrap(function lt$(_context18) {
                            while (1) {
                                switch (_context18.prev = _context18.next) {
                                    case 0:
                                        return _context18.abrupt('return', this.makeBridge(this.native < other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context18.stop();
                                }
                            }
                        }, lt, this);
                    })
                }, {
                    key: 'gte',
                    value: _regenerator2.default.mark(function gte(other) {
                        return _regenerator2.default.wrap(function gte$(_context19) {
                            while (1) {
                                switch (_context19.prev = _context19.next) {
                                    case 0:
                                        return _context19.abrupt('return', this.makeBridge(this.native >= other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context19.stop();
                                }
                            }
                        }, gte, this);
                    })
                }, {
                    key: 'lte',
                    value: _regenerator2.default.mark(function lte(other) {
                        return _regenerator2.default.wrap(function lte$(_context20) {
                            while (1) {
                                switch (_context20.prev = _context20.next) {
                                    case 0:
                                        return _context20.abrupt('return', this.makeBridge(this.native <= other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context20.stop();
                                }
                            }
                        }, lte, this);
                    })
                }, {
                    key: 'inOperator',
                    value: _regenerator2.default.mark(function inOperator(other) {
                        return _regenerator2.default.wrap(function inOperator$(_context21) {
                            while (1) {
                                switch (_context21.prev = _context21.next) {
                                    case 0:
                                        return _context21.abrupt('return', this.makeBridge(this.native in other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context21.stop();
                                }
                            }
                        }, inOperator, this);
                    })
                }, {
                    key: 'instanceOf',
                    value: _regenerator2.default.mark(function instanceOf(other) {
                        return _regenerator2.default.wrap(function instanceOf$(_context22) {
                            while (1) {
                                switch (_context22.prev = _context22.next) {
                                    case 0:
                                        return _context22.abrupt('return', this.makeBridge(this.native instanceof other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context22.stop();
                                }
                            }
                        }, instanceOf, this);
                    })
                }, {
                    key: 'unaryPlus',
                    value: _regenerator2.default.mark(function unaryPlus() {
                        return _regenerator2.default.wrap(function unaryPlus$(_context23) {
                            while (1) {
                                switch (_context23.prev = _context23.next) {
                                    case 0:
                                        return _context23.abrupt('return', this.makeBridge(+this.native));

                                    case 1:
                                    case 'end':
                                        return _context23.stop();
                                }
                            }
                        }, unaryPlus, this);
                    })
                }, {
                    key: 'unaryMinus',
                    value: _regenerator2.default.mark(function unaryMinus() {
                        return _regenerator2.default.wrap(function unaryMinus$(_context24) {
                            while (1) {
                                switch (_context24.prev = _context24.next) {
                                    case 0:
                                        return _context24.abrupt('return', this.makeBridge(-this.native));

                                    case 1:
                                    case 'end':
                                        return _context24.stop();
                                }
                            }
                        }, unaryMinus, this);
                    })
                }, {
                    key: 'not',
                    value: _regenerator2.default.mark(function not() {
                        return _regenerator2.default.wrap(function not$(_context25) {
                            while (1) {
                                switch (_context25.prev = _context25.next) {
                                    case 0:
                                        return _context25.abrupt('return', this.makeBridge(!this.native));

                                    case 1:
                                    case 'end':
                                        return _context25.stop();
                                }
                            }
                        }, not, this);
                    })
                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name) {
                        return _regenerator2.default.wrap(function get$(_context26) {
                            while (1) {
                                switch (_context26.prev = _context26.next) {
                                    case 0:
                                        return _context26.abrupt('return', this.makeBridge(this.native[name]));

                                    case 1:
                                    case 'end':
                                        return _context26.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'set',
                    value: _regenerator2.default.mark(function set(name, value) {
                        return _regenerator2.default.wrap(function set$(_context27) {
                            while (1) {
                                switch (_context27.prev = _context27.next) {
                                    case 0:
                                        this.native[name] = value.toNative();

                                    case 1:
                                    case 'end':
                                        return _context27.stop();
                                }
                            }
                        }, set, this);
                    })
                }, {
                    key: 'observableProperties',
                    value: _regenerator2.default.mark(function observableProperties(realm) {
                        var p;
                        return _regenerator2.default.wrap(function observableProperties$(_context28) {
                            while (1) {
                                switch (_context28.prev = _context28.next) {
                                    case 0:
                                        _context28.t0 = _regenerator2.default.keys(this.native);

                                    case 1:
                                        if ((_context28.t1 = _context28.t0()).done) {
                                            _context28.next = 7;
                                            break;
                                        }

                                        p = _context28.t1.value;
                                        _context28.next = 5;
                                        return this.makeBridge(p);

                                    case 5:
                                        _context28.next = 1;
                                        break;

                                    case 7:
                                        return _context28.abrupt('return');

                                    case 8:
                                    case 'end':
                                        return _context28.stop();
                                }
                            }
                        }, observableProperties, this);
                    })

                    /**
                     *
                     * @param {Value} thiz
                     * @param {Value[]} args
                     */

                }, {
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args) {
                        var realArgs, i, result;
                        return _regenerator2.default.wrap(function call$(_context29) {
                            while (1) {
                                switch (_context29.prev = _context29.next) {
                                    case 0:
                                        realArgs = new Array(args.length);

                                        for (i = 0; i < args.length; ++i) {
                                            realArgs[i] = args[i].toNative();
                                        }
                                        _context29.prev = 2;
                                        result = this.native.apply(thiz ? thiz.toNative() : undefined, realArgs);
                                        return _context29.abrupt('return', this.makeBridge(result));

                                    case 7:
                                        _context29.prev = 7;
                                        _context29.t0 = _context29['catch'](2);
                                        result = this.makeBridge(_context29.t0);
                                        return _context29.abrupt('return', new CompletionRecord(CompletionRecord.THROW, result));

                                    case 11:
                                    case 'end':
                                        return _context29.stop();
                                }
                            }
                        }, call, this, [[2, 7]]);
                    })
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew() {
                        return _regenerator2.default.wrap(function makeThisForNew$(_context30) {
                            while (1) {
                                switch (_context30.prev = _context30.next) {
                                    case 0:
                                        return _context30.abrupt('return', this.makeBridge((0, _create2.default)(this.native.prototype)));

                                    case 1:
                                    case 'end':
                                        return _context30.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })
                }, {
                    key: 'debugString',
                    get: function get() {
                        return '[Bridge: ' + this.native + ']';
                    }
                }, {
                    key: 'truthy',
                    get: function get() {
                        return !!this.native;
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return (0, _typeof3.default)(this.native);
                    }
                }], [{
                    key: 'make',
                    value: function make(native) {
                        if (native === undefined) return Value.undef;
                        var prim = Value.fromPrimativeNative(native);
                        if (prim) return prim;

                        if (Value.hasBookmark(native)) {
                            return Value.getBookmark(native);
                        }

                        return new BridgeValue(native);
                    }
                }]);
                return BridgeValue;
            }(Value);

            module.exports = BridgeValue;

            /***/ },
        /* 140 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EmptyValue = __webpack_require__(138);
            var Value = __webpack_require__(103);

            var UndefinedValue = function (_EmptyValue) {
                (0, _inherits3.default)(UndefinedValue, _EmptyValue);

                function UndefinedValue() {
                    (0, _classCallCheck3.default)(this, UndefinedValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(UndefinedValue).apply(this, arguments));
                }

                (0, _createClass3.default)(UndefinedValue, [{
                    key: 'toNative',
                    value: function toNative() {
                        return undefined;
                    }
                }, {
                    key: 'tripleEquals',
                    value: _regenerator2.default.mark(function tripleEquals(other, realm) {
                        return _regenerator2.default.wrap(function tripleEquals$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.abrupt('return', other instanceof UndefinedValue ? Value.true : Value.false);

                                    case 1:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, tripleEquals, this);
                    })
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.abrupt('return', this.fromNative(undefined + other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, add, this);
                    })
                }, {
                    key: 'asString',
                    value: _regenerator2.default.mark(function asString() {
                        return _regenerator2.default.wrap(function asString$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.abrupt('return', 'undefined');

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, asString, this);
                    })
                }, {
                    key: 'toPrimitiveValue',
                    value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
                        return _regenerator2.default.wrap(function toPrimitiveValue$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', this);

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, toPrimitiveValue, this);
                    })
                }, {
                    key: 'toNumberValue',
                    value: _regenerator2.default.mark(function toNumberValue() {
                        return _regenerator2.default.wrap(function toNumberValue$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', Value.nan);

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, toNumberValue, this);
                    })
                }, {
                    key: 'toStringValue',
                    value: _regenerator2.default.mark(function toStringValue() {
                        return _regenerator2.default.wrap(function toStringValue$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.abrupt('return', Value.fromNative('undefined'));

                                    case 1:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, toStringValue, this);
                    })
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return 'undefined';
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        return 'undefined';
                    }
                }]);
                return UndefinedValue;
            }(EmptyValue);

            module.exports = UndefinedValue;

            /***/ },
        /* 141 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var PropertyDescriptor = __webpack_require__(127);
            var ObjectValue = __webpack_require__(120);
            var EvaluatorInstruction = __webpack_require__(142);

            /**
             * Represents a value that maps directly to an untrusted local value.
             */

            var ClosureValue = function (_ObjectValue) {
                (0, _inherits3.default)(ClosureValue, _ObjectValue);

                /**
                 * @param {object} func - AST Node for function
                 * @param {Scope} scope - Functions up-values.
                 */

                function ClosureValue(func, scope) {
                    (0, _classCallCheck3.default)(this, ClosureValue);

                    var realm = scope.realm;

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ClosureValue).call(this, realm, realm.FunctionPrototype));

                    _this.realm = scope.realm;
                    _this.func = func;
                    _this.scope = scope;
                    _this.returnLastValue = false;
                    _this.properties['prototype'] = new PropertyDescriptor(new ObjectValue(realm));
                    _this.properties['name'] = new PropertyDescriptor(_this.fromNative(func.id ? func.id.name : undefined));
                    _this.properties['length'] = new PropertyDescriptor(_this.fromNative(func.params.length));

                    return _this;
                }

                (0, _createClass3.default)(ClosureValue, [{
                    key: 'toNative',
                    value: function toNative() {
                        return Value.createNativeBookmark(this, this.realm);
                    }
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        return _regenerator2.default.wrap(function doubleEquals$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.abrupt('return', other === this ? Value.true : Value.false);

                                    case 1:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })

                    /**
                     *
                     * @param {Value} thiz
                     * @param {Value[]} args
                     * @param {Scope} scope
                     */

                }, {
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope) {
                        var invokeScope, obj, n, v, fn, closure, argn, argvars, argsObj, i, vv, name, opts, result;
                        return _regenerator2.default.wrap(function call$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        //TODO: This way of scoping is entirelly wrong.
                                        if (!scope) scope = this.scope;
                                        invokeScope = undefined;

                                        if (this.boundScope) {
                                            invokeScope = this.boundScope.createChild();
                                            invokeScope.writeTo = this.boundScope.object;
                                            invokeScope.thiz = this.thiz || /* thiz ||*/this.boundScope.thiz;
                                        } else {
                                            invokeScope = scope.createChild();
                                            invokeScope.thiz = this.thiz || thiz;
                                        }

                                        if (this.func.strict === true) invokeScope.strict = true;

                                        obj = this.scope.object;

                                        if (this.func.upvars) {
                                            for (n in this.func.upvars) {
                                                //TODO: There should be a method that does this.
                                                invokeScope.object.rawSetProperty(n, obj.properties[n]);
                                            }
                                        }

                                        //Do Var Hoisting
                                        if (this.func.vars) {
                                            for (v in this.func.vars) {
                                                invokeScope.add(v, Value.undef);
                                                invokeScope.object.properties[v].isVariable = true;
                                            }
                                        }

                                        if (this.func.funcs) {
                                            for (fn in this.func.funcs) {
                                                n = this.func.funcs[fn];
                                                closure = new ClosureValue(n, scope);

                                                invokeScope.add(n.id.name, closure);
                                            }
                                        }

                                        argn = Math.max(args.length, this.func.params.length);
                                        argvars = new Array(argn);
                                        argsObj = new ObjectValue(scope.realm);
                                        i = 0;

                                    case 12:
                                        if (!(i < argn)) {
                                            _context2.next = 25;
                                            break;
                                        }

                                        vv = Value.undef;

                                        if (i < args.length) vv = args[i];

                                        v = new PropertyDescriptor(vv);

                                        argvars[i] = v;

                                        if (!invokeScope.strict) {
                                            _context2.next = 21;
                                            break;
                                        }

                                        return _context2.delegateYield(argsObj.set(i, vv), 't0', 19);

                                    case 19:
                                        _context2.next = 22;
                                        break;

                                    case 21:
                                        argsObj.rawSetProperty(i, v);

                                    case 22:
                                        ++i;
                                        _context2.next = 12;
                                        break;

                                    case 25:
                                        if (invokeScope.strict) {
                                            _context2.next = 27;
                                            break;
                                        }

                                        return _context2.delegateYield(argsObj.set('callee', this), 't1', 27);

                                    case 27:
                                        return _context2.delegateYield(argsObj.set('length', this.fromNative(args.length)), 't2', 28);

                                    case 28:

                                        invokeScope.add('arguments', argsObj);

                                        for (i = 0; i < this.func.params.length; ++i) {
                                            name = this.func.params[i].name;

                                            if (scope.strict) {
                                                //Scope is strict, so we make a copy for the args variable
                                                invokeScope.add(name, i < args.length ? args[i] : Value.undef);
                                            } else {
                                                //Scope isnt strict, magic happens.
                                                invokeScope.object.rawSetProperty(name, argvars[i]);
                                            }
                                        }
                                        opts = { returnLastValue: this.returnLastValue };

                                        if (this.func.nonUserCode) {
                                            opts.yieldPower = -1;
                                        }
                                        _context2.next = 34;
                                        return EvaluatorInstruction.branch('function', this.func.body, invokeScope, opts);

                                    case 34:
                                        result = _context2.sent;
                                        return _context2.abrupt('return', result);

                                    case 36:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'debugString',
                    get: function get() {
                        if (this.func && this.func.id) return '[Function ' + this.func.id.name + ']';
                        return '[Function]';
                    }
                }, {
                    key: 'truthy',
                    get: function get() {
                        return !true;
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return 'function';
                    }
                }, {
                    key: 'specTypeName',
                    get: function get() {
                        return 'object';
                    }
                }]);
                return ClosureValue;
            }(ObjectValue);

            ClosureValue.prototype.clazz = 'Function';

            module.exports = ClosureValue;

            /***/ },
        /* 142 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EvaluatorInstruction = function () {
                (0, _createClass3.default)(EvaluatorInstruction, null, [{
                    key: 'branch',
                    value: function branch(kind, ast, scope, extra) {
                        var ei = new EvaluatorInstruction('branch');
                        ei.kind = kind;
                        ei.ast = ast;
                        ei.scope = scope;
                        ei.extra = extra;
                        return ei;
                    }
                }, {
                    key: 'getEvaluator',
                    value: function getEvaluator() {
                        return new EvaluatorInstruction('getEvaluator');
                    }
                }]);

                function EvaluatorInstruction(type) {
                    (0, _classCallCheck3.default)(this, EvaluatorInstruction);

                    this.type = type;
                }

                (0, _createClass3.default)(EvaluatorInstruction, [{
                    key: 'mark',
                    value: function mark(o) {
                        for (var k in o) {
                            this[k] = o[k];
                        }return this;
                    }
                }]);
                return EvaluatorInstruction;
            }();

            EvaluatorInstruction.stepMinor = new EvaluatorInstruction('step');
            EvaluatorInstruction.stepMajor = new EvaluatorInstruction('step');
            EvaluatorInstruction.stepStatement = new EvaluatorInstruction('step');
            EvaluatorInstruction.waitForFramePop = new EvaluatorInstruction('waitForFramePop');
            EvaluatorInstruction.framePushed = new EvaluatorInstruction('framePushed');

            EvaluatorInstruction.eventLoopBodyStart = new EvaluatorInstruction('event').mark({ event: 'loopBodyStart' });
            module.exports = EvaluatorInstruction;

            /***/ },
        /* 143 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _promise = __webpack_require__(7);

            var _promise2 = _interopRequireDefault(_promise);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EmptyValue = __webpack_require__(138);
            var Value = __webpack_require__(103);

            function defer() {
                var resolve, reject;
                var promise = new _promise2.default(function (a, b) {
                    resolve = a;
                    reject = b;
                });
                return {
                    resolve: resolve,
                    reject: reject,
                    promise: promise
                };
            }

            var FutureValue = function (_Value) {
                (0, _inherits3.default)(FutureValue, _Value);

                function FutureValue(realm) {
                    (0, _classCallCheck3.default)(this, FutureValue);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(FutureValue).call(this, realm));

                    _this.resolved = false;
                    _this.successful = undefined;
                    _this.value = undefined;
                    _this.defered = defer();
                    return _this;
                }

                /**
                 * Creates a new future value wraping the promise p.
                 * @param {Promise} promise
                 */

                (0, _createClass3.default)(FutureValue, [{
                    key: 'resolve',
                    value: function resolve(value) {
                        this.value = value;
                        this.resolved = true;
                        this.successful = true;
                        this.defered.resolve(value);
                    }
                }, {
                    key: 'reject',
                    value: function reject(value) {
                        this.value = value;
                        this.resolved = true;
                        this.successful = false;
                        this.defered.resolve(value);
                    }
                }, {
                    key: 'then',
                    value: function then() {
                        var p = this.defered.promise;
                        return p.then.apply(p, arguments);
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return 'internal:future';
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        return '[Future]';
                    }
                }], [{
                    key: 'make',
                    value: function make(promise) {
                        var fv = new FutureValue(null);
                        promise.then(function (resolved) {
                            fv.resolve(Value.fromNative(resolved));
                        }, function (caught) {
                            fv.reject(Value.fromNative(caught));
                        });
                        return fv;
                    }
                }]);
                return FutureValue;
            }(Value);

            module.exports = FutureValue;

            /***/ },
        /* 144 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var PrimitiveValue = __webpack_require__(128);
            var ObjectValue = __webpack_require__(120);
            var Value = __webpack_require__(103);

            var RegExpValue = function (_ObjectValue) {
                (0, _inherits3.default)(RegExpValue, _ObjectValue);

                function RegExpValue(realm) {
                    (0, _classCallCheck3.default)(this, RegExpValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RegExpValue).call(this, realm, realm.RegExpPrototype));
                }

                (0, _createClass3.default)(RegExpValue, [{
                    key: 'toNative',
                    value: function toNative() {
                        return this.regexp;
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        return this.regexp.toString();
                    }
                }], [{
                    key: 'make',
                    value: function make(regexp, realm) {

                        var av = new RegExpValue(realm);
                        av.regexp = regexp;
                        av.setImmediate('source', Value.fromNative(regexp.source));
                        av.properties['source'].enumerable = false;
                        av.setImmediate('global', Value.fromNative(regexp.global));
                        av.properties['global'].enumerable = false;
                        av.setImmediate('ignoreCase', Value.fromNative(regexp.ignoreCase));
                        av.properties['ignoreCase'].enumerable = false;
                        av.setImmediate('multiline', Value.fromNative(regexp.multiline));
                        av.properties['multiline'].enumerable = false;
                        return av;
                    }
                }]);
                return RegExpValue;
            }(ObjectValue);

            RegExpValue.prototype.clazz = 'RegExp';

            module.exports = RegExpValue;

            /***/ },
        /* 145 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _defineProperty = __webpack_require__(96);

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var PrimitiveValue = __webpack_require__(128);
            var ObjectValue = __webpack_require__(120);
            var Value = __webpack_require__(103);
            var EvaluatorInstruction = __webpack_require__(142);

            var ErrorInstance = function (_ObjectValue) {
                (0, _inherits3.default)(ErrorInstance, _ObjectValue);

                function ErrorInstance() {
                    (0, _classCallCheck3.default)(this, ErrorInstance);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ErrorInstance).apply(this, arguments));
                }

                (0, _createClass3.default)(ErrorInstance, [{
                    key: 'createNativeAnalog',
                    value: function createNativeAnalog() {
                        if (!this.native) {
                            var NativeClass = this.proto.nativeClass || Error;
                            this.native = new NativeClass();

                            var frames = this.native.stack.split(/\n/);
                            var header = frames.shift();
                            while (/at (ErrorInstance.createNativeAnalog|ErrorObject.make|Function.makeTypeError)/.test(frames[0])) {
                                frames.shift();
                            }
                            this.native.stack = header + '\n' + frames.join('\n');
                            for (var k in this.extra) {
                                this.native[k] = this.extra[k];
                            }
                        }
                        return this.native;
                    }
                }, {
                    key: 'toNative',
                    value: function toNative() {
                        var out = this.createNativeAnalog();
                        var msg = this.properties['message'].value;
                        if (msg) out.message = msg.toNative();

                        if (this.properties['stack']) {
                            msg.stack = this.properties['stack'].value.native;
                        }

                        return out;
                    }
                }, {
                    key: 'addExtra',
                    value: _regenerator2.default.mark(function addExtra(extra) {
                        var evaluator, scope, ast, list, _k, v, k;

                        return _regenerator2.default.wrap(function addExtra$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (this.realm.options.extraErrorInfo) {
                                            _context.next = 2;
                                            break;
                                        }

                                        return _context.abrupt('return');

                                    case 2:
                                        _context.next = 4;
                                        return EvaluatorInstruction.getEvaluator();

                                    case 4:
                                        evaluator = _context.sent;

                                        if (!evaluator) {
                                            _context.next = 21;
                                            break;
                                        }

                                        scope = evaluator.topFrame.scope;
                                        ast = extra.ast = evaluator.topFrame.ast;

                                        extra.scope = scope;

                                        if (extra.ast.loc) {
                                            extra.line = extra.ast.loc.start.line;
                                        }

                                        _context.t0 = extra.code;
                                        _context.next = _context.t0 === 'UndefinedVariable' ? 13 : _context.t0 === 'SmartAccessDenied' ? 13 : _context.t0 === 'CallNonFunction' ? 15 : _context.t0 === 'IndexEmpty' ? 20 : 21;
                                        break;

                                    case 13:
                                        extra.candidates = scope.getVariableNames();
                                        return _context.abrupt('break', 21);

                                    case 15:
                                        list = undefined;

                                        if (extra.base && extra.base.getPropertyValueMap) {
                                            list = extra.base.getPropertyValueMap();
                                        } else {
                                            list = scope.object.getPropertyValueMap();
                                        }

                                        extra.candidates = [];
                                        for (_k in list) {
                                            v = list[_k];

                                            if (v && v.isCallable) {
                                                extra.candidates.push(_k);
                                            }
                                        }
                                        return _context.abrupt('break', 21);

                                    case 20:
                                        return _context.abrupt('break', 21);

                                    case 21:
                                        if (this.native) {
                                            for (k in extra) {
                                                if (['ast', 'scope', 'candidates', 'targetAst'].indexOf(k) !== -1) {
                                                    (0, _defineProperty2.default)(this.native, k, {
                                                        value: extra[k],
                                                        enumerable: false
                                                    });
                                                } else {
                                                    this.native[k] = extra[k];
                                                }
                                            }
                                        }
                                        this.extra = extra;

                                    case 23:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, addExtra, this);
                    })
                }]);
                return ErrorInstance;
            }(ObjectValue);

            module.exports = ErrorInstance;

            /***/ },
        /* 146 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _keys = __webpack_require__(147);

            var _keys2 = _interopRequireDefault(_keys);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _get2 = __webpack_require__(132);

            var _get3 = _interopRequireDefault(_get2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var PrimitiveValue = __webpack_require__(128);
            var ObjectValue = __webpack_require__(120);
            var Value = __webpack_require__(103);
            var NumberValue = undefined;

            var ArrayValue = function (_ObjectValue) {
                (0, _inherits3.default)(ArrayValue, _ObjectValue);

                function ArrayValue(realm) {
                    (0, _classCallCheck3.default)(this, ArrayValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ArrayValue).call(this, realm, realm.ArrayPrototype));
                }

                (0, _createClass3.default)(ArrayValue, [{
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        return _regenerator2.default.wrap(function get$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.delegateYield((0, _get3.default)((0, _getPrototypeOf2.default)(ArrayValue.prototype), 'get', this).call(this, name, realm), 't0', 1);

                                    case 1:
                                        return _context.abrupt('return', _context.t0);

                                    case 2:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'adjustLength',
                    value: function adjustLength(name) {
                        if (!isNaN(parseInt(name))) {
                            var length = this.properties.length.value.native;
                            if (name >= length) {
                                this.properties.length.value = Value.fromNative(name + 1);
                            }
                        }
                    }
                }, {
                    key: 'set',
                    value: function set(name, v) {
                        this.adjustLength(name);
                        return (0, _get3.default)((0, _getPrototypeOf2.default)(ArrayValue.prototype), 'set', this).call(this, name, v);
                    }
                }, {
                    key: 'setImmediate',
                    value: function setImmediate(name, v) {
                        this.adjustLength(name);
                        return (0, _get3.default)((0, _getPrototypeOf2.default)(ArrayValue.prototype), 'setImmediate', this).call(this, name, v);
                    }
                }, {
                    key: 'toNative',
                    value: function toNative() {
                        var out = new Array();

                        for (var _iterator = (0, _keys2.default)(this.properties), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var i = _ref;

                            var po = this.properties[i];
                            if (po && po.value) out[i] = po.value.toNative();
                        }
                        return out;
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        if (!this.properties.length) return (0, _get3.default)((0, _getPrototypeOf2.default)(ArrayValue.prototype), 'debugString', this);
                        var length = this.properties.length.value.native;

                        var loop = Math.min(length, 20);
                        var r = new Array(loop);
                        for (var i = 0; i < loop; ++i) {
                            var po = this.properties[i];
                            if (po && po.value) r[i] = po.value.debugString;else r[i] = '';
                        }
                        return '[' + r.join(', ') + (loop < length ? '...' : '') + ']';
                    }
                }], [{
                    key: 'make',
                    value: function make(vals, realm) {

                        var av = new ArrayValue(realm);

                        av.setImmediate('length', Value.fromNative(0));
                        av.properties.length.enumerable = false;

                        for (var i = 0; i < vals.length; ++i) {
                            var v = vals[i];
                            if (!(v instanceof Value)) v = realm.fromNative(v);
                            av.setImmediate(i, v);
                        }
                        return av;
                    }
                }]);
                return ArrayValue;
            }(ObjectValue);

            ArrayValue.prototype.clazz = 'Array';

            module.exports = ArrayValue;

            NumberValue = __webpack_require__(136);

            /***/ },
        /* 147 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(148), __esModule: true };

            /***/ },
        /* 148 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(149);
            module.exports = __webpack_require__(18).Object.keys;

            /***/ },
        /* 149 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.14 Object.keys(O)
            var toObject = __webpack_require__(53)
                , $keys    = __webpack_require__(37);

            __webpack_require__(124)('keys', function(){
                return function keys(it){
                    return $keys(toObject(it));
                };
            });

            /***/ },
        /* 150 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var _marked = [evaluateArrayExpression, evaluateAssignmentExpression, evaulateBinaryExpression, evaluateBlockStatement, evaluateBreakStatement, evaluateCallExpression, evaluateClassExpression, evaluateClassDeclaration, evaluateConditionalExpression, evaluateContinueStatement, evaluateDoWhileStatement, evaluateEmptyStatement, evaluateExpressionStatement, evaluateIdentifier, evaluateIfStatement, genForLoop, evaluateForStatement, evaluateForInStatement, evaluateForOfStatement, evaluateFunctionDeclaration, evaluateFunctionExpression, evaluateLabeledStatement, evaulateLiteral, evaluateLogicalExpression, evaluateMemberExpression, evaluateObjectExpression, evaluateProgram, evaluateReturnStatement, evaluateSequenceExpression, evaluateSwitchStatement, evaluateThisExpression, evaluateThrowStatement, evaluateTryStatement, evaluateUpdateExpression, evaulateUnaryExpression, evaluateVariableDeclaration, genWhileLoop, evaluateWhileStatement, evaluateWithStatement].map(_regenerator2.default.mark);

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);
            var ClosureValue = __webpack_require__(141);
            var ObjectValue = __webpack_require__(120);
            var FutureValue = __webpack_require__(143);
            var RegExpValue = __webpack_require__(144);
            var PropertyDescriptor = __webpack_require__(127);
            var ErrorValue = __webpack_require__(145);
            var ArrayValue = __webpack_require__(146);
            var EvaluatorInstruction = __webpack_require__(142);

            function evaluateArrayExpression(e, n, s) {
                var result, i;
                return _regenerator2.default.wrap(function evaluateArrayExpression$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                //let result = new ObjectValue();
                                result = new Array(n.elements.length);
                                i = 0;

                            case 2:
                                if (!(i < n.elements.length)) {
                                    _context.next = 9;
                                    break;
                                }

                                if (!n.elements[i]) {
                                    _context.next = 6;
                                    break;
                                }

                                return _context.delegateYield(e.branch(n.elements[i], s), 't0', 5);

                            case 5:
                                result[i] = _context.t0;

                            case 6:
                                ++i;
                                _context.next = 2;
                                break;

                            case 9:
                                if (!(e.yieldPower >= 3)) {
                                    _context.next = 12;
                                    break;
                                }

                                _context.next = 12;
                                return EvaluatorInstruction.stepMinor;

                            case 12:
                                return _context.abrupt('return', ArrayValue.make(result, e.realm));

                            case 13:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _marked[0], this);
            }

            function evaluateAssignmentExpression(e, n, s) {
                var realm, ref, argument, value, cur;
                return _regenerator2.default.wrap(function evaluateAssignmentExpression$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                //TODO: Account for not-strict mode
                                realm = s.realm;
                                return _context2.delegateYield(e.resolveRef(n.left, s, n.operator === '='), 't0', 2);

                            case 2:
                                ref = _context2.t0;

                                if (!(!ref && s.strict)) {
                                    _context2.next = 5;
                                    break;
                                }

                                return _context2.abrupt('return', CompletionRecord.makeReferenceError(s.realm, 'Invalid refrence in assignment.'));

                            case 5:
                                return _context2.delegateYield(e.branch(n.right, s), 't1', 6);

                            case 6:
                                argument = _context2.t1;
                                value = undefined;
                                cur = undefined;

                                if (!(e.yieldPower >= 3)) {
                                    _context2.next = 12;
                                    break;
                                }

                                _context2.next = 12;
                                return EvaluatorInstruction.stepMinor;

                            case 12:
                                _context2.t2 = n.operator;
                                _context2.next = _context2.t2 === '=' ? 15 : _context2.t2 === '+=' ? 17 : _context2.t2 === '-=' ? 22 : _context2.t2 === '*=' ? 27 : _context2.t2 === '/=' ? 32 : _context2.t2 === '%=' ? 37 : _context2.t2 === '<<=' ? 42 : _context2.t2 === '>>=' ? 47 : _context2.t2 === '>>>=' ? 52 : _context2.t2 === '|=' ? 57 : _context2.t2 === '&=' ? 62 : _context2.t2 === '^=' ? 67 : 72;
                                break;

                            case 15:
                                value = argument;
                                return _context2.abrupt('break', 73);

                            case 17:
                                return _context2.delegateYield(ref.getValue(), 't3', 18);

                            case 18:
                                cur = _context2.t3;
                                return _context2.delegateYield(cur.add(argument, realm), 't4', 20);

                            case 20:
                                value = _context2.t4;
                                return _context2.abrupt('break', 73);

                            case 22:
                                return _context2.delegateYield(ref.getValue(), 't5', 23);

                            case 23:
                                cur = _context2.t5;
                                return _context2.delegateYield(cur.subtract(argument, realm), 't6', 25);

                            case 25:
                                value = _context2.t6;
                                return _context2.abrupt('break', 73);

                            case 27:
                                return _context2.delegateYield(ref.getValue(), 't7', 28);

                            case 28:
                                cur = _context2.t7;
                                return _context2.delegateYield(cur.multiply(argument, realm), 't8', 30);

                            case 30:
                                value = _context2.t8;
                                return _context2.abrupt('break', 73);

                            case 32:
                                return _context2.delegateYield(ref.getValue(), 't9', 33);

                            case 33:
                                cur = _context2.t9;
                                return _context2.delegateYield(cur.divide(argument, realm), 't10', 35);

                            case 35:
                                value = _context2.t10;
                                return _context2.abrupt('break', 73);

                            case 37:
                                return _context2.delegateYield(ref.getValue(), 't11', 38);

                            case 38:
                                cur = _context2.t11;
                                return _context2.delegateYield(cur.mod(argument, realm), 't12', 40);

                            case 40:
                                value = _context2.t12;
                                return _context2.abrupt('break', 73);

                            case 42:
                                return _context2.delegateYield(ref.getValue(), 't13', 43);

                            case 43:
                                cur = _context2.t13;
                                return _context2.delegateYield(cur.shiftLeft(argument, realm), 't14', 45);

                            case 45:
                                value = _context2.t14;
                                return _context2.abrupt('break', 73);

                            case 47:
                                return _context2.delegateYield(ref.getValue(), 't15', 48);

                            case 48:
                                cur = _context2.t15;
                                return _context2.delegateYield(cur.shiftRight(argument, realm), 't16', 50);

                            case 50:
                                value = _context2.t16;
                                return _context2.abrupt('break', 73);

                            case 52:
                                return _context2.delegateYield(ref.getValue(), 't17', 53);

                            case 53:
                                cur = _context2.t17;
                                return _context2.delegateYield(cur.shiftRightZF(argument, realm), 't18', 55);

                            case 55:
                                value = _context2.t18;
                                return _context2.abrupt('break', 73);

                            case 57:
                                return _context2.delegateYield(ref.getValue(), 't19', 58);

                            case 58:
                                cur = _context2.t19;
                                return _context2.delegateYield(cur.bitOr(argument, realm), 't20', 60);

                            case 60:
                                value = _context2.t20;
                                return _context2.abrupt('break', 73);

                            case 62:
                                return _context2.delegateYield(ref.getValue(), 't21', 63);

                            case 63:
                                cur = _context2.t21;
                                return _context2.delegateYield(cur.bitAnd(argument, realm), 't22', 65);

                            case 65:
                                value = _context2.t22;
                                return _context2.abrupt('break', 73);

                            case 67:
                                return _context2.delegateYield(ref.getValue(), 't23', 68);

                            case 68:
                                cur = _context2.t23;
                                return _context2.delegateYield(cur.bitXor(argument, realm), 't24', 70);

                            case 70:
                                value = _context2.t24;
                                return _context2.abrupt('break', 73);

                            case 72:
                                throw new Error('Unknown assignment operator: ' + n.operator);

                            case 73:
                                if (!ref) {
                                    _context2.next = 77;
                                    break;
                                }

                                return _context2.delegateYield(ref.setValue(value, s), 't25', 75);

                            case 75:
                                _context2.next = 78;
                                break;

                            case 77:
                                return _context2.delegateYield(s.put(n.left.name, value, s), 't26', 78);

                            case 78:
                                return _context2.abrupt('return', value);

                            case 79:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _marked[1], this);
            }

            function evaulateBinaryExpression(e, n, s) {
                var left, right;
                return _regenerator2.default.wrap(function evaulateBinaryExpression$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.delegateYield(e.branch(n.left, s), 't0', 1);

                            case 1:
                                left = _context3.t0;
                                return _context3.delegateYield(e.branch(n.right, s), 't1', 3);

                            case 3:
                                right = _context3.t1;

                                if (!(e.yieldPower >= 4)) {
                                    _context3.next = 7;
                                    break;
                                }

                                _context3.next = 7;
                                return EvaluatorInstruction.stepMinor;

                            case 7:
                                return _context3.delegateYield(e.doBinaryEvaluation(n.operator, left, right, s), 't2', 8);

                            case 8:
                                return _context3.abrupt('return', _context3.t2);

                            case 9:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _marked[2], this);
            }

            function evaluateBlockStatement(e, n, s) {
                var result, _iterator, _isArray, _i, _ref, statement;

                return _regenerator2.default.wrap(function evaluateBlockStatement$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                result = Value.undef;
                                _iterator = n.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

                            case 2:
                                if (!_isArray) {
                                    _context4.next = 8;
                                    break;
                                }

                                if (!(_i >= _iterator.length)) {
                                    _context4.next = 5;
                                    break;
                                }

                                return _context4.abrupt('break', 17);

                            case 5:
                                _ref = _iterator[_i++];
                                _context4.next = 12;
                                break;

                            case 8:
                                _i = _iterator.next();

                                if (!_i.done) {
                                    _context4.next = 11;
                                    break;
                                }

                                return _context4.abrupt('break', 17);

                            case 11:
                                _ref = _i.value;

                            case 12:
                                statement = _ref;
                                return _context4.delegateYield(e.branch(statement, s), 't0', 14);

                            case 14:
                                result = _context4.t0;

                            case 15:
                                _context4.next = 2;
                                break;

                            case 17:
                                return _context4.abrupt('return', result);

                            case 18:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _marked[3], this);
            }

            function evaluateBreakStatement(e, n, s) {
                var label;
                return _regenerator2.default.wrap(function evaluateBreakStatement$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                label = n.label ? n.label.name : undefined;

                                if (!(e.yieldPower >= 1)) {
                                    _context5.next = 4;
                                    break;
                                }

                                _context5.next = 4;
                                return EvaluatorInstruction.stepMinor;

                            case 4:
                                return _context5.abrupt('return', new CompletionRecord(CompletionRecord.BREAK, Value.undef, label));

                            case 5:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _marked[4], this);
            }

            function evaluateCallExpression(e, n, s) {
                var thiz, callee, base, args, _i2, name, err, callResult, result;

                return _regenerator2.default.wrap(function evaluateCallExpression$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                thiz = Value.undef;
                                callee = undefined, base = undefined;

                                if (!(n.callee.type === 'MemberExpression')) {
                                    _context6.next = 13;
                                    break;
                                }

                                return _context6.delegateYield(e.branch(n.callee.object, s), 't0', 4);

                            case 4:
                                thiz = base = _context6.t0;
                                return _context6.delegateYield(e.partialMemberExpression(thiz, n.callee, s), 't1', 6);

                            case 6:
                                callee = _context6.t1;

                                if (!(callee instanceof CompletionRecord)) {
                                    _context6.next = 11;
                                    break;
                                }

                                if (!(callee.type == CompletionRecord.THROW)) {
                                    _context6.next = 10;
                                    break;
                                }

                                return _context6.abrupt('return', callee);

                            case 10:
                                callee = callee.value;

                            case 11:
                                _context6.next = 15;
                                break;

                            case 13:
                                return _context6.delegateYield(e.branch(n.callee, s), 't2', 14);

                            case 14:
                                callee = _context6.t2;

                            case 15:
                                if (!(n.type === 'NewExpression')) {
                                    _context6.next = 22;
                                    break;
                                }

                                return _context6.delegateYield(callee.makeThisForNew(s.realm), 't3', 17);

                            case 17:
                                thiz = _context6.t3;

                                if (!(thiz instanceof CompletionRecord)) {
                                    _context6.next = 22;
                                    break;
                                }

                                if (!(thiz.type == CompletionRecord.THROW)) {
                                    _context6.next = 21;
                                    break;
                                }

                                return _context6.abrupt('return', thiz);

                            case 21:
                                thiz = thiz.value;

                            case 22:
                                if (!(typeof callee.rawCall === 'function')) {
                                    _context6.next = 25;
                                    break;
                                }

                                return _context6.delegateYield(callee.rawCall(n, e, s), 't4', 24);

                            case 24:
                                return _context6.abrupt('return', _context6.t4);

                            case 25:

                                //console.log("Calling", callee, callee.call);

                                args = new Array(n.arguments.length);
                                _i2 = 0;

                            case 27:
                                if (!(_i2 < n.arguments.length)) {
                                    _context6.next = 33;
                                    break;
                                }

                                return _context6.delegateYield(e.branch(n.arguments[_i2], s), 't5', 29);

                            case 29:
                                args[_i2] = _context6.t5;

                            case 30:
                                ++_i2;
                                _context6.next = 27;
                                break;

                            case 33:
                                name = n.callee.srcName || callee.jsTypeName;

                                if (!(e.yieldPower >= 1)) {
                                    _context6.next = 37;
                                    break;
                                }

                                _context6.next = 37;
                                return EvaluatorInstruction.stepMajor;

                            case 37:
                                if (callee.isCallable) {
                                    _context6.next = 41;
                                    break;
                                }

                                err = CompletionRecord.makeTypeError(e.realm, '' + name + ' is not a function');
                                return _context6.delegateYield(err.addExtra({
                                    code: 'CallNonFunction',
                                    target: callee,
                                    targetAst: n.callee,
                                    targetName: name,
                                    base: base
                                }), 't6', 40);

                            case 40:
                                return _context6.abrupt('return', err);

                            case 41:
                                callResult = callee.call(thiz, args, s, {
                                    asConstructor: n.type === 'NewExpression',
                                    callNode: n,
                                    evaluator: e
                                });

                                if (!(callResult instanceof CompletionRecord)) {
                                    _context6.next = 44;
                                    break;
                                }

                                return _context6.abrupt('return', callResult);

                            case 44:
                                if (!(typeof callResult.next !== 'function')) {
                                    _context6.next = 47;
                                    break;
                                }

                                console.log('Generator Failure', callResult);
                                return _context6.abrupt('return', CompletionRecord.makeTypeError(e.realm, '' + name + ' didnt make a generator'));

                            case 47:
                                return _context6.delegateYield(callResult, 't7', 48);

                            case 48:
                                result = _context6.t7;

                                if (!(n.type === 'NewExpression')) {
                                    _context6.next = 57;
                                    break;
                                }

                                if (!(result instanceof Value)) {
                                    _context6.next = 54;
                                    break;
                                }

                                if (!(result.specTypeName === 'undefined')) {
                                    _context6.next = 53;
                                    break;
                                }

                                return _context6.abrupt('return', thiz);

                            case 53:
                                return _context6.abrupt('return', result);

                            case 54:
                                return _context6.abrupt('return', thiz);

                            case 57:
                                return _context6.abrupt('return', result);

                            case 58:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _marked[5], this);
            }

            function evaluateClassExpression(e, n, s) {
                var _this = this;

                var clazz, proto, _loop, _iterator2, _isArray2, _i3, _ref2, _ret;

                return _regenerator2.default.wrap(function evaluateClassExpression$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                clazz = new ObjectValue(e.realm);

                                clazz.call = _regenerator2.default.mark(function _callee() {
                                    return _regenerator2.default.wrap(function _callee$(_context7) {
                                        while (1) {
                                            switch (_context7.prev = _context7.next) {
                                                case 0:
                                                    return _context7.abrupt('return', Value.undef);

                                                case 1:
                                                case 'end':
                                                    return _context7.stop();
                                            }
                                        }
                                    }, _callee, this);
                                });

                                proto = new ObjectValue(e.realm);
                                return _context10.delegateYield(clazz.set('prototype', proto), 't0', 4);

                            case 4:
                                return _context10.delegateYield(proto.set('constructor', clazz), 't1', 5);

                            case 5:
                                if (!(e.yieldPower >= 3)) {
                                    _context10.next = 8;
                                    break;
                                }

                                _context10.next = 8;
                                return EvaluatorInstruction.stepMinor;

                            case 8:
                                _loop = _regenerator2.default.mark(function _loop() {
                                    var m, fx, ks, k;
                                    return _regenerator2.default.wrap(function _loop$(_context9) {
                                        while (1) {
                                            switch (_context9.prev = _context9.next) {
                                                case 0:
                                                    if (!_isArray2) {
                                                        _context9.next = 6;
                                                        break;
                                                    }

                                                    if (!(_i3 >= _iterator2.length)) {
                                                        _context9.next = 3;
                                                        break;
                                                    }

                                                    return _context9.abrupt('return', 'break');

                                                case 3:
                                                    _ref2 = _iterator2[_i3++];
                                                    _context9.next = 10;
                                                    break;

                                                case 6:
                                                    _i3 = _iterator2.next();

                                                    if (!_i3.done) {
                                                        _context9.next = 9;
                                                        break;
                                                    }

                                                    return _context9.abrupt('return', 'break');

                                                case 9:
                                                    _ref2 = _i3.value;

                                                case 10:
                                                    m = _ref2;
                                                    return _context9.delegateYield(e.branch(m.value, s), 't0', 12);

                                                case 12:
                                                    fx = _context9.t0;

                                                    if (!(m.kind == 'constructor')) {
                                                        _context9.next = 17;
                                                        break;
                                                    }

                                                    clazz.call = _regenerator2.default.mark(function _callee2(thiz, args, s) {
                                                        return _regenerator2.default.wrap(function _callee2$(_context8) {
                                                            while (1) {
                                                                switch (_context8.prev = _context8.next) {
                                                                    case 0:
                                                                        return _context8.delegateYield(fx.call(thiz, args, s), 't0', 1);

                                                                    case 1:
                                                                        return _context8.abrupt('return', _context8.t0);

                                                                    case 2:
                                                                    case 'end':
                                                                        return _context8.stop();
                                                                }
                                                            }
                                                        }, _callee2, this);
                                                    });

                                                    _context9.next = 27;
                                                    break;

                                                case 17:
                                                    ks = undefined;

                                                    if (!m.computed) {
                                                        _context9.next = 25;
                                                        break;
                                                    }

                                                    return _context9.delegateYield(e.branch(m.key, s), 't1', 20);

                                                case 20:
                                                    k = _context9.t1;
                                                    return _context9.delegateYield(k.toStringNative(e.realm), 't2', 22);

                                                case 22:
                                                    ks = _context9.t2;
                                                    _context9.next = 26;
                                                    break;

                                                case 25:
                                                    ks = m.key.name;

                                                case 26:

                                                    if (m.static) clazz.setImmediate(ks, fx);else proto.setImmediate(ks, fx);

                                                case 27:
                                                case 'end':
                                                    return _context9.stop();
                                            }
                                        }
                                    }, _loop, _this);
                                });
                                _iterator2 = n.body.body, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

                            case 10:
                                return _context10.delegateYield(_loop(), 't2', 11);

                            case 11:
                                _ret = _context10.t2;

                                if (!(_ret === 'break')) {
                                    _context10.next = 14;
                                    break;
                                }

                                return _context10.abrupt('break', 16);

                            case 14:
                                _context10.next = 10;
                                break;

                            case 16:
                                return _context10.abrupt('return', clazz);

                            case 17:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _marked[6], this);
            }

            function evaluateClassDeclaration(e, n, s) {
                var clazz;
                return _regenerator2.default.wrap(function evaluateClassDeclaration$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                return _context11.delegateYield(evaluateClassExpression(e, n, s), 't0', 1);

                            case 1:
                                clazz = _context11.t0;
                                return _context11.delegateYield(s.put(n.id.name, clazz), 't1', 3);

                            case 3:
                                return _context11.abrupt('return', clazz);

                            case 4:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _marked[7], this);
            }

            function evaluateConditionalExpression(e, n, s) {
                var test;
                return _regenerator2.default.wrap(function evaluateConditionalExpression$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                return _context12.delegateYield(e.branch(n.test, s), 't0', 1);

                            case 1:
                                test = _context12.t0;

                                if (!(e.yieldPower >= 4)) {
                                    _context12.next = 5;
                                    break;
                                }

                                _context12.next = 5;
                                return EvaluatorInstruction.stepMinor;

                            case 5:
                                if (!test.truthy) {
                                    _context12.next = 10;
                                    break;
                                }

                                return _context12.delegateYield(e.branch(n.consequent, s), 't1', 7);

                            case 7:
                                return _context12.abrupt('return', _context12.t1);

                            case 10:
                                if (!n.alternate) {
                                    _context12.next = 13;
                                    break;
                                }

                                return _context12.delegateYield(e.branch(n.alternate, s), 't2', 12);

                            case 12:
                                return _context12.abrupt('return', _context12.t2);

                            case 13:
                                return _context12.abrupt('return', Value.undef);

                            case 14:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _marked[8], this);
            }

            function evaluateContinueStatement(e, n, s) {
                var label, val;
                return _regenerator2.default.wrap(function evaluateContinueStatement$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                label = n.label ? n.label.name : undefined;
                                val = new CompletionRecord(CompletionRecord.CONTINUE, Value.undef, label);

                                if (!(e.yieldPower >= 1)) {
                                    _context13.next = 5;
                                    break;
                                }

                                _context13.next = 5;
                                return EvaluatorInstruction.stepMinor;

                            case 5:
                                return _context13.abrupt('return', val);

                            case 6:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _marked[9], this);
            }

            function evaluateDoWhileStatement(e, n, s) {
                var last, that, gen, finished;
                return _regenerator2.default.wrap(function evaluateDoWhileStatement$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                last = Value.undef;
                                that = e;
                                gen = _regenerator2.default.mark(function gen() {
                                    return _regenerator2.default.wrap(function gen$(_context14) {
                                        while (1) {
                                            switch (_context14.prev = _context14.next) {
                                                case 0:
                                                    _context14.next = 2;
                                                    return that.branchFrame('continue', n.body, s, { label: n.label });

                                                case 2:
                                                    last = _context14.sent;

                                                case 3:
                                                    return _context14.delegateYield(that.branch(n.test, s), 't0', 4);

                                                case 4:
                                                    if (_context14.t0.truthy) {
                                                        _context14.next = 0;
                                                        break;
                                                    }

                                                case 5:
                                                case 'end':
                                                    return _context14.stop();
                                            }
                                        }
                                    }, gen, this);
                                });

                                if (!(e.yieldPower > 0)) {
                                    _context15.next = 6;
                                    break;
                                }

                                _context15.next = 6;
                                return EvaluatorInstruction.stepMinor;

                            case 6:
                                e.pushFrame({ generator: gen(), type: 'loop', label: n.label, ast: n });

                                _context15.next = 9;
                                return EvaluatorInstruction.waitForFramePop;

                            case 9:
                                finished = _context15.sent;
                                return _context15.abrupt('return', Value.undef);

                            case 11:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _marked[10], this);
            }

            function evaluateEmptyStatement(e, n, s) {
                return _regenerator2.default.wrap(function evaluateEmptyStatement$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                if (!(e.yieldPower >= 5)) {
                                    _context16.next = 3;
                                    break;
                                }

                                _context16.next = 3;
                                return EvaluatorInstruction.stepMinor;

                            case 3:
                                return _context16.abrupt('return', Value.undef);

                            case 4:
                            case 'end':
                                return _context16.stop();
                        }
                    }
                }, _marked[11], this);
            }

            function evaluateExpressionStatement(e, n, s) {
                return _regenerator2.default.wrap(function evaluateExpressionStatement$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                if (!(e.yieldPower > 4)) {
                                    _context17.next = 3;
                                    break;
                                }

                                _context17.next = 3;
                                return EvaluatorInstruction.stepMinor;

                            case 3:
                                return _context17.delegateYield(e.branch(n.expression, s), 't0', 4);

                            case 4:
                                return _context17.abrupt('return', _context17.t0);

                            case 5:
                            case 'end':
                                return _context17.stop();
                        }
                    }
                }, _marked[12], this);
            }

            function evaluateIdentifier(e, n, s) {
                var _err;

                return _regenerator2.default.wrap(function evaluateIdentifier$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                if (!(e.yieldPower >= 4)) {
                                    _context18.next = 3;
                                    break;
                                }

                                _context18.next = 3;
                                return EvaluatorInstruction.stepMinor;

                            case 3:
                                if (!(n.name === 'undefined')) {
                                    _context18.next = 5;
                                    break;
                                }

                                return _context18.abrupt('return', Value.undef);

                            case 5:
                                if (s.has(n.name)) {
                                    _context18.next = 13;
                                    break;
                                }

                                if (true) {
                                    _context18.next = 8;
                                    break;
                                }

                                return _context18.abrupt('return', Value.undef);

                            case 8:
                                _err = CompletionRecord.makeReferenceError(e.realm, n.name + ' is not defined');
                                return _context18.delegateYield(_err.addExtra({ code: 'UndefinedVariable', when: 'read', ident: n.name, strict: s.strict }), 't0', 10);

                            case 10:
                                _context18.next = 12;
                                return _err;

                            case 12:
                                return _context18.abrupt('return', _context18.sent);

                            case 13:
                                return _context18.abrupt('return', s.get(n.name));

                            case 14:
                            case 'end':
                                return _context18.stop();
                        }
                    }
                }, _marked[13], this);
            }

            function evaluateIfStatement(e, n, s) {
                var test;
                return _regenerator2.default.wrap(function evaluateIfStatement$(_context19) {
                    while (1) {
                        switch (_context19.prev = _context19.next) {
                            case 0:
                                if (!(e.yieldPower >= 2)) {
                                    _context19.next = 3;
                                    break;
                                }

                                _context19.next = 3;
                                return EvaluatorInstruction.stepStatement;

                            case 3:
                                return _context19.delegateYield(e.branch(n.test, s), 't0', 4);

                            case 4:
                                test = _context19.t0;

                                if (!test.truthy) {
                                    _context19.next = 10;
                                    break;
                                }

                                return _context19.delegateYield(e.branch(n.consequent, s), 't1', 7);

                            case 7:
                                return _context19.abrupt('return', _context19.t1);

                            case 10:
                                if (!n.alternate) {
                                    _context19.next = 13;
                                    break;
                                }

                                return _context19.delegateYield(e.branch(n.alternate, s), 't2', 12);

                            case 12:
                                return _context19.abrupt('return', _context19.t2);

                            case 13:
                                return _context19.abrupt('return', Value.undef);

                            case 14:
                            case 'end':
                                return _context19.stop();
                        }
                    }
                }, _marked[14], this);
            }

            function genForLoop(e, n, s) {
                var test, last;
                return _regenerator2.default.wrap(function genForLoop$(_context20) {
                    while (1) {
                        switch (_context20.prev = _context20.next) {
                            case 0:
                                test = Value.true;

                                if (!n.test) {
                                    _context20.next = 4;
                                    break;
                                }

                                return _context20.delegateYield(e.branch(n.test, s), 't0', 3);

                            case 3:
                                test = _context20.t0;

                            case 4:
                                last = Value.undef;

                            case 5:
                                if (!test.truthy) {
                                    _context20.next = 20;
                                    break;
                                }

                                e.topFrame.ast = n;

                                if (!(e.yieldPower > 0)) {
                                    _context20.next = 10;
                                    break;
                                }

                                _context20.next = 10;
                                return EvaluatorInstruction.eventLoopBodyStart;

                            case 10:
                                _context20.next = 12;
                                return e.branchFrame('continue', n.body, s, { label: n.label });

                            case 12:
                                last = _context20.sent;

                                if (!n.update) {
                                    _context20.next = 15;
                                    break;
                                }

                                return _context20.delegateYield(e.branch(n.update, s), 't1', 15);

                            case 15:
                                if (!n.test) {
                                    _context20.next = 18;
                                    break;
                                }

                                return _context20.delegateYield(e.branch(n.test, s), 't2', 17);

                            case 17:
                                test = _context20.t2;

                            case 18:
                                _context20.next = 5;
                                break;

                            case 20:
                            case 'end':
                                return _context20.stop();
                        }
                    }
                }, _marked[15], this);
            };

            function evaluateForStatement(e, n, s) {
                var finished;
                return _regenerator2.default.wrap(function evaluateForStatement$(_context21) {
                    while (1) {
                        switch (_context21.prev = _context21.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context21.next = 3;
                                    break;
                                }

                                _context21.next = 3;
                                return EvaluatorInstruction.stepStatement;

                            case 3:
                                if (!n.init) {
                                    _context21.next = 5;
                                    break;
                                }

                                return _context21.delegateYield(e.branch(n.init, s), 't0', 5);

                            case 5:

                                e.pushFrame({ generator: genForLoop(e, n, s), type: 'loop', label: n.label, ast: n });

                                _context21.next = 8;
                                return EvaluatorInstruction.waitForFramePop;

                            case 8:
                                finished = _context21.sent;
                                return _context21.abrupt('return', Value.undef);

                            case 10:
                            case 'end':
                                return _context21.stop();
                        }
                    }
                }, _marked[16], this);
            }

            function evaluateForInStatement(e, n, s) {
                var last, object, names, that, ref, gen, finished;
                return _regenerator2.default.wrap(function evaluateForInStatement$(_context23) {
                    while (1) {
                        switch (_context23.prev = _context23.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context23.next = 3;
                                    break;
                                }

                                _context23.next = 3;
                                return EvaluatorInstruction.stepStatement;

                            case 3:
                                last = Value.undef;
                                return _context23.delegateYield(e.branch(n.right, s), 't0', 5);

                            case 5:
                                object = _context23.t0;
                                names = object.observableProperties(s.realm);
                                that = e;
                                ref = undefined;

                                if (n.left.type === 'VariableDeclaration') {
                                    s.add(n.left.declarations[0].id.name, Value.undef);
                                    ref = s.ref(n.left.declarations[0].id.name, s.realm);
                                } else {
                                    ref = s.ref(n.left.name, s.realm);
                                }

                                gen = _regenerator2.default.mark(function gen() {
                                    var _iterator3, _isArray3, _i4, _ref3, name;

                                    return _regenerator2.default.wrap(function gen$(_context22) {
                                        while (1) {
                                            switch (_context22.prev = _context22.next) {
                                                case 0:
                                                    _iterator3 = names, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

                                                case 1:
                                                    if (!_isArray3) {
                                                        _context22.next = 7;
                                                        break;
                                                    }

                                                    if (!(_i4 >= _iterator3.length)) {
                                                        _context22.next = 4;
                                                        break;
                                                    }

                                                    return _context22.abrupt('break', 18);

                                                case 4:
                                                    _ref3 = _iterator3[_i4++];
                                                    _context22.next = 11;
                                                    break;

                                                case 7:
                                                    _i4 = _iterator3.next();

                                                    if (!_i4.done) {
                                                        _context22.next = 10;
                                                        break;
                                                    }

                                                    return _context22.abrupt('break', 18);

                                                case 10:
                                                    _ref3 = _i4.value;

                                                case 11:
                                                    name = _ref3;
                                                    return _context22.delegateYield(ref.setValue(name), 't0', 13);

                                                case 13:
                                                    _context22.next = 15;
                                                    return that.branchFrame('continue', n.body, s, { label: n.label });

                                                case 15:
                                                    last = _context22.sent;

                                                case 16:
                                                    _context22.next = 1;
                                                    break;

                                                case 18:
                                                case 'end':
                                                    return _context22.stop();
                                            }
                                        }
                                    }, gen, this);
                                });

                                e.pushFrame({ generator: gen(), type: 'loop', label: n.label, ast: n });

                                _context23.next = 14;
                                return EvaluatorInstruction.waitForFramePop;

                            case 14:
                                finished = _context23.sent;
                                return _context23.abrupt('return', Value.undef);

                            case 16:
                            case 'end':
                                return _context23.stop();
                        }
                    }
                }, _marked[17], this);
            }

            //TODO: For of does more crazy Symbol iterator stuff
            function evaluateForOfStatement(e, n, s) {
                var last, object, names, that, ref, gen, finished;
                return _regenerator2.default.wrap(function evaluateForOfStatement$(_context25) {
                    while (1) {
                        switch (_context25.prev = _context25.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context25.next = 3;
                                    break;
                                }

                                _context25.next = 3;
                                return EvaluatorInstruction.stepStatement;

                            case 3:
                                last = Value.undef;
                                return _context25.delegateYield(e.branch(n.right, s), 't0', 5);

                            case 5:
                                object = _context25.t0;
                                names = object.observableProperties(s.realm);
                                that = e;
                                ref = undefined;

                                if (!(n.left.type === 'VariableDeclaration')) {
                                    _context25.next = 14;
                                    break;
                                }

                                return _context25.delegateYield(s.put(n.left.declarations[0].id.name, Value.undef), 't1', 11);

                            case 11:
                                ref = s.ref(n.left.declarations[0].id.name, s.realm);
                                _context25.next = 15;
                                break;

                            case 14:
                                ref = s.ref(n.left.name, s.realm);

                            case 15:
                                gen = _regenerator2.default.mark(function gen() {
                                    var _iterator4, _isArray4, _i5, _ref4, _name;

                                    return _regenerator2.default.wrap(function gen$(_context24) {
                                        while (1) {
                                            switch (_context24.prev = _context24.next) {
                                                case 0:
                                                    _iterator4 = names, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

                                                case 1:
                                                    if (!_isArray4) {
                                                        _context24.next = 7;
                                                        break;
                                                    }

                                                    if (!(_i5 >= _iterator4.length)) {
                                                        _context24.next = 4;
                                                        break;
                                                    }

                                                    return _context24.abrupt('break', 24);

                                                case 4:
                                                    _ref4 = _iterator4[_i5++];
                                                    _context24.next = 11;
                                                    break;

                                                case 7:
                                                    _i5 = _iterator4.next();

                                                    if (!_i5.done) {
                                                        _context24.next = 10;
                                                        break;
                                                    }

                                                    return _context24.abrupt('break', 24);

                                                case 10:
                                                    _ref4 = _i5.value;

                                                case 11:
                                                    _name = _ref4;
                                                    _context24.t0 = ref;
                                                    _context24.t1 = object;
                                                    return _context24.delegateYield(_name.toStringNative(), 't2', 15);

                                                case 15:
                                                    _context24.t3 = _context24.t2;
                                                    return _context24.delegateYield(_context24.t1.get.call(_context24.t1, _context24.t3), 't4', 17);

                                                case 17:
                                                    _context24.t5 = _context24.t4;
                                                    return _context24.delegateYield(_context24.t0.setValue.call(_context24.t0, _context24.t5), 't6', 19);

                                                case 19:
                                                    _context24.next = 21;
                                                    return that.branchFrame('continue', n.body, s, { label: n.label });

                                                case 21:
                                                    last = _context24.sent;

                                                case 22:
                                                    _context24.next = 1;
                                                    break;

                                                case 24:
                                                case 'end':
                                                    return _context24.stop();
                                            }
                                        }
                                    }, gen, this);
                                });

                                e.pushFrame({ generator: gen(), type: 'loop', label: n.label });

                                _context25.next = 19;
                                return EvaluatorInstruction.waitForFramePop;

                            case 19:
                                finished = _context25.sent;
                                return _context25.abrupt('return', Value.undef);

                            case 21:
                            case 'end':
                                return _context25.stop();
                        }
                    }
                }, _marked[18], this);
            }

            function evaluateFunctionDeclaration(e, n, s) {
                var closure;
                return _regenerator2.default.wrap(function evaluateFunctionDeclaration$(_context26) {
                    while (1) {
                        switch (_context26.prev = _context26.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context26.next = 3;
                                    break;
                                }

                                _context26.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                closure = new ClosureValue(n, s);

                                s.add(n.id.name, closure);
                                return _context26.abrupt('return', Value.undef);

                            case 6:
                            case 'end':
                                return _context26.stop();
                        }
                    }
                }, _marked[19], this);
            }

            function evaluateFunctionExpression(e, n, s) {
                var value;
                return _regenerator2.default.wrap(function evaluateFunctionExpression$(_context27) {
                    while (1) {
                        switch (_context27.prev = _context27.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context27.next = 3;
                                    break;
                                }

                                _context27.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                value = new ClosureValue(n, s);

                                if (n.type === 'ArrowFunctionExpression') {
                                    value.thiz = s.thiz;
                                    if (n.expression) value.returnLastValue = true;
                                }
                                return _context27.abrupt('return', value);

                            case 6:
                            case 'end':
                                return _context27.stop();
                        }
                    }
                }, _marked[20], this);
            }

            function evaluateLabeledStatement(e, n, s) {
                return _regenerator2.default.wrap(function evaluateLabeledStatement$(_context28) {
                    while (1) {
                        switch (_context28.prev = _context28.next) {
                            case 0:
                                if (!(e.yieldPower >= 5)) {
                                    _context28.next = 3;
                                    break;
                                }

                                _context28.next = 3;
                                return EvaluatorInstruction.stepMinor;

                            case 3:
                                return _context28.delegateYield(e.branch(n.body, s), 't0', 4);

                            case 4:
                                return _context28.abrupt('return', _context28.t0);

                            case 5:
                            case 'end':
                                return _context28.stop();
                        }
                    }
                }, _marked[21], this);
            }

            function evaulateLiteral(e, n, s) {
                var tryFloat;
                return _regenerator2.default.wrap(function evaulateLiteral$(_context29) {
                    while (1) {
                        switch (_context29.prev = _context29.next) {
                            case 0:
                                if (!(e.yieldPower >= 5)) {
                                    _context29.next = 3;
                                    break;
                                }

                                _context29.next = 3;
                                return EvaluatorInstruction.stepMinor;

                            case 3:
                                if (!n.regex) {
                                    _context29.next = 7;
                                    break;
                                }

                                return _context29.abrupt('return', RegExpValue.make(new RegExp(n.regex.pattern, n.regex.flags), s.realm));

                            case 7:
                                if (!(n.value === null)) {
                                    _context29.next = 16;
                                    break;
                                }

                                if (!(e.raw === 'null')) {
                                    _context29.next = 10;
                                    break;
                                }

                                return _context29.abrupt('return', Value.null);

                            case 10:

                                //Work around Esprima turning Infinity into null. =\
                                tryFloat = parseFloat(n.raw);

                                if (isNaN(tryFloat)) {
                                    _context29.next = 13;
                                    break;
                                }

                                return _context29.abrupt('return', e.fromNative(tryFloat));

                            case 13:
                                return _context29.abrupt('return', e.fromNative(null));

                            case 16:
                                return _context29.abrupt('return', e.fromNative(n.value));

                            case 17:
                            case 'end':
                                return _context29.stop();
                        }
                    }
                }, _marked[22], this);
            }

            function evaluateLogicalExpression(e, n, s) {
                var left;
                return _regenerator2.default.wrap(function evaluateLogicalExpression$(_context30) {
                    while (1) {
                        switch (_context30.prev = _context30.next) {
                            case 0:
                                return _context30.delegateYield(e.branch(n.left, s), 't0', 1);

                            case 1:
                                left = _context30.t0;

                                if (!(e.yieldPower >= 4)) {
                                    _context30.next = 5;
                                    break;
                                }

                                _context30.next = 5;
                                return EvaluatorInstruction.stepMajor;

                            case 5:
                                _context30.t1 = n.operator;
                                _context30.next = _context30.t1 === '&&' ? 8 : _context30.t1 === '||' ? 12 : 16;
                                break;

                            case 8:
                                if (!left.truthy) {
                                    _context30.next = 11;
                                    break;
                                }

                                return _context30.delegateYield(e.branch(n.right, s), 't2', 10);

                            case 10:
                                return _context30.abrupt('return', _context30.t2);

                            case 11:
                                return _context30.abrupt('return', left);

                            case 12:
                                if (!left.truthy) {
                                    _context30.next = 14;
                                    break;
                                }

                                return _context30.abrupt('return', left);

                            case 14:
                                return _context30.delegateYield(e.branch(n.right, s), 't3', 15);

                            case 15:
                                return _context30.abrupt('return', _context30.t3);

                            case 16:
                                throw new Error('Unknown logical operator: ' + n.operator);

                            case 17:
                            case 'end':
                                return _context30.stop();
                        }
                    }
                }, _marked[23], this);
            }

            function evaluateMemberExpression(e, n, s) {
                var left;
                return _regenerator2.default.wrap(function evaluateMemberExpression$(_context31) {
                    while (1) {
                        switch (_context31.prev = _context31.next) {
                            case 0:
                                if (!(e.yieldPower >= 4)) {
                                    _context31.next = 3;
                                    break;
                                }

                                _context31.next = 3;
                                return EvaluatorInstruction.stepMinor;

                            case 3:
                                return _context31.delegateYield(e.branch(n.object, s), 't0', 4);

                            case 4:
                                left = _context31.t0;
                                return _context31.delegateYield(e.partialMemberExpression(left, n, s), 't1', 6);

                            case 6:
                                return _context31.abrupt('return', _context31.t1);

                            case 7:
                            case 'end':
                                return _context31.stop();
                        }
                    }
                }, _marked[24], this);
            }

            function evaluateObjectExpression(e, n, s) {
                var nat, _i6, prop, key, value, pd;

                return _regenerator2.default.wrap(function evaluateObjectExpression$(_context32) {
                    while (1) {
                        switch (_context32.prev = _context32.next) {
                            case 0:
                                //TODO: Need to wire up native prototype
                                nat = new ObjectValue(s.realm);
                                _i6 = 0;

                            case 2:
                                if (!(_i6 < n.properties.length)) {
                                    _context32.next = 27;
                                    break;
                                }

                                prop = n.properties[_i6];
                                key = undefined;

                                if (!n.computed) {
                                    _context32.next = 10;
                                    break;
                                }

                                return _context32.delegateYield(e.branch(prop.key, s), 't0', 7);

                            case 7:
                                key = _context32.t0.toNative().toString();
                                _context32.next = 11;
                                break;

                            case 10:
                                if (prop.key.type == 'Identifier') {
                                    key = prop.key.name;
                                } else if (prop.key.type == 'Literal') {
                                    key = prop.key.value.toString();
                                }

                            case 11:
                                return _context32.delegateYield(e.branch(prop.value, s), 't1', 12);

                            case 12:
                                value = _context32.t1;
                                pd = undefined;

                                if (Object.prototype.hasOwnProperty.call(nat.properties, key)) {
                                    pd = nat.properties[key];
                                } else {
                                    pd = new PropertyDescriptor(Value.undef);
                                    nat.rawSetProperty(key, pd);
                                }

                                _context32.t2 = prop.kind;
                                _context32.next = _context32.t2 === 'init' ? 18 : _context32.t2 === 'get' ? 20 : _context32.t2 === 'set' ? 22 : 18;
                                break;

                            case 18:
                                pd.value = value;
                                return _context32.abrupt('break', 24);

                            case 20:
                                pd.getter = value;
                                return _context32.abrupt('break', 24);

                            case 22:
                                pd.setter = value;
                                return _context32.abrupt('break', 24);

                            case 24:
                                ++_i6;
                                _context32.next = 2;
                                break;

                            case 27:
                                if (!(e.yieldPower > 0)) {
                                    _context32.next = 30;
                                    break;
                                }

                                _context32.next = 30;
                                return EvaluatorInstruction.stepMajor;

                            case 30:
                                return _context32.abrupt('return', nat);

                            case 31:
                            case 'end':
                                return _context32.stop();
                        }
                    }
                }, _marked[25], this);
            }

            function evaluateProgram(e, n, s) {
                var result, v, _iterator5, _isArray5, _i7, _ref5, _statement;

                return _regenerator2.default.wrap(function evaluateProgram$(_context33) {
                    while (1) {
                        switch (_context33.prev = _context33.next) {
                            case 0:
                                result = Value.undef;

                                if (n.vars) for (v in n.vars) {
                                    s.add(v, Value.undef);
                                }
                                if (n.strict === true) s.strict = true;

                                if (!(e.yieldPower >= 4)) {
                                    _context33.next = 6;
                                    break;
                                }

                                _context33.next = 6;
                                return EvaluatorInstruction.stepMajor;

                            case 6:
                                _iterator5 = n.body, _isArray5 = Array.isArray(_iterator5), _i7 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

                            case 7:
                                if (!_isArray5) {
                                    _context33.next = 13;
                                    break;
                                }

                                if (!(_i7 >= _iterator5.length)) {
                                    _context33.next = 10;
                                    break;
                                }

                                return _context33.abrupt('break', 22);

                            case 10:
                                _ref5 = _iterator5[_i7++];
                                _context33.next = 17;
                                break;

                            case 13:
                                _i7 = _iterator5.next();

                                if (!_i7.done) {
                                    _context33.next = 16;
                                    break;
                                }

                                return _context33.abrupt('break', 22);

                            case 16:
                                _ref5 = _i7.value;

                            case 17:
                                _statement = _ref5;
                                return _context33.delegateYield(e.branch(_statement, s), 't0', 19);

                            case 19:
                                result = _context33.t0;

                            case 20:
                                _context33.next = 7;
                                break;

                            case 22:
                                return _context33.abrupt('return', result);

                            case 23:
                            case 'end':
                                return _context33.stop();
                        }
                    }
                }, _marked[26], this);
            }

            function evaluateReturnStatement(e, n, s) {
                var retVal;
                return _regenerator2.default.wrap(function evaluateReturnStatement$(_context34) {
                    while (1) {
                        switch (_context34.prev = _context34.next) {
                            case 0:
                                retVal = Value.undef;

                                if (!n.argument) {
                                    _context34.next = 4;
                                    break;
                                }

                                return _context34.delegateYield(e.branch(n.argument, s), 't0', 3);

                            case 3:
                                retVal = _context34.t0;

                            case 4:
                                if (!(e.yieldPower >= 2)) {
                                    _context34.next = 7;
                                    break;
                                }

                                _context34.next = 7;
                                return EvaluatorInstruction.stepMajor;

                            case 7:
                                return _context34.abrupt('return', new CompletionRecord(CompletionRecord.RETURN, retVal));

                            case 8:
                            case 'end':
                                return _context34.stop();
                        }
                    }
                }, _marked[27], this);
            }

            function evaluateSequenceExpression(e, n, s) {
                var last, _iterator6, _isArray6, _i8, _ref6, expr;

                return _regenerator2.default.wrap(function evaluateSequenceExpression$(_context35) {
                    while (1) {
                        switch (_context35.prev = _context35.next) {
                            case 0:
                                last = Value.undef;

                                if (!(e.yieldPower >= 4)) {
                                    _context35.next = 4;
                                    break;
                                }

                                _context35.next = 4;
                                return EvaluatorInstruction.stepMajor;

                            case 4:
                                _iterator6 = n.expressions, _isArray6 = Array.isArray(_iterator6), _i8 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

                            case 5:
                                if (!_isArray6) {
                                    _context35.next = 11;
                                    break;
                                }

                                if (!(_i8 >= _iterator6.length)) {
                                    _context35.next = 8;
                                    break;
                                }

                                return _context35.abrupt('break', 20);

                            case 8:
                                _ref6 = _iterator6[_i8++];
                                _context35.next = 15;
                                break;

                            case 11:
                                _i8 = _iterator6.next();

                                if (!_i8.done) {
                                    _context35.next = 14;
                                    break;
                                }

                                return _context35.abrupt('break', 20);

                            case 14:
                                _ref6 = _i8.value;

                            case 15:
                                expr = _ref6;
                                return _context35.delegateYield(e.branch(expr, s), 't0', 17);

                            case 17:
                                last = _context35.t0;

                            case 18:
                                _context35.next = 5;
                                break;

                            case 20:
                                return _context35.abrupt('return', last);

                            case 21:
                            case 'end':
                                return _context35.stop();
                        }
                    }
                }, _marked[28], this);
            }

            function evaluateSwitchStatement(e, n, s) {
                var discriminant, last, matches, matchVals, matched, _i9, cas, testval, equality, genSwitch, finished;

                return _regenerator2.default.wrap(function evaluateSwitchStatement$(_context37) {
                    while (1) {
                        switch (_context37.prev = _context37.next) {
                            case 0:
                                if (!(e.yieldPower >= 2)) {
                                    _context37.next = 3;
                                    break;
                                }

                                _context37.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                return _context37.delegateYield(e.branch(n.discriminant, s), 't0', 4);

                            case 4:
                                discriminant = _context37.t0;
                                last = Value.undef;
                                matches = 0;
                                matchVals = new Array(n.cases.length);
                                matched = false;
                                _i9 = 0;

                            case 10:
                                if (!(_i9 < n.cases.length)) {
                                    _context37.next = 22;
                                    break;
                                }

                                cas = n.cases[_i9];

                                if (!cas.test) {
                                    _context37.next = 19;
                                    break;
                                }

                                return _context37.delegateYield(e.branch(cas.test, s), 't1', 14);

                            case 14:
                                testval = _context37.t1;
                                return _context37.delegateYield(testval.tripleEquals(discriminant), 't2', 16);

                            case 16:
                                equality = _context37.t2;

                                if (equality.truthy) ++matches;
                                matchVals[_i9] = equality.truthy;

                            case 19:
                                ++_i9;
                                _context37.next = 10;
                                break;

                            case 22:
                                genSwitch = _regenerator2.default.mark(function genSwitch(e, n) {
                                    var _i10, cas, _iterator7, _isArray7, _i11, _ref7, _statement2;

                                    return _regenerator2.default.wrap(function genSwitch$(_context36) {
                                        while (1) {
                                            switch (_context36.prev = _context36.next) {
                                                case 0:
                                                    _i10 = 0;

                                                case 1:
                                                    if (!(_i10 < n.cases.length)) {
                                                        _context36.next = 31;
                                                        break;
                                                    }

                                                    cas = n.cases[_i10];

                                                    if (matched) {
                                                        _context36.next = 12;
                                                        break;
                                                    }

                                                    if (!cas.test) {
                                                        _context36.next = 9;
                                                        break;
                                                    }

                                                    if (matchVals[_i10]) {
                                                        _context36.next = 7;
                                                        break;
                                                    }

                                                    return _context36.abrupt('continue', 28);

                                                case 7:
                                                    _context36.next = 11;
                                                    break;

                                                case 9:
                                                    if (!(matches !== 0)) {
                                                        _context36.next = 11;
                                                        break;
                                                    }

                                                    return _context36.abrupt('continue', 28);

                                                case 11:
                                                    matched = true;

                                                case 12:
                                                    _iterator7 = cas.consequent, _isArray7 = Array.isArray(_iterator7), _i11 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);

                                                case 13:
                                                    if (!_isArray7) {
                                                        _context36.next = 19;
                                                        break;
                                                    }

                                                    if (!(_i11 >= _iterator7.length)) {
                                                        _context36.next = 16;
                                                        break;
                                                    }

                                                    return _context36.abrupt('break', 28);

                                                case 16:
                                                    _ref7 = _iterator7[_i11++];
                                                    _context36.next = 23;
                                                    break;

                                                case 19:
                                                    _i11 = _iterator7.next();

                                                    if (!_i11.done) {
                                                        _context36.next = 22;
                                                        break;
                                                    }

                                                    return _context36.abrupt('break', 28);

                                                case 22:
                                                    _ref7 = _i11.value;

                                                case 23:
                                                    _statement2 = _ref7;
                                                    return _context36.delegateYield(e.branch(_statement2, s), 't0', 25);

                                                case 25:
                                                    last = _context36.t0;

                                                case 26:
                                                    _context36.next = 13;
                                                    break;

                                                case 28:
                                                    ++_i10;
                                                    _context36.next = 1;
                                                    break;

                                                case 31:
                                                case 'end':
                                                    return _context36.stop();
                                            }
                                        }
                                    }, genSwitch, this);
                                });

                                e.pushFrame({ generator: genSwitch(e, n), type: 'loop', label: n.label });
                                _context37.next = 26;
                                return EvaluatorInstruction.waitForFramePop;

                            case 26:
                                finished = _context37.sent;
                                return _context37.abrupt('return', last);

                            case 28:
                            case 'end':
                                return _context37.stop();
                        }
                    }
                }, _marked[29], this);
            }

            function evaluateThisExpression(e, n, s) {
                return _regenerator2.default.wrap(function evaluateThisExpression$(_context38) {
                    while (1) {
                        switch (_context38.prev = _context38.next) {
                            case 0:
                                if (!(e.yieldPower >= 4)) {
                                    _context38.next = 3;
                                    break;
                                }

                                _context38.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                if (!s.thiz) {
                                    _context38.next = 7;
                                    break;
                                }

                                return _context38.abrupt('return', s.thiz);

                            case 7:
                                return _context38.abrupt('return', Value.undef);

                            case 8:
                            case 'end':
                                return _context38.stop();
                        }
                    }
                }, _marked[30], this);
            }

            function evaluateThrowStatement(e, n, s) {
                var value;
                return _regenerator2.default.wrap(function evaluateThrowStatement$(_context39) {
                    while (1) {
                        switch (_context39.prev = _context39.next) {
                            case 0:
                                return _context39.delegateYield(e.branch(n.argument, s), 't0', 1);

                            case 1:
                                value = _context39.t0;

                                if (!(e.yieldPower >= 2)) {
                                    _context39.next = 5;
                                    break;
                                }

                                _context39.next = 5;
                                return EvaluatorInstruction.stepMajor;

                            case 5:
                                return _context39.abrupt('return', new CompletionRecord(CompletionRecord.THROW, value));

                            case 6:
                            case 'end':
                                return _context39.stop();
                        }
                    }
                }, _marked[31], this);
            }

            function evaluateTryStatement(e, n, s) {
                var result, handlerScope;
                return _regenerator2.default.wrap(function evaluateTryStatement$(_context40) {
                    while (1) {
                        switch (_context40.prev = _context40.next) {
                            case 0:
                                if (!(e.yieldPower >= 2)) {
                                    _context40.next = 3;
                                    break;
                                }

                                _context40.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                if (n.finalizer) e.pushFrame({ generator: e.branch(n.finalizer, s), type: 'finally', scope: s });
                                _context40.next = 6;
                                return e.branchFrame('catch', n.block, s);

                            case 6:
                                result = _context40.sent;

                                if (!(result instanceof CompletionRecord && result.type == CompletionRecord.THROW)) {
                                    _context40.next = 14;
                                    break;
                                }

                                if (n.handler) {
                                    _context40.next = 10;
                                    break;
                                }

                                return _context40.abrupt('return', result);

                            case 10:
                                handlerScope = s.createChild();

                                handlerScope.add(n.handler.param.name, result.value);
                                return _context40.delegateYield(e.branch(n.handler.body, handlerScope), 't0', 13);

                            case 13:
                                return _context40.abrupt('return', _context40.t0);

                            case 14:
                                return _context40.abrupt('return', result);

                            case 15:
                            case 'end':
                                return _context40.stop();
                        }
                    }
                }, _marked[32], this);
            }

            function evaluateUpdateExpression(e, n, s) {
                var nue, ref, old;
                return _regenerator2.default.wrap(function evaluateUpdateExpression$(_context41) {
                    while (1) {
                        switch (_context41.prev = _context41.next) {
                            case 0:
                                //TODO: Need to support something like ++x[1];
                                nue = undefined;

                                if (!(e.yieldPower >= 3)) {
                                    _context41.next = 4;
                                    break;
                                }

                                _context41.next = 4;
                                return EvaluatorInstruction.stepMajor;

                            case 4:
                                return _context41.delegateYield(e.resolveRef(n.argument, s, true), 't0', 5);

                            case 5:
                                ref = _context41.t0;
                                old = Value.nan;

                                if (!ref) {
                                    _context41.next = 10;
                                    break;
                                }

                                return _context41.delegateYield(ref.getValue(), 't1', 9);

                            case 9:
                                old = _context41.t1;

                            case 10:
                                if (old === undefined) old = Value.nan;
                                _context41.t2 = n.operator;
                                _context41.next = _context41.t2 === '++' ? 14 : _context41.t2 === '--' ? 17 : 20;
                                break;

                            case 14:
                                return _context41.delegateYield(old.add(e.fromNative(1)), 't3', 15);

                            case 15:
                                nue = _context41.t3;
                                return _context41.abrupt('break', 21);

                            case 17:
                                return _context41.delegateYield(old.subtract(e.fromNative(1)), 't4', 18);

                            case 18:
                                nue = _context41.t4;
                                return _context41.abrupt('break', 21);

                            case 20:
                                throw new Error('Unknown update expression type: ' + n.operator);

                            case 21:
                                if (!ref) {
                                    _context41.next = 23;
                                    break;
                                }

                                return _context41.delegateYield(ref.setValue(nue, s), 't5', 23);

                            case 23:
                                if (!n.prefix) {
                                    _context41.next = 25;
                                    break;
                                }

                                return _context41.abrupt('return', nue);

                            case 25:
                                return _context41.abrupt('return', old);

                            case 26:
                            case 'end':
                                return _context41.stop();
                        }
                    }
                }, _marked[33], this);
            }

            function evaulateUnaryExpression(e, n, s) {
                var ref, worked, left;
                return _regenerator2.default.wrap(function evaulateUnaryExpression$(_context42) {
                    while (1) {
                        switch (_context42.prev = _context42.next) {
                            case 0:
                                if (!(e.yieldPower >= 4)) {
                                    _context42.next = 3;
                                    break;
                                }

                                _context42.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                if (!(n.operator === 'delete')) {
                                    _context42.next = 18;
                                    break;
                                }

                                if (!(n.argument.type !== 'MemberExpression' && n.argument.type !== 'Identifier')) {
                                    _context42.next = 6;
                                    break;
                                }

                                return _context42.abrupt('return', Value.true);

                            case 6:
                                return _context42.delegateYield(e.resolveRef(n.argument, s), 't0', 7);

                            case 7:
                                ref = _context42.t0;

                                if (ref) {
                                    _context42.next = 10;
                                    break;
                                }

                                return _context42.abrupt('return', Value.false);

                            case 10:
                                if (!ref.isVariable) {
                                    _context42.next = 12;
                                    break;
                                }

                                return _context42.abrupt('return', Value.false);

                            case 12:
                                worked = ref.del(s);

                                if (!(worked instanceof CompletionRecord)) {
                                    _context42.next = 17;
                                    break;
                                }

                                _context42.next = 16;
                                return worked;

                            case 16:
                                return _context42.abrupt('return', _context42.sent);

                            case 17:
                                return _context42.abrupt('return', Value.fromNative(worked));

                            case 18:
                                if (!(n.operator === 'typeof')) {
                                    _context42.next = 23;
                                    break;
                                }

                                if (!(n.argument.type == 'Identifier')) {
                                    _context42.next = 23;
                                    break;
                                }

                                if (s.has(n.argument.name)) {
                                    _context42.next = 23;
                                    break;
                                }

                                return _context42.delegateYield(Value.undef.typeOf(), 't1', 22);

                            case 22:
                                return _context42.abrupt('return', _context42.t1);

                            case 23:
                                return _context42.delegateYield(e.branch(n.argument, s), 't2', 24);

                            case 24:
                                left = _context42.t2;
                                _context42.t3 = n.operator;
                                _context42.next = _context42.t3 === '-' ? 28 : _context42.t3 === '+' ? 30 : _context42.t3 === '!' ? 32 : _context42.t3 === '~' ? 34 : _context42.t3 === 'typeof' ? 36 : _context42.t3 === 'void' ? 38 : 39;
                                break;

                            case 28:
                                return _context42.delegateYield(left.unaryMinus(), 't4', 29);

                            case 29:
                                return _context42.abrupt('return', _context42.t4);

                            case 30:
                                return _context42.delegateYield(left.unaryPlus(), 't5', 31);

                            case 31:
                                return _context42.abrupt('return', _context42.t5);

                            case 32:
                                return _context42.delegateYield(left.not(), 't6', 33);

                            case 33:
                                return _context42.abrupt('return', _context42.t6);

                            case 34:
                                return _context42.delegateYield(left.bitNot(), 't7', 35);

                            case 35:
                                return _context42.abrupt('return', _context42.t7);

                            case 36:
                                return _context42.delegateYield(left.typeOf(), 't8', 37);

                            case 37:
                                return _context42.abrupt('return', _context42.t8);

                            case 38:
                                return _context42.abrupt('return', Value.undef);

                            case 39:
                                throw new Error('Unknown binary operator: ' + n.operator);

                            case 40:
                            case 'end':
                                return _context42.stop();
                        }
                    }
                }, _marked[34], this);
            }

            function evaluateVariableDeclaration(e, n, s) {
                var kind, _iterator8, _isArray8, _i12, _ref8, decl, _value;

                return _regenerator2.default.wrap(function evaluateVariableDeclaration$(_context43) {
                    while (1) {
                        switch (_context43.prev = _context43.next) {
                            case 0:
                                kind = n.kind;

                                if (!(e.yieldPower >= 3)) {
                                    _context43.next = 4;
                                    break;
                                }

                                _context43.next = 4;
                                return EvaluatorInstruction.stepMajor;

                            case 4:
                                _iterator8 = n.declarations, _isArray8 = Array.isArray(_iterator8), _i12 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);

                            case 5:
                                if (!_isArray8) {
                                    _context43.next = 11;
                                    break;
                                }

                                if (!(_i12 >= _iterator8.length)) {
                                    _context43.next = 8;
                                    break;
                                }

                                return _context43.abrupt('break', 27);

                            case 8:
                                _ref8 = _iterator8[_i12++];
                                _context43.next = 15;
                                break;

                            case 11:
                                _i12 = _iterator8.next();

                                if (!_i12.done) {
                                    _context43.next = 14;
                                    break;
                                }

                                return _context43.abrupt('break', 27);

                            case 14:
                                _ref8 = _i12.value;

                            case 15:
                                decl = _ref8;
                                _value = Value.undef;

                                if (!decl.init) {
                                    _context43.next = 22;
                                    break;
                                }

                                return _context43.delegateYield(e.branch(decl.init, s), 't0', 19);

                            case 19:
                                _value = _context43.t0;
                                _context43.next = 24;
                                break;

                            case 22:
                                if (!s.has(decl.id.name)) {
                                    _context43.next = 24;
                                    break;
                                }

                                return _context43.abrupt('continue', 25);

                            case 24:

                                if (kind === 'const') {
                                    s.addConst(decl.id.name, _value);
                                } else {
                                    s.add(decl.id.name, _value);
                                }

                            case 25:
                                _context43.next = 5;
                                break;

                            case 27:
                                return _context43.abrupt('return', Value.undef);

                            case 28:
                            case 'end':
                                return _context43.stop();
                        }
                    }
                }, _marked[35], this);
            }

            function genWhileLoop(e, n, s) {
                var last;
                return _regenerator2.default.wrap(function genWhileLoop$(_context44) {
                    while (1) {
                        switch (_context44.prev = _context44.next) {
                            case 0:
                                last = Value.undef;

                            case 1:
                                return _context44.delegateYield(e.branch(n.test, s), 't0', 2);

                            case 2:
                                if (!_context44.t0.truthy) {
                                    _context44.next = 12;
                                    break;
                                }

                                e.topFrame.ast = n;

                                if (!(e.yieldPower > 0)) {
                                    _context44.next = 7;
                                    break;
                                }

                                _context44.next = 7;
                                return EvaluatorInstruction.eventLoopBodyStart;

                            case 7:
                                _context44.next = 9;
                                return e.branchFrame('continue', n.body, s);

                            case 9:
                                last = _context44.sent;
                                _context44.next = 1;
                                break;

                            case 12:
                            case 'end':
                                return _context44.stop();
                        }
                    }
                }, _marked[36], this);
            }

            function evaluateWhileStatement(e, n, s) {
                var finished;
                return _regenerator2.default.wrap(function evaluateWhileStatement$(_context45) {
                    while (1) {
                        switch (_context45.prev = _context45.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context45.next = 3;
                                    break;
                                }

                                _context45.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                e.pushFrame({ generator: genWhileLoop(e, n, s), type: 'loop', label: n.label, ast: n });
                                _context45.next = 6;
                                return EvaluatorInstruction.waitForFramePop;

                            case 6:
                                finished = _context45.sent;
                                return _context45.abrupt('return', Value.undef);

                            case 8:
                            case 'end':
                                return _context45.stop();
                        }
                    }
                }, _marked[37], this);
            }

            function evaluateWithStatement(e, n, s) {
                return _regenerator2.default.wrap(function evaluateWithStatement$(_context46) {
                    while (1) {
                        switch (_context46.prev = _context46.next) {
                            case 0:
                                if (!(e.yieldPower > 0)) {
                                    _context46.next = 3;
                                    break;
                                }

                                _context46.next = 3;
                                return EvaluatorInstruction.stepMajor;

                            case 3:
                                if (!s.strict) {
                                    _context46.next = 5;
                                    break;
                                }

                                return _context46.abrupt('return', CompletionRecord.makeSyntaxError(e.realm, 'Strict mode code may not include a with statement'));

                            case 5:
                                return _context46.abrupt('return', CompletionRecord.makeSyntaxError(e.realm, 'With statement not supported by esper'));

                            case 6:
                            case 'end':
                                return _context46.stop();
                        }
                    }
                }, _marked[38], this);
            }

            function findNextStep(type) {
                switch (type) {
                    case 'ArrayExpression':
                        return evaluateArrayExpression;
                    case 'ArrowFunctionExpression':
                        return evaluateFunctionExpression;
                    case 'AssignmentExpression':
                        return evaluateAssignmentExpression;
                    case 'BinaryExpression':
                        return evaulateBinaryExpression;
                    case 'BreakStatement':
                        return evaluateBreakStatement;
                    case 'BlockStatement':
                        return evaluateBlockStatement;
                    case 'CallExpression':
                        return evaluateCallExpression;
                    case 'ClassDeclaration':
                        return evaluateClassDeclaration;
                    case 'ClassExpression':
                        return evaluateClassExpression;
                    case 'ConditionalExpression':
                        return evaluateConditionalExpression;
                    case 'DebuggerStatement':
                        return evaluateEmptyStatement;
                    case 'DoWhileStatement':
                        return evaluateDoWhileStatement;
                    case 'ContinueStatement':
                        return evaluateContinueStatement;
                    case 'EmptyStatement':
                        return evaluateEmptyStatement;
                    case 'ExpressionStatement':
                        return evaluateExpressionStatement;
                    case 'ForStatement':
                        return evaluateForStatement;
                    case 'ForInStatement':
                        return evaluateForInStatement;
                    case 'ForOfStatement':
                        return evaluateForOfStatement;
                    case 'FunctionDeclaration':
                        return evaluateFunctionDeclaration;
                    case 'FunctionExpression':
                        return evaluateFunctionExpression;
                    case 'Identifier':
                        return evaluateIdentifier;
                    case 'IfStatement':
                        return evaluateIfStatement;
                    case 'LabeledStatement':
                        return evaluateLabeledStatement;
                    case 'Literal':
                        return evaulateLiteral;
                    case 'LogicalExpression':
                        return evaluateLogicalExpression;
                    case 'MemberExpression':
                        return evaluateMemberExpression;
                    case 'NewExpression':
                        return evaluateCallExpression;
                    case 'ObjectExpression':
                        return evaluateObjectExpression;
                    case 'Program':
                        return evaluateProgram;
                    case 'ReturnStatement':
                        return evaluateReturnStatement;
                    case 'SequenceExpression':
                        return evaluateSequenceExpression;
                    case 'SwitchStatement':
                        return evaluateSwitchStatement;
                    case 'ThisExpression':
                        return evaluateThisExpression;
                    case 'ThrowStatement':
                        return evaluateThrowStatement;
                    case 'TryStatement':
                        return evaluateTryStatement;
                    case 'UnaryExpression':
                        return evaulateUnaryExpression;
                    case 'UpdateExpression':
                        return evaluateUpdateExpression;
                    case 'VariableDeclaration':
                        return evaluateVariableDeclaration;
                    case 'WhileStatement':
                        return evaluateWhileStatement;
                    case 'WithStatement':
                        return evaluateWithStatement;
                    default:
                        throw new Error('Unknown AST Node Type: ' + type);
                }
            }

            module.exports = findNextStep;

            /***/ },
        /* 151 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _weakMap = __webpack_require__(107);

            var _weakMap2 = _interopRequireDefault(_weakMap);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Scope = __webpack_require__(152);
            var Value = __webpack_require__(103);
            var esprima = __webpack_require__(153);
            var CompletionRecord = __webpack_require__(115);
            var ObjectValue = __webpack_require__(120);
            var PrimitiveValue = __webpack_require__(128);
            var StringValue = __webpack_require__(131);
            var LinkValue = __webpack_require__(154);
            var SmartLinkValue = __webpack_require__(155);
            var BridgeValue = __webpack_require__(139);
            var ASTPreprocessor = __webpack_require__(156);
            var EasyNativeFunction = __webpack_require__(157);
            var PropertyDescriptor = __webpack_require__(127);
            var EvaluatorInstruction = __webpack_require__(142);

            var ObjectPrototype = __webpack_require__(158);
            var FunctionPrototype = __webpack_require__(163);
            var ObjectClass = __webpack_require__(164);
            var FunctionClass = __webpack_require__(165);
            var NumberPrototype = __webpack_require__(166);

            var StringPrototype = __webpack_require__(167);

            var ArrayPrototype = __webpack_require__(168);
            var ArrayClass = __webpack_require__(169);
            var StringClass = __webpack_require__(170);
            var NumberClass = __webpack_require__(171);

            var BooleanPrototype = __webpack_require__(172);
            var BooleanClass = __webpack_require__(173);
            var RegExpPrototype = __webpack_require__(174);
            var RegExpClass = __webpack_require__(175);
            var EsperClass = __webpack_require__(176);
            var ErrorPrototype = __webpack_require__(177);
            var ErrorClass = __webpack_require__(178);

            var AssertClass = __webpack_require__(179);
            var MathClass = __webpack_require__(180);
            var ConsoleClass = __webpack_require__(181);
            var JSONClass = __webpack_require__(182);

            var EvalFunction = function (_ObjectValue) {
                (0, _inherits3.default)(EvalFunction, _ObjectValue);

                function EvalFunction(realm) {
                    (0, _classCallCheck3.default)(this, EvalFunction);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(EvalFunction).call(this, realm));

                    _this.setPrototype(realm.FunctionPrototype);
                    return _this;
                }

                (0, _createClass3.default)(EvalFunction, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope) {
                        var cv, code, ast, oast, eo, bak;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        cv = Value.undef;

                                        if (args.length > 0) cv = args[0];

                                        if (cv instanceof StringValue) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.abrupt('return', cv);

                                    case 4:
                                        return _context.delegateYield(cv.toStringNative(), 't0', 5);

                                    case 5:
                                        code = _context.t0;
                                        ast = undefined;
                                        _context.prev = 7;
                                        oast = scope.realm.parser(code, { loc: true });

                                        ast = ASTPreprocessor.process(oast);
                                        _context.next = 17;
                                        break;

                                    case 12:
                                        _context.prev = 12;
                                        _context.t1 = _context['catch'](7);

                                        if (_context.t1.description == 'Invalid left-hand side in assignment') eo = new ReferenceError(_context.t1.description, _context.t1.fileName, _context.t1.lineNumber);else eo = new SyntaxError(_context.t1.description, _context.t1.fileName, _context.t1.lineNumber);

                                        if (_context.t1.stack) eo.stack = _context.t1.stack;
                                        return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, Value.fromNative(eo, scope.realm)));

                                    case 17:
                                        _context.next = 19;
                                        return EvaluatorInstruction.branch('eval', ast, scope.parent ? scope.parent : scope);

                                    case 19:
                                        bak = _context.sent;
                                        return _context.abrupt('return', bak);

                                    case 21:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this, [[7, 12]]);
                    })
                }]);
                return EvalFunction;
            }(ObjectValue);

            /**
             * Represents a javascript execution environment including
             * it's scopes and standard libraries.
             */

            var Realm = function () {
                (0, _createClass3.default)(Realm, [{
                    key: 'print',
                    value: function print() {
                        console.log.apply(console, arguments);
                    }
                }, {
                    key: 'parser',
                    value: function parser(code, options) {
                        options = options || {};
                        var opts = { loc: true, range: true };
                        if (options.inFunctionBody) {
                            opts.tolerant = true;
                            opts.allowReturnOutsideFunction = true;
                        }

                        var ast = esprima.parse(code, opts);
                        var errors = [];
                        if (ast.errors) {
                            errors = ast.errors.filter(function (x) {
                                if (options.inFunctionBody && x.message === 'Illegal return statement') return false;
                            });
                        }
                        delete ast.errors;
                        if (errors.length > 0) throw errors[0];
                        return ast;
                    }
                }]);

                function Realm(options) {
                    (0, _classCallCheck3.default)(this, Realm);

                    this.options = options || {};
                    /** @type {Value} */
                    this.ObjectPrototype = new ObjectPrototype(this);
                    this.FunctionPrototype = new FunctionPrototype(this);
                    this.Object = new ObjectClass(this);
                    this.ObjectPrototype._init(this);
                    this.FunctionPrototype._init(this);
                    this.Object.setPrototype(this.ObjectPrototype);
                    this.FunctionPrototype.setPrototype(this.ObjectPrototype);

                    //TODO: Do this when we can make the property non enumerable.
                    this.ObjectPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Object, false));

                    this.Function = new FunctionClass(this);

                    /** @type {Math} */
                    this.Math = new MathClass(this);

                    /** @type {NumberPrototype} */
                    this.NumberPrototype = new NumberPrototype(this);

                    /** @type {StringPrototype} */
                    this.StringPrototype = new StringPrototype(this);

                    this.ArrayPrototype = new ArrayPrototype(this);
                    this.Array = new ArrayClass(this);
                    this.String = new StringClass(this);
                    this.Number = new NumberClass(this);

                    this.BooleanPrototype = new BooleanPrototype(this);
                    this.Boolean = new BooleanClass(this);

                    this.RegExpPrototype = new RegExpPrototype(this);
                    this.RegExp = new RegExpClass(this);

                    this.Esper = new EsperClass(this);
                    this.ErrorPrototype = new ErrorPrototype(this);
                    this.Error = new ErrorClass(this);
                    this.ErrorPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Error, false));

                    /** @type {Value} */
                    this.console = new ConsoleClass(this);

                    var scope = new Scope(this);
                    scope.object.clazz = 'global';
                    scope.strict = options.strict || false;
                    var that = this;
                    var printer = EasyNativeFunction.makeForNative(this, function () {
                        that.print.apply(that, arguments);
                    });
                    scope.set('print', printer);
                    scope.set('log', printer);

                    scope.addConst('NaN', this.fromNative(NaN));
                    scope.addConst('Infinity', this.fromNative(Infinity));

                    scope.set('console', this.console);
                    scope.set('JSON', new JSONClass(this));

                    if (options.exposeEsperGlobal) {
                        scope.set('Esper', this.Esper);
                    }

                    scope.set('Math', this.Math);

                    scope.set('Number', this.Number);
                    scope.set('Boolean', this.Boolean);
                    scope.set('Object', this.Object);
                    scope.set('Function', this.Function);
                    scope.set('Array', this.Array);
                    scope.set('String', this.String);
                    scope.set('RegExp', this.RegExp);

                    scope.set('Error', this.Error);
                    scope.set('TypeError', this.TypeError = this.Error.makeErrorType(TypeError));
                    scope.set('SyntaxError', this.SyntaxError = this.Error.makeErrorType(SyntaxError));
                    scope.set('ReferenceError', this.ReferenceError = this.Error.makeErrorType(ReferenceError));
                    scope.set('RangeError', this.RangeError = this.Error.makeErrorType(RangeError));
                    scope.set('EvalError', this.EvalError = this.Error.makeErrorType(EvalError));
                    scope.set('URIError', this.URIError = this.Error.makeErrorType(URIError));

                    scope.set('parseInt', EasyNativeFunction.makeForNative(this, parseInt));
                    scope.set('parseFloat', EasyNativeFunction.makeForNative(this, parseFloat));
                    scope.set('isNaN', EasyNativeFunction.makeForNative(this, isNaN));
                    scope.set('isFinite', EasyNativeFunction.makeForNative(this, isFinite));

                    //scope.set('Date', this.fromNative(Date));
                    scope.set('eval', new EvalFunction(this));
                    scope.set('assert', new AssertClass(this));

                    scope.thiz = scope.object;
                    this.importCache = new _weakMap2.default();
                    /** @type {Scope} */
                    this.globalScope = scope;
                }

                (0, _createClass3.default)(Realm, [{
                    key: 'lookupWellKnown',
                    value: function lookupWellKnown(v) {
                        if (v === Object) return this.Object;
                        if (v === Object.prototype) return this.ObjectPrototype;
                        if (v === Function) return this.Function;
                        if (v === Function.prototype) return this.FunctionPrototype;
                        if (v === Math) return this.Math;
                        if (v === Number) return this.Number;
                        if (v === Number.prototype) return this.NumberPrototype;
                        if (v === String) return this.String;
                        if (v === String.prototype) return this.StringPrototype;
                        if (v === Array) return this.Array;
                        if (v === Array.prototype) return this.ArrayPrototype;
                        if (v === RegExp) return this.RegExp;
                        if (v === RegExp.prototype) return this.RegExpPrototype;
                        if (typeof console !== 'undefined' && v === console) return this.console;
                    }
                }, {
                    key: 'valueFromNative',
                    value: function valueFromNative(native) {
                        return Value.fromNative(native, this);
                    }
                }, {
                    key: 'fromNative',
                    value: function fromNative(native) {
                        return Value.fromNative(native, this);
                    }
                }, {
                    key: 'import',
                    value: function _import(native, modeHint) {
                        if (native instanceof Value) return native;
                        if (native === undefined) return Value.undef;

                        var prim = Value.fromPrimativeNative(native);
                        if (prim) return prim;

                        //if ( this.importCache.has(native) ) {
                        //	return this.importCache.get(native);
                        //}

                        if (Value.hasBookmark(native)) {
                            return Value.getBookmark(native);
                        }

                        var result = undefined;
                        switch (modeHint || this.options.foreignObjectMode) {
                            case 'bridge':
                                result = BridgeValue.make(native, this);
                                break;
                            case 'smart':
                                result = SmartLinkValue.make(native, this);
                                break;
                            case 'link':
                            default:
                                result = LinkValue.make(native, this);
                                break;
                        }

                        //this.importCache.set(native, result);
                        return result;
                    }
                }]);
                return Realm;
            }();

            Realm.prototype.makeForForeignObject = Realm.prototype.import;

            module.exports = Realm;

            /***/ },
        /* 152 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var PropertyDescriptor = __webpack_require__(127);

            var Value = __webpack_require__(103);
            var ObjectValue = __webpack_require__(120);

            var Scope = function () {
                function Scope(realm) {
                    (0, _classCallCheck3.default)(this, Scope);

                    this.parent = null;
                    this.object = new ObjectValue(realm);
                    this.strict = false;
                    this.realm = realm;
                    this.global = this;
                    this.writeTo = this.object;
                }

                /**
                 * @param {string} name - Identifier to retreive
                 * @returns {Value}
                 */

                (0, _createClass3.default)(Scope, [{
                    key: 'get',
                    value: function get(name) {
                        //Fast property access in the common case.
                        var prop = this.object.properties[name];
                        if (!prop) return Value.undef;
                        if (!prop.getter) return prop.value;
                        return this.object.getImmediate(name);
                    }
                }, {
                    key: 'ref',
                    value: function ref(name) {
                        var vhar = this.object.properties[name];
                        if (!vhar) return undefined;
                        var that = this;
                        var o = {
                            setValue: vhar.setValue.bind(vhar, this),
                            getValue: vhar.getValue.bind(vhar, this),
                            isVariable: true
                        };
                        return o;
                    }
                }, {
                    key: 'add',
                    value: function add(name, value) {
                        this.writeTo.setImmediate(name, value);
                    }
                }, {
                    key: 'addConst',
                    value: function addConst(name, value) {
                        this.set(name, value);
                        this.writeTo.properties[name].writable = false;
                        this.writeTo.properties[name].configurable = false;
                    }

                    /**
                     * Sets an identifier in the scope to some value.
                     *
                     * @param {string} name - Identifier to set
                     * @param {Value} value - Value to set
                     */

                }, {
                    key: 'set',
                    value: function set(name, value) {
                        this.writeTo.setImmediate(name, value);
                    }
                }, {
                    key: 'has',
                    value: function has(name) {
                        return this.object.has(name);
                    }

                    /**
                     * Set the identifier in its nearest scope, or create a global.
                     * @param {string} name - Identifier to retreive
                     * @param {Value} value - New vaalue of variable
                     * @param {Scope} s - Code scope to run setter functions in
                     */

                }, {
                    key: 'put',
                    value: function put(name, value, s) {
                        var variable = this.object.properties[name];
                        if (variable) {
                            return variable.setValue(this.object, value, s);
                        }
                        var v = new PropertyDescriptor(value, this);
                        this.writeTo.properties[name] = v;
                        return Value.undef.fastGen();
                    }
                }, {
                    key: 'createChild',
                    value: function createChild() {
                        var child = new Scope(this.realm);
                        child.object.eraseAndSetPrototype(this.object);
                        child.parent = this;
                        child.strict = this.strict;
                        child.global = this.global;
                        child.realm = this.realm;
                        return child;
                    }
                }, {
                    key: 'fromNative',
                    value: function fromNative(value) {
                        return this.realm.fromNative(value);
                    }
                }, {
                    key: 'getVariableNames',
                    value: function getVariableNames() {
                        var list = [];
                        for (var o in this.object.properties) {
                            list.push(o);
                        }return list;
                    }
                }]);
                return Scope;
            }();

            module.exports = Scope;

            /***/ },
        /* 153 */
        /***/ function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
             Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.

             Redistribution and use in source and binary forms, with or without
             modification, are permitted provided that the following conditions are met:

             * Redistributions of source code must retain the above copyright
             notice, this list of conditions and the following disclaimer.
             * Redistributions in binary form must reproduce the above copyright
             notice, this list of conditions and the following disclaimer in the
             documentation and/or other materials provided with the distribution.

             THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
             AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
             IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
             ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
             DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
             (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
             LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
             ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
             (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
             THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
             */

            (function (root, factory) {
                'use strict';

                // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
                // Rhino, and plain browser loading.

                /* istanbul ignore next */
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else if (typeof exports !== 'undefined') {
                    factory(exports);
                } else {
                    factory((root.esprima = {}));
                }
            }(this, function (exports) {
                'use strict';

                var Token,
                    TokenName,
                    FnExprTokens,
                    Syntax,
                    PlaceHolders,
                    Messages,
                    Regex,
                    source,
                    strict,
                    index,
                    lineNumber,
                    lineStart,
                    hasLineTerminator,
                    lastIndex,
                    lastLineNumber,
                    lastLineStart,
                    startIndex,
                    startLineNumber,
                    startLineStart,
                    scanning,
                    length,
                    lookahead,
                    state,
                    extra,
                    isBindingElement,
                    isAssignmentTarget,
                    firstCoverInitializedNameError;

                Token = {
                    BooleanLiteral: 1,
                    EOF: 2,
                    Identifier: 3,
                    Keyword: 4,
                    NullLiteral: 5,
                    NumericLiteral: 6,
                    Punctuator: 7,
                    StringLiteral: 8,
                    RegularExpression: 9,
                    Template: 10
                };

                TokenName = {};
                TokenName[Token.BooleanLiteral] = 'Boolean';
                TokenName[Token.EOF] = '<end>';
                TokenName[Token.Identifier] = 'Identifier';
                TokenName[Token.Keyword] = 'Keyword';
                TokenName[Token.NullLiteral] = 'Null';
                TokenName[Token.NumericLiteral] = 'Numeric';
                TokenName[Token.Punctuator] = 'Punctuator';
                TokenName[Token.StringLiteral] = 'String';
                TokenName[Token.RegularExpression] = 'RegularExpression';
                TokenName[Token.Template] = 'Template';

                // A function following one of those tokens is an expression.
                FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

                Syntax = {
                    AssignmentExpression: 'AssignmentExpression',
                    AssignmentPattern: 'AssignmentPattern',
                    ArrayExpression: 'ArrayExpression',
                    ArrayPattern: 'ArrayPattern',
                    ArrowFunctionExpression: 'ArrowFunctionExpression',
                    BlockStatement: 'BlockStatement',
                    BinaryExpression: 'BinaryExpression',
                    BreakStatement: 'BreakStatement',
                    CallExpression: 'CallExpression',
                    CatchClause: 'CatchClause',
                    ClassBody: 'ClassBody',
                    ClassDeclaration: 'ClassDeclaration',
                    ClassExpression: 'ClassExpression',
                    ConditionalExpression: 'ConditionalExpression',
                    ContinueStatement: 'ContinueStatement',
                    DoWhileStatement: 'DoWhileStatement',
                    DebuggerStatement: 'DebuggerStatement',
                    EmptyStatement: 'EmptyStatement',
                    ExportAllDeclaration: 'ExportAllDeclaration',
                    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
                    ExportNamedDeclaration: 'ExportNamedDeclaration',
                    ExportSpecifier: 'ExportSpecifier',
                    ExpressionStatement: 'ExpressionStatement',
                    ForStatement: 'ForStatement',
                    ForOfStatement: 'ForOfStatement',
                    ForInStatement: 'ForInStatement',
                    FunctionDeclaration: 'FunctionDeclaration',
                    FunctionExpression: 'FunctionExpression',
                    Identifier: 'Identifier',
                    IfStatement: 'IfStatement',
                    ImportDeclaration: 'ImportDeclaration',
                    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
                    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
                    ImportSpecifier: 'ImportSpecifier',
                    Literal: 'Literal',
                    LabeledStatement: 'LabeledStatement',
                    LogicalExpression: 'LogicalExpression',
                    MemberExpression: 'MemberExpression',
                    MetaProperty: 'MetaProperty',
                    MethodDefinition: 'MethodDefinition',
                    NewExpression: 'NewExpression',
                    ObjectExpression: 'ObjectExpression',
                    ObjectPattern: 'ObjectPattern',
                    Program: 'Program',
                    Property: 'Property',
                    RestElement: 'RestElement',
                    ReturnStatement: 'ReturnStatement',
                    SequenceExpression: 'SequenceExpression',
                    SpreadElement: 'SpreadElement',
                    Super: 'Super',
                    SwitchCase: 'SwitchCase',
                    SwitchStatement: 'SwitchStatement',
                    TaggedTemplateExpression: 'TaggedTemplateExpression',
                    TemplateElement: 'TemplateElement',
                    TemplateLiteral: 'TemplateLiteral',
                    ThisExpression: 'ThisExpression',
                    ThrowStatement: 'ThrowStatement',
                    TryStatement: 'TryStatement',
                    UnaryExpression: 'UnaryExpression',
                    UpdateExpression: 'UpdateExpression',
                    VariableDeclaration: 'VariableDeclaration',
                    VariableDeclarator: 'VariableDeclarator',
                    WhileStatement: 'WhileStatement',
                    WithStatement: 'WithStatement',
                    YieldExpression: 'YieldExpression'
                };

                PlaceHolders = {
                    ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'
                };

                // Error messages should be identical to V8.
                Messages = {
                    UnexpectedToken: 'Unexpected token %0',
                    UnexpectedNumber: 'Unexpected number',
                    UnexpectedString: 'Unexpected string',
                    UnexpectedIdentifier: 'Unexpected identifier',
                    UnexpectedReserved: 'Unexpected reserved word',
                    UnexpectedTemplate: 'Unexpected quasi %0',
                    UnexpectedEOS: 'Unexpected end of input',
                    NewlineAfterThrow: 'Illegal newline after throw',
                    InvalidRegExp: 'Invalid regular expression',
                    UnterminatedRegExp: 'Invalid regular expression: missing /',
                    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
                    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
                    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
                    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
                    NoCatchOrFinally: 'Missing catch or finally after try',
                    UnknownLabel: 'Undefined label \'%0\'',
                    Redeclaration: '%0 \'%1\' has already been declared',
                    IllegalContinue: 'Illegal continue statement',
                    IllegalBreak: 'Illegal break statement',
                    IllegalReturn: 'Illegal return statement',
                    StrictModeWith: 'Strict mode code may not include a with statement',
                    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
                    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
                    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
                    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
                    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
                    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
                    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
                    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
                    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
                    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
                    StrictReservedWord: 'Use of future reserved word in strict mode',
                    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
                    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
                    DefaultRestParameter: 'Unexpected token =',
                    ObjectPatternAsRestParameter: 'Unexpected token {',
                    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
                    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
                    DuplicateConstructor: 'A class may only have one constructor',
                    StaticPrototype: 'Classes may not have static property named prototype',
                    MissingFromClause: 'Unexpected token',
                    NoAsAfterImportNamespace: 'Unexpected token',
                    InvalidModuleSpecifier: 'Unexpected token',
                    IllegalImportDeclaration: 'Unexpected token',
                    IllegalExportDeclaration: 'Unexpected token',
                    DuplicateBinding: 'Duplicate binding %0'
                };

                // See also tools/generate-unicode-regex.js.
                Regex = {
                    // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
                    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

                    // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
                    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
                };

                // Ensure the condition is true, otherwise throw an error.
                // This is only to have a better contract semantic, i.e. another safety net
                // to catch a logic error. The condition shall be fulfilled in normal case.
                // Do NOT use this to enforce a certain condition on any user input.

                function assert(condition, message) {
                    /* istanbul ignore if */
                    if (!condition) {
                        throw new Error('ASSERT: ' + message);
                    }
                }

                function isDecimalDigit(ch) {
                    return (ch >= 0x30 && ch <= 0x39);   // 0..9
                }

                function isHexDigit(ch) {
                    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
                }

                function isOctalDigit(ch) {
                    return '01234567'.indexOf(ch) >= 0;
                }

                function octalToDecimal(ch) {
                    // \0 is not octal escape sequence
                    var octal = (ch !== '0'), code = '01234567'.indexOf(ch);

                    if (index < length && isOctalDigit(source[index])) {
                        octal = true;
                        code = code * 8 + '01234567'.indexOf(source[index++]);

                        // 3 digits are only allowed when string starts
                        // with 0, 1, 2, 3
                        if ('0123'.indexOf(ch) >= 0 &&
                            index < length &&
                            isOctalDigit(source[index])) {
                            code = code * 8 + '01234567'.indexOf(source[index++]);
                        }
                    }

                    return {
                        code: code,
                        octal: octal
                    };
                }

                // ECMA-262 11.2 White Space

                function isWhiteSpace(ch) {
                    return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
                        (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
                }

                // ECMA-262 11.3 Line Terminators

                function isLineTerminator(ch) {
                    return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
                }

                // ECMA-262 11.6 Identifier Names and Identifiers

                function fromCodePoint(cp) {
                    return (cp < 0x10000) ? String.fromCharCode(cp) :
                    String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
                    String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
                }

                function isIdentifierStart(ch) {
                    return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
                        (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
                        (ch >= 0x61 && ch <= 0x7A) ||         // a..z
                        (ch === 0x5C) ||                      // \ (backslash)
                        ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));
                }

                function isIdentifierPart(ch) {
                    return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
                        (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
                        (ch >= 0x61 && ch <= 0x7A) ||         // a..z
                        (ch >= 0x30 && ch <= 0x39) ||         // 0..9
                        (ch === 0x5C) ||                      // \ (backslash)
                        ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));
                }

                // ECMA-262 11.6.2.2 Future Reserved Words

                function isFutureReservedWord(id) {
                    switch (id) {
                        case 'enum':
                        case 'export':
                        case 'import':
                        case 'super':
                            return true;
                        default:
                            return false;
                    }
                }

                function isStrictModeReservedWord(id) {
                    switch (id) {
                        case 'implements':
                        case 'interface':
                        case 'package':
                        case 'private':
                        case 'protected':
                        case 'public':
                        case 'static':
                        case 'yield':
                        case 'let':
                            return true;
                        default:
                            return false;
                    }
                }

                function isRestrictedWord(id) {
                    return id === 'eval' || id === 'arguments';
                }

                // ECMA-262 11.6.2.1 Keywords

                function isKeyword(id) {
                    switch (id.length) {
                        case 2:
                            return (id === 'if') || (id === 'in') || (id === 'do');
                        case 3:
                            return (id === 'var') || (id === 'for') || (id === 'new') ||
                                (id === 'try') || (id === 'let');
                        case 4:
                            return (id === 'this') || (id === 'else') || (id === 'case') ||
                                (id === 'void') || (id === 'with') || (id === 'enum');
                        case 5:
                            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                                (id === 'class') || (id === 'super');
                        case 6:
                            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                                (id === 'switch') || (id === 'export') || (id === 'import');
                        case 7:
                            return (id === 'default') || (id === 'finally') || (id === 'extends');
                        case 8:
                            return (id === 'function') || (id === 'continue') || (id === 'debugger');
                        case 10:
                            return (id === 'instanceof');
                        default:
                            return false;
                    }
                }

                // ECMA-262 11.4 Comments

                function addComment(type, value, start, end, loc) {
                    var comment;

                    assert(typeof start === 'number', 'Comment must have valid position');

                    state.lastCommentStart = start;

                    comment = {
                        type: type,
                        value: value
                    };
                    if (extra.range) {
                        comment.range = [start, end];
                    }
                    if (extra.loc) {
                        comment.loc = loc;
                    }
                    extra.comments.push(comment);
                    if (extra.attachComment) {
                        extra.leadingComments.push(comment);
                        extra.trailingComments.push(comment);
                    }
                    if (extra.tokenize) {
                        comment.type = comment.type + 'Comment';
                        if (extra.delegate) {
                            comment = extra.delegate(comment);
                        }
                        extra.tokens.push(comment);
                    }
                }

                function skipSingleLineComment(offset) {
                    var start, loc, ch, comment;

                    start = index - offset;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart - offset
                        }
                    };

                    while (index < length) {
                        ch = source.charCodeAt(index);
                        ++index;
                        if (isLineTerminator(ch)) {
                            hasLineTerminator = true;
                            if (extra.comments) {
                                comment = source.slice(start + offset, index - 1);
                                loc.end = {
                                    line: lineNumber,
                                    column: index - lineStart - 1
                                };
                                addComment('Line', comment, start, index - 1, loc);
                            }
                            if (ch === 13 && source.charCodeAt(index) === 10) {
                                ++index;
                            }
                            ++lineNumber;
                            lineStart = index;
                            return;
                        }
                    }

                    if (extra.comments) {
                        comment = source.slice(start + offset, index);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Line', comment, start, index, loc);
                    }
                }

                function skipMultiLineComment() {
                    var start, loc, ch, comment;

                    if (extra.comments) {
                        start = index - 2;
                        loc = {
                            start: {
                                line: lineNumber,
                                column: index - lineStart - 2
                            }
                        };
                    }

                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (isLineTerminator(ch)) {
                            if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                                ++index;
                            }
                            hasLineTerminator = true;
                            ++lineNumber;
                            ++index;
                            lineStart = index;
                        } else if (ch === 0x2A) {
                            // Block comment ends with '*/'.
                            if (source.charCodeAt(index + 1) === 0x2F) {
                                ++index;
                                ++index;
                                if (extra.comments) {
                                    comment = source.slice(start + 2, index - 2);
                                    loc.end = {
                                        line: lineNumber,
                                        column: index - lineStart
                                    };
                                    addComment('Block', comment, start, index, loc);
                                }
                                return;
                            }
                            ++index;
                        } else {
                            ++index;
                        }
                    }

                    // Ran off the end of the file - the whole thing is a comment
                    if (extra.comments) {
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        comment = source.slice(start + 2, index);
                        addComment('Block', comment, start, index, loc);
                    }
                    tolerateUnexpectedToken();
                }

                function skipComment() {
                    var ch, start;
                    hasLineTerminator = false;

                    start = (index === 0);
                    while (index < length) {
                        ch = source.charCodeAt(index);

                        if (isWhiteSpace(ch)) {
                            ++index;
                        } else if (isLineTerminator(ch)) {
                            hasLineTerminator = true;
                            ++index;
                            if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                                ++index;
                            }
                            ++lineNumber;
                            lineStart = index;
                            start = true;
                        } else if (ch === 0x2F) { // U+002F is '/'
                            ch = source.charCodeAt(index + 1);
                            if (ch === 0x2F) {
                                ++index;
                                ++index;
                                skipSingleLineComment(2);
                                start = true;
                            } else if (ch === 0x2A) {  // U+002A is '*'
                                ++index;
                                ++index;
                                skipMultiLineComment();
                            } else {
                                break;
                            }
                        } else if (start && ch === 0x2D) { // U+002D is '-'
                            // U+003E is '>'
                            if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                                // '-->' is a single-line comment
                                index += 3;
                                skipSingleLineComment(3);
                            } else {
                                break;
                            }
                        } else if (ch === 0x3C) { // U+003C is '<'
                            if (source.slice(index + 1, index + 4) === '!--') {
                                ++index; // `<`
                                ++index; // `!`
                                ++index; // `-`
                                ++index; // `-`
                                skipSingleLineComment(4);
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                function scanHexEscape(prefix) {
                    var i, len, ch, code = 0;

                    len = (prefix === 'u') ? 4 : 2;
                    for (i = 0; i < len; ++i) {
                        if (index < length && isHexDigit(source[index])) {
                            ch = source[index++];
                            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
                        } else {
                            return '';
                        }
                    }
                    return String.fromCharCode(code);
                }

                function scanUnicodeCodePointEscape() {
                    var ch, code;

                    ch = source[index];
                    code = 0;

                    // At least, one hex digit is required.
                    if (ch === '}') {
                        throwUnexpectedToken();
                    }

                    while (index < length) {
                        ch = source[index++];
                        if (!isHexDigit(ch)) {
                            break;
                        }
                        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
                    }

                    if (code > 0x10FFFF || ch !== '}') {
                        throwUnexpectedToken();
                    }

                    return fromCodePoint(code);
                }

                function codePointAt(i) {
                    var cp, first, second;

                    cp = source.charCodeAt(i);
                    if (cp >= 0xD800 && cp <= 0xDBFF) {
                        second = source.charCodeAt(i + 1);
                        if (second >= 0xDC00 && second <= 0xDFFF) {
                            first = cp;
                            cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                        }
                    }

                    return cp;
                }

                function getComplexIdentifier() {
                    var cp, ch, id;

                    cp = codePointAt(index);
                    id = fromCodePoint(cp);
                    index += id.length;

                    // '\u' (U+005C, U+0075) denotes an escaped character.
                    if (cp === 0x5C) {
                        if (source.charCodeAt(index) !== 0x75) {
                            throwUnexpectedToken();
                        }
                        ++index;
                        if (source[index] === '{') {
                            ++index;
                            ch = scanUnicodeCodePointEscape();
                        } else {
                            ch = scanHexEscape('u');
                            cp = ch.charCodeAt(0);
                            if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
                                throwUnexpectedToken();
                            }
                        }
                        id = ch;
                    }

                    while (index < length) {
                        cp = codePointAt(index);
                        if (!isIdentifierPart(cp)) {
                            break;
                        }
                        ch = fromCodePoint(cp);
                        id += ch;
                        index += ch.length;

                        // '\u' (U+005C, U+0075) denotes an escaped character.
                        if (cp === 0x5C) {
                            id = id.substr(0, id.length - 1);
                            if (source.charCodeAt(index) !== 0x75) {
                                throwUnexpectedToken();
                            }
                            ++index;
                            if (source[index] === '{') {
                                ++index;
                                ch = scanUnicodeCodePointEscape();
                            } else {
                                ch = scanHexEscape('u');
                                cp = ch.charCodeAt(0);
                                if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
                                    throwUnexpectedToken();
                                }
                            }
                            id += ch;
                        }
                    }

                    return id;
                }

                function getIdentifier() {
                    var start, ch;

                    start = index++;
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (ch === 0x5C) {
                            // Blackslash (U+005C) marks Unicode escape sequence.
                            index = start;
                            return getComplexIdentifier();
                        } else if (ch >= 0xD800 && ch < 0xDFFF) {
                            // Need to handle surrogate pairs.
                            index = start;
                            return getComplexIdentifier();
                        }
                        if (isIdentifierPart(ch)) {
                            ++index;
                        } else {
                            break;
                        }
                    }

                    return source.slice(start, index);
                }

                function scanIdentifier() {
                    var start, id, type;

                    start = index;

                    // Backslash (U+005C) starts an escaped character.
                    id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();

                    // There is no keyword or literal with only one character.
                    // Thus, it must be an identifier.
                    if (id.length === 1) {
                        type = Token.Identifier;
                    } else if (isKeyword(id)) {
                        type = Token.Keyword;
                    } else if (id === 'null') {
                        type = Token.NullLiteral;
                    } else if (id === 'true' || id === 'false') {
                        type = Token.BooleanLiteral;
                    } else {
                        type = Token.Identifier;
                    }

                    return {
                        type: type,
                        value: id,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }


                // ECMA-262 11.7 Punctuators

                function scanPunctuator() {
                    var token, str;

                    token = {
                        type: Token.Punctuator,
                        value: '',
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: index,
                        end: index
                    };

                    // Check for most common single-character punctuators.
                    str = source[index];
                    switch (str) {

                        case '(':
                            if (extra.tokenize) {
                                extra.openParenToken = extra.tokenValues.length;
                            }
                            ++index;
                            break;

                        case '{':
                            if (extra.tokenize) {
                                extra.openCurlyToken = extra.tokenValues.length;
                            }
                            state.curlyStack.push('{');
                            ++index;
                            break;

                        case '.':
                            ++index;
                            if (source[index] === '.' && source[index + 1] === '.') {
                                // Spread operator: ...
                                index += 2;
                                str = '...';
                            }
                            break;

                        case '}':
                            ++index;
                            state.curlyStack.pop();
                            break;
                        case ')':
                        case ';':
                        case ',':
                        case '[':
                        case ']':
                        case ':':
                        case '?':
                        case '~':
                            ++index;
                            break;

                        default:
                            // 4-character punctuator.
                            str = source.substr(index, 4);
                            if (str === '>>>=') {
                                index += 4;
                            } else {

                                // 3-character punctuators.
                                str = str.substr(0, 3);
                                if (str === '===' || str === '!==' || str === '>>>' ||
                                    str === '<<=' || str === '>>=') {
                                    index += 3;
                                } else {

                                    // 2-character punctuators.
                                    str = str.substr(0, 2);
                                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
                                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
                                        str === '++' || str === '--' || str === '<<' || str === '>>' ||
                                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
                                        str === '<=' || str === '>=' || str === '=>') {
                                        index += 2;
                                    } else {

                                        // 1-character punctuators.
                                        str = source[index];
                                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                                            ++index;
                                        }
                                    }
                                }
                            }
                    }

                    if (index === token.start) {
                        throwUnexpectedToken();
                    }

                    token.end = index;
                    token.value = str;
                    return token;
                }

                // ECMA-262 11.8.3 Numeric Literals

                function scanHexLiteral(start) {
                    var number = '';

                    while (index < length) {
                        if (!isHexDigit(source[index])) {
                            break;
                        }
                        number += source[index++];
                    }

                    if (number.length === 0) {
                        throwUnexpectedToken();
                    }

                    if (isIdentifierStart(source.charCodeAt(index))) {
                        throwUnexpectedToken();
                    }

                    return {
                        type: Token.NumericLiteral,
                        value: parseInt('0x' + number, 16),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                function scanBinaryLiteral(start) {
                    var ch, number;

                    number = '';

                    while (index < length) {
                        ch = source[index];
                        if (ch !== '0' && ch !== '1') {
                            break;
                        }
                        number += source[index++];
                    }

                    if (number.length === 0) {
                        // only 0b or 0B
                        throwUnexpectedToken();
                    }

                    if (index < length) {
                        ch = source.charCodeAt(index);
                        /* istanbul ignore else */
                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                            throwUnexpectedToken();
                        }
                    }

                    return {
                        type: Token.NumericLiteral,
                        value: parseInt(number, 2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                function scanOctalLiteral(prefix, start) {
                    var number, octal;

                    if (isOctalDigit(prefix)) {
                        octal = true;
                        number = '0' + source[index++];
                    } else {
                        octal = false;
                        ++index;
                        number = '';
                    }

                    while (index < length) {
                        if (!isOctalDigit(source[index])) {
                            break;
                        }
                        number += source[index++];
                    }

                    if (!octal && number.length === 0) {
                        // only 0o or 0O
                        throwUnexpectedToken();
                    }

                    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
                        throwUnexpectedToken();
                    }

                    return {
                        type: Token.NumericLiteral,
                        value: parseInt(number, 8),
                        octal: octal,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                function isImplicitOctalLiteral() {
                    var i, ch;

                    // Implicit octal, unless there is a non-octal digit.
                    // (Annex B.1.1 on Numeric Literals)
                    for (i = index + 1; i < length; ++i) {
                        ch = source[i];
                        if (ch === '8' || ch === '9') {
                            return false;
                        }
                        if (!isOctalDigit(ch)) {
                            return true;
                        }
                    }

                    return true;
                }

                function scanNumericLiteral() {
                    var number, start, ch;

                    ch = source[index];
                    assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
                        'Numeric literal must start with a decimal digit or a decimal point');

                    start = index;
                    number = '';
                    if (ch !== '.') {
                        number = source[index++];
                        ch = source[index];

                        // Hex number starts with '0x'.
                        // Octal number starts with '0'.
                        // Octal number in ES6 starts with '0o'.
                        // Binary number in ES6 starts with '0b'.
                        if (number === '0') {
                            if (ch === 'x' || ch === 'X') {
                                ++index;
                                return scanHexLiteral(start);
                            }
                            if (ch === 'b' || ch === 'B') {
                                ++index;
                                return scanBinaryLiteral(start);
                            }
                            if (ch === 'o' || ch === 'O') {
                                return scanOctalLiteral(ch, start);
                            }

                            if (isOctalDigit(ch)) {
                                if (isImplicitOctalLiteral()) {
                                    return scanOctalLiteral(ch, start);
                                }
                            }
                        }

                        while (isDecimalDigit(source.charCodeAt(index))) {
                            number += source[index++];
                        }
                        ch = source[index];
                    }

                    if (ch === '.') {
                        number += source[index++];
                        while (isDecimalDigit(source.charCodeAt(index))) {
                            number += source[index++];
                        }
                        ch = source[index];
                    }

                    if (ch === 'e' || ch === 'E') {
                        number += source[index++];

                        ch = source[index];
                        if (ch === '+' || ch === '-') {
                            number += source[index++];
                        }
                        if (isDecimalDigit(source.charCodeAt(index))) {
                            while (isDecimalDigit(source.charCodeAt(index))) {
                                number += source[index++];
                            }
                        } else {
                            throwUnexpectedToken();
                        }
                    }

                    if (isIdentifierStart(source.charCodeAt(index))) {
                        throwUnexpectedToken();
                    }

                    return {
                        type: Token.NumericLiteral,
                        value: parseFloat(number),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                // ECMA-262 11.8.4 String Literals

                function scanStringLiteral() {
                    var str = '', quote, start, ch, unescaped, octToDec, octal = false;

                    quote = source[index];
                    assert((quote === '\'' || quote === '"'),
                        'String literal must starts with a quote');

                    start = index;
                    ++index;

                    while (index < length) {
                        ch = source[index++];

                        if (ch === quote) {
                            quote = '';
                            break;
                        } else if (ch === '\\') {
                            ch = source[index++];
                            if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                                switch (ch) {
                                    case 'u':
                                    case 'x':
                                        if (source[index] === '{') {
                                            ++index;
                                            str += scanUnicodeCodePointEscape();
                                        } else {
                                            unescaped = scanHexEscape(ch);
                                            if (!unescaped) {
                                                throw throwUnexpectedToken();
                                            }
                                            str += unescaped;
                                        }
                                        break;
                                    case 'n':
                                        str += '\n';
                                        break;
                                    case 'r':
                                        str += '\r';
                                        break;
                                    case 't':
                                        str += '\t';
                                        break;
                                    case 'b':
                                        str += '\b';
                                        break;
                                    case 'f':
                                        str += '\f';
                                        break;
                                    case 'v':
                                        str += '\x0B';
                                        break;
                                    case '8':
                                    case '9':
                                        str += ch;
                                        tolerateUnexpectedToken();
                                        break;

                                    default:
                                        if (isOctalDigit(ch)) {
                                            octToDec = octalToDecimal(ch);

                                            octal = octToDec.octal || octal;
                                            str += String.fromCharCode(octToDec.code);
                                        } else {
                                            str += ch;
                                        }
                                        break;
                                }
                            } else {
                                ++lineNumber;
                                if (ch === '\r' && source[index] === '\n') {
                                    ++index;
                                }
                                lineStart = index;
                            }
                        } else if (isLineTerminator(ch.charCodeAt(0))) {
                            break;
                        } else {
                            str += ch;
                        }
                    }

                    if (quote !== '') {
                        throwUnexpectedToken();
                    }

                    return {
                        type: Token.StringLiteral,
                        value: str,
                        octal: octal,
                        lineNumber: startLineNumber,
                        lineStart: startLineStart,
                        start: start,
                        end: index
                    };
                }

                // ECMA-262 11.8.6 Template Literal Lexical Components

                function scanTemplate() {
                    var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;

                    terminated = false;
                    tail = false;
                    start = index;
                    head = (source[index] === '`');
                    rawOffset = 2;

                    ++index;

                    while (index < length) {
                        ch = source[index++];
                        if (ch === '`') {
                            rawOffset = 1;
                            tail = true;
                            terminated = true;
                            break;
                        } else if (ch === '$') {
                            if (source[index] === '{') {
                                state.curlyStack.push('${');
                                ++index;
                                terminated = true;
                                break;
                            }
                            cooked += ch;
                        } else if (ch === '\\') {
                            ch = source[index++];
                            if (!isLineTerminator(ch.charCodeAt(0))) {
                                switch (ch) {
                                    case 'n':
                                        cooked += '\n';
                                        break;
                                    case 'r':
                                        cooked += '\r';
                                        break;
                                    case 't':
                                        cooked += '\t';
                                        break;
                                    case 'u':
                                    case 'x':
                                        if (source[index] === '{') {
                                            ++index;
                                            cooked += scanUnicodeCodePointEscape();
                                        } else {
                                            restore = index;
                                            unescaped = scanHexEscape(ch);
                                            if (unescaped) {
                                                cooked += unescaped;
                                            } else {
                                                index = restore;
                                                cooked += ch;
                                            }
                                        }
                                        break;
                                    case 'b':
                                        cooked += '\b';
                                        break;
                                    case 'f':
                                        cooked += '\f';
                                        break;
                                    case 'v':
                                        cooked += '\v';
                                        break;

                                    default:
                                        if (ch === '0') {
                                            if (isDecimalDigit(source.charCodeAt(index))) {
                                                // Illegal: \01 \02 and so on
                                                throwError(Messages.TemplateOctalLiteral);
                                            }
                                            cooked += '\0';
                                        } else if (isOctalDigit(ch)) {
                                            // Illegal: \1 \2
                                            throwError(Messages.TemplateOctalLiteral);
                                        } else {
                                            cooked += ch;
                                        }
                                        break;
                                }
                            } else {
                                ++lineNumber;
                                if (ch === '\r' && source[index] === '\n') {
                                    ++index;
                                }
                                lineStart = index;
                            }
                        } else if (isLineTerminator(ch.charCodeAt(0))) {
                            ++lineNumber;
                            if (ch === '\r' && source[index] === '\n') {
                                ++index;
                            }
                            lineStart = index;
                            cooked += '\n';
                        } else {
                            cooked += ch;
                        }
                    }

                    if (!terminated) {
                        throwUnexpectedToken();
                    }

                    if (!head) {
                        state.curlyStack.pop();
                    }

                    return {
                        type: Token.Template,
                        value: {
                            cooked: cooked,
                            raw: source.slice(start + 1, index - rawOffset)
                        },
                        head: head,
                        tail: tail,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }

                // ECMA-262 11.8.5 Regular Expression Literals

                function testRegExp(pattern, flags) {
                    // The BMP character to use as a replacement for astral symbols when
                    // translating an ES6 "u"-flagged pattern to an ES5-compatible
                    // approximation.
                    // Note: replacing with '\uFFFF' enables false positives in unlikely
                    // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
                    // pattern that would not be detected by this substitution.
                    var astralSubstitute = '\uFFFF',
                        tmp = pattern;

                    if (flags.indexOf('u') >= 0) {
                        tmp = tmp
                        // Replace every Unicode escape sequence with the equivalent
                        // BMP character or a constant ASCII code point in the case of
                        // astral symbols. (See the above note on `astralSubstitute`
                        // for more information.)
                            .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                                var codePoint = parseInt($1 || $2, 16);
                                if (codePoint > 0x10FFFF) {
                                    throwUnexpectedToken(null, Messages.InvalidRegExp);
                                }
                                if (codePoint <= 0xFFFF) {
                                    return String.fromCharCode(codePoint);
                                }
                                return astralSubstitute;
                            })
                            // Replace each paired surrogate with a single ASCII symbol to
                            // avoid throwing on regular expressions that are only valid in
                            // combination with the "u" flag.
                            .replace(
                                /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                                astralSubstitute
                            );
                    }

                    // First, detect invalid regular expressions.
                    try {
                        RegExp(tmp);
                    } catch (e) {
                        throwUnexpectedToken(null, Messages.InvalidRegExp);
                    }

                    // Return a regular expression object for this pattern-flag pair, or
                    // `null` in case the current environment doesn't support the flags it
                    // uses.
                    try {
                        return new RegExp(pattern, flags);
                    } catch (exception) {
                        return null;
                    }
                }

                function scanRegExpBody() {
                    var ch, str, classMarker, terminated, body;

                    ch = source[index];
                    assert(ch === '/', 'Regular expression literal must start with a slash');
                    str = source[index++];

                    classMarker = false;
                    terminated = false;
                    while (index < length) {
                        ch = source[index++];
                        str += ch;
                        if (ch === '\\') {
                            ch = source[index++];
                            // ECMA-262 7.8.5
                            if (isLineTerminator(ch.charCodeAt(0))) {
                                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                            }
                            str += ch;
                        } else if (isLineTerminator(ch.charCodeAt(0))) {
                            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                        } else if (classMarker) {
                            if (ch === ']') {
                                classMarker = false;
                            }
                        } else {
                            if (ch === '/') {
                                terminated = true;
                                break;
                            } else if (ch === '[') {
                                classMarker = true;
                            }
                        }
                    }

                    if (!terminated) {
                        throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                    }

                    // Exclude leading and trailing slash.
                    body = str.substr(1, str.length - 2);
                    return {
                        value: body,
                        literal: str
                    };
                }

                function scanRegExpFlags() {
                    var ch, str, flags, restore;

                    str = '';
                    flags = '';
                    while (index < length) {
                        ch = source[index];
                        if (!isIdentifierPart(ch.charCodeAt(0))) {
                            break;
                        }

                        ++index;
                        if (ch === '\\' && index < length) {
                            ch = source[index];
                            if (ch === 'u') {
                                ++index;
                                restore = index;
                                ch = scanHexEscape('u');
                                if (ch) {
                                    flags += ch;
                                    for (str += '\\u'; restore < index; ++restore) {
                                        str += source[restore];
                                    }
                                } else {
                                    index = restore;
                                    flags += 'u';
                                    str += '\\u';
                                }
                                tolerateUnexpectedToken();
                            } else {
                                str += '\\';
                                tolerateUnexpectedToken();
                            }
                        } else {
                            flags += ch;
                            str += ch;
                        }
                    }

                    return {
                        value: flags,
                        literal: str
                    };
                }

                function scanRegExp() {
                    var start, body, flags, value;
                    scanning = true;

                    lookahead = null;
                    skipComment();
                    start = index;

                    body = scanRegExpBody();
                    flags = scanRegExpFlags();
                    value = testRegExp(body.value, flags.value);
                    scanning = false;
                    if (extra.tokenize) {
                        return {
                            type: Token.RegularExpression,
                            value: value,
                            regex: {
                                pattern: body.value,
                                flags: flags.value
                            },
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: start,
                            end: index
                        };
                    }

                    return {
                        literal: body.literal + flags.literal,
                        value: value,
                        regex: {
                            pattern: body.value,
                            flags: flags.value
                        },
                        start: start,
                        end: index
                    };
                }

                function collectRegex() {
                    var pos, loc, regex, token;

                    skipComment();

                    pos = index;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart
                        }
                    };

                    regex = scanRegExp();

                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart
                    };

                    /* istanbul ignore next */
                    if (!extra.tokenize) {
                        // Pop the previous token, which is likely '/' or '/='
                        if (extra.tokens.length > 0) {
                            token = extra.tokens[extra.tokens.length - 1];
                            if (token.range[0] === pos && token.type === 'Punctuator') {
                                if (token.value === '/' || token.value === '/=') {
                                    extra.tokens.pop();
                                }
                            }
                        }

                        extra.tokens.push({
                            type: 'RegularExpression',
                            value: regex.literal,
                            regex: regex.regex,
                            range: [pos, index],
                            loc: loc
                        });
                    }

                    return regex;
                }

                function isIdentifierName(token) {
                    return token.type === Token.Identifier ||
                        token.type === Token.Keyword ||
                        token.type === Token.BooleanLiteral ||
                        token.type === Token.NullLiteral;
                }

                // Using the following algorithm:
                // https://github.com/mozilla/sweet.js/wiki/design

                function advanceSlash() {
                    var regex, previous, check;

                    function testKeyword(value) {
                        return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');
                    }

                    previous = extra.tokenValues[extra.tokens.length - 1];
                    regex = (previous !== null);

                    switch (previous) {
                        case 'this':
                        case ']':
                            regex = false;
                            break;

                        case ')':
                            check = extra.tokenValues[extra.openParenToken - 1];
                            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
                            break;

                        case '}':
                            // Dividing a function by anything makes little sense,
                            // but we have to check for that.
                            regex = false;
                            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
                                // Anonymous function, e.g. function(){} /42
                                check = extra.tokenValues[extra.openCurlyToken - 4];
                                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;
                            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
                                // Named function, e.g. function f(){} /42/
                                check = extra.tokenValues[extra.openCurlyToken - 5];
                                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;
                            }
                    }

                    return regex ? collectRegex() : scanPunctuator();
                }

                function advance() {
                    var cp, token;

                    if (index >= length) {
                        return {
                            type: Token.EOF,
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: index,
                            end: index
                        };
                    }

                    cp = source.charCodeAt(index);

                    if (isIdentifierStart(cp)) {
                        token = scanIdentifier();
                        if (strict && isStrictModeReservedWord(token.value)) {
                            token.type = Token.Keyword;
                        }
                        return token;
                    }

                    // Very common: ( and ) and ;
                    if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
                        return scanPunctuator();
                    }

                    // String literal starts with single quote (U+0027) or double quote (U+0022).
                    if (cp === 0x27 || cp === 0x22) {
                        return scanStringLiteral();
                    }

                    // Dot (.) U+002E can also start a floating-point number, hence the need
                    // to check the next character.
                    if (cp === 0x2E) {
                        if (isDecimalDigit(source.charCodeAt(index + 1))) {
                            return scanNumericLiteral();
                        }
                        return scanPunctuator();
                    }

                    if (isDecimalDigit(cp)) {
                        return scanNumericLiteral();
                    }

                    // Slash (/) U+002F can also start a regex.
                    if (extra.tokenize && cp === 0x2F) {
                        return advanceSlash();
                    }

                    // Template literals start with ` (U+0060) for template head
                    // or } (U+007D) for template middle or template tail.
                    if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {
                        return scanTemplate();
                    }

                    // Possible identifier start in a surrogate pair.
                    if (cp >= 0xD800 && cp < 0xDFFF) {
                        cp = codePointAt(index);
                        if (isIdentifierStart(cp)) {
                            return scanIdentifier();
                        }
                    }

                    return scanPunctuator();
                }

                function collectToken() {
                    var loc, token, value, entry;

                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart
                        }
                    };

                    token = advance();
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart
                    };

                    if (token.type !== Token.EOF) {
                        value = source.slice(token.start, token.end);
                        entry = {
                            type: TokenName[token.type],
                            value: value,
                            range: [token.start, token.end],
                            loc: loc
                        };
                        if (token.regex) {
                            entry.regex = {
                                pattern: token.regex.pattern,
                                flags: token.regex.flags
                            };
                        }
                        if (extra.tokenValues) {
                            extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);
                        }
                        if (extra.tokenize) {
                            if (!extra.range) {
                                delete entry.range;
                            }
                            if (!extra.loc) {
                                delete entry.loc;
                            }
                            if (extra.delegate) {
                                entry = extra.delegate(entry);
                            }
                        }
                        extra.tokens.push(entry);
                    }

                    return token;
                }

                function lex() {
                    var token;
                    scanning = true;

                    lastIndex = index;
                    lastLineNumber = lineNumber;
                    lastLineStart = lineStart;

                    skipComment();

                    token = lookahead;

                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;

                    lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
                    scanning = false;
                    return token;
                }

                function peek() {
                    scanning = true;

                    skipComment();

                    lastIndex = index;
                    lastLineNumber = lineNumber;
                    lastLineStart = lineStart;

                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;

                    lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
                    scanning = false;
                }

                function Position() {
                    this.line = startLineNumber;
                    this.column = startIndex - startLineStart;
                }

                function SourceLocation() {
                    this.start = new Position();
                    this.end = null;
                }

                function WrappingSourceLocation(startToken) {
                    this.start = {
                        line: startToken.lineNumber,
                        column: startToken.start - startToken.lineStart
                    };
                    this.end = null;
                }

                function Node() {
                    if (extra.range) {
                        this.range = [startIndex, 0];
                    }
                    if (extra.loc) {
                        this.loc = new SourceLocation();
                    }
                }

                function WrappingNode(startToken) {
                    if (extra.range) {
                        this.range = [startToken.start, 0];
                    }
                    if (extra.loc) {
                        this.loc = new WrappingSourceLocation(startToken);
                    }
                }

                WrappingNode.prototype = Node.prototype = {

                    processComment: function () {
                        var lastChild,
                            innerComments,
                            leadingComments,
                            trailingComments,
                            bottomRight = extra.bottomRightStack,
                            i,
                            comment,
                            last = bottomRight[bottomRight.length - 1];

                        if (this.type === Syntax.Program) {
                            if (this.body.length > 0) {
                                return;
                            }
                        }
                        /**
                         * patch innnerComments for properties empty block
                         * `function a() {/** comments **\/}`
                         */

                        if (this.type === Syntax.BlockStatement && this.body.length === 0) {
                            innerComments = [];
                            for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                                comment = extra.leadingComments[i];
                                if (this.range[1] >= comment.range[1]) {
                                    innerComments.unshift(comment);
                                    extra.leadingComments.splice(i, 1);
                                    extra.trailingComments.splice(i, 1);
                                }
                            }
                            if (innerComments.length) {
                                this.innerComments = innerComments;
                                //bottomRight.push(this);
                                return;
                            }
                        }

                        if (extra.trailingComments.length > 0) {
                            trailingComments = [];
                            for (i = extra.trailingComments.length - 1; i >= 0; --i) {
                                comment = extra.trailingComments[i];
                                if (comment.range[0] >= this.range[1]) {
                                    trailingComments.unshift(comment);
                                    extra.trailingComments.splice(i, 1);
                                }
                            }
                            extra.trailingComments = [];
                        } else {
                            if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
                                trailingComments = last.trailingComments;
                                delete last.trailingComments;
                            }
                        }

                        // Eating the stack.
                        while (last && last.range[0] >= this.range[0]) {
                            lastChild = bottomRight.pop();
                            last = bottomRight[bottomRight.length - 1];
                        }

                        if (lastChild) {
                            if (lastChild.leadingComments) {
                                leadingComments = [];
                                for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
                                    comment = lastChild.leadingComments[i];
                                    if (comment.range[1] <= this.range[0]) {
                                        leadingComments.unshift(comment);
                                        lastChild.leadingComments.splice(i, 1);
                                    }
                                }

                                if (!lastChild.leadingComments.length) {
                                    lastChild.leadingComments = undefined;
                                }
                            }
                        } else if (extra.leadingComments.length > 0) {
                            leadingComments = [];
                            for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                                comment = extra.leadingComments[i];
                                if (comment.range[1] <= this.range[0]) {
                                    leadingComments.unshift(comment);
                                    extra.leadingComments.splice(i, 1);
                                }
                            }
                        }


                        if (leadingComments && leadingComments.length > 0) {
                            this.leadingComments = leadingComments;
                        }
                        if (trailingComments && trailingComments.length > 0) {
                            this.trailingComments = trailingComments;
                        }

                        bottomRight.push(this);
                    },

                    finish: function () {
                        if (extra.range) {
                            this.range[1] = lastIndex;
                        }
                        if (extra.loc) {
                            this.loc.end = {
                                line: lastLineNumber,
                                column: lastIndex - lastLineStart
                            };
                            if (extra.source) {
                                this.loc.source = extra.source;
                            }
                        }

                        if (extra.attachComment) {
                            this.processComment();
                        }
                    },

                    finishArrayExpression: function (elements) {
                        this.type = Syntax.ArrayExpression;
                        this.elements = elements;
                        this.finish();
                        return this;
                    },

                    finishArrayPattern: function (elements) {
                        this.type = Syntax.ArrayPattern;
                        this.elements = elements;
                        this.finish();
                        return this;
                    },

                    finishArrowFunctionExpression: function (params, defaults, body, expression) {
                        this.type = Syntax.ArrowFunctionExpression;
                        this.id = null;
                        this.params = params;
                        this.defaults = defaults;
                        this.body = body;
                        this.generator = false;
                        this.expression = expression;
                        this.finish();
                        return this;
                    },

                    finishAssignmentExpression: function (operator, left, right) {
                        this.type = Syntax.AssignmentExpression;
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                        this.finish();
                        return this;
                    },

                    finishAssignmentPattern: function (left, right) {
                        this.type = Syntax.AssignmentPattern;
                        this.left = left;
                        this.right = right;
                        this.finish();
                        return this;
                    },

                    finishBinaryExpression: function (operator, left, right) {
                        this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                        this.finish();
                        return this;
                    },

                    finishBlockStatement: function (body) {
                        this.type = Syntax.BlockStatement;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishBreakStatement: function (label) {
                        this.type = Syntax.BreakStatement;
                        this.label = label;
                        this.finish();
                        return this;
                    },

                    finishCallExpression: function (callee, args) {
                        this.type = Syntax.CallExpression;
                        this.callee = callee;
                        this.arguments = args;
                        this.finish();
                        return this;
                    },

                    finishCatchClause: function (param, body) {
                        this.type = Syntax.CatchClause;
                        this.param = param;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishClassBody: function (body) {
                        this.type = Syntax.ClassBody;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishClassDeclaration: function (id, superClass, body) {
                        this.type = Syntax.ClassDeclaration;
                        this.id = id;
                        this.superClass = superClass;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishClassExpression: function (id, superClass, body) {
                        this.type = Syntax.ClassExpression;
                        this.id = id;
                        this.superClass = superClass;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishConditionalExpression: function (test, consequent, alternate) {
                        this.type = Syntax.ConditionalExpression;
                        this.test = test;
                        this.consequent = consequent;
                        this.alternate = alternate;
                        this.finish();
                        return this;
                    },

                    finishContinueStatement: function (label) {
                        this.type = Syntax.ContinueStatement;
                        this.label = label;
                        this.finish();
                        return this;
                    },

                    finishDebuggerStatement: function () {
                        this.type = Syntax.DebuggerStatement;
                        this.finish();
                        return this;
                    },

                    finishDoWhileStatement: function (body, test) {
                        this.type = Syntax.DoWhileStatement;
                        this.body = body;
                        this.test = test;
                        this.finish();
                        return this;
                    },

                    finishEmptyStatement: function () {
                        this.type = Syntax.EmptyStatement;
                        this.finish();
                        return this;
                    },

                    finishExpressionStatement: function (expression) {
                        this.type = Syntax.ExpressionStatement;
                        this.expression = expression;
                        this.finish();
                        return this;
                    },

                    finishForStatement: function (init, test, update, body) {
                        this.type = Syntax.ForStatement;
                        this.init = init;
                        this.test = test;
                        this.update = update;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishForOfStatement: function (left, right, body) {
                        this.type = Syntax.ForOfStatement;
                        this.left = left;
                        this.right = right;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishForInStatement: function (left, right, body) {
                        this.type = Syntax.ForInStatement;
                        this.left = left;
                        this.right = right;
                        this.body = body;
                        this.each = false;
                        this.finish();
                        return this;
                    },

                    finishFunctionDeclaration: function (id, params, defaults, body, generator) {
                        this.type = Syntax.FunctionDeclaration;
                        this.id = id;
                        this.params = params;
                        this.defaults = defaults;
                        this.body = body;
                        this.generator = generator;
                        this.expression = false;
                        this.finish();
                        return this;
                    },

                    finishFunctionExpression: function (id, params, defaults, body, generator) {
                        this.type = Syntax.FunctionExpression;
                        this.id = id;
                        this.params = params;
                        this.defaults = defaults;
                        this.body = body;
                        this.generator = generator;
                        this.expression = false;
                        this.finish();
                        return this;
                    },

                    finishIdentifier: function (name) {
                        this.type = Syntax.Identifier;
                        this.name = name;
                        this.finish();
                        return this;
                    },

                    finishIfStatement: function (test, consequent, alternate) {
                        this.type = Syntax.IfStatement;
                        this.test = test;
                        this.consequent = consequent;
                        this.alternate = alternate;
                        this.finish();
                        return this;
                    },

                    finishLabeledStatement: function (label, body) {
                        this.type = Syntax.LabeledStatement;
                        this.label = label;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishLiteral: function (token) {
                        this.type = Syntax.Literal;
                        this.value = token.value;
                        this.raw = source.slice(token.start, token.end);
                        if (token.regex) {
                            this.regex = token.regex;
                        }
                        this.finish();
                        return this;
                    },

                    finishMemberExpression: function (accessor, object, property) {
                        this.type = Syntax.MemberExpression;
                        this.computed = accessor === '[';
                        this.object = object;
                        this.property = property;
                        this.finish();
                        return this;
                    },

                    finishMetaProperty: function (meta, property) {
                        this.type = Syntax.MetaProperty;
                        this.meta = meta;
                        this.property = property;
                        this.finish();
                        return this;
                    },

                    finishNewExpression: function (callee, args) {
                        this.type = Syntax.NewExpression;
                        this.callee = callee;
                        this.arguments = args;
                        this.finish();
                        return this;
                    },

                    finishObjectExpression: function (properties) {
                        this.type = Syntax.ObjectExpression;
                        this.properties = properties;
                        this.finish();
                        return this;
                    },

                    finishObjectPattern: function (properties) {
                        this.type = Syntax.ObjectPattern;
                        this.properties = properties;
                        this.finish();
                        return this;
                    },

                    finishPostfixExpression: function (operator, argument) {
                        this.type = Syntax.UpdateExpression;
                        this.operator = operator;
                        this.argument = argument;
                        this.prefix = false;
                        this.finish();
                        return this;
                    },

                    finishProgram: function (body, sourceType) {
                        this.type = Syntax.Program;
                        this.body = body;
                        this.sourceType = sourceType;
                        this.finish();
                        return this;
                    },

                    finishProperty: function (kind, key, computed, value, method, shorthand) {
                        this.type = Syntax.Property;
                        this.key = key;
                        this.computed = computed;
                        this.value = value;
                        this.kind = kind;
                        this.method = method;
                        this.shorthand = shorthand;
                        this.finish();
                        return this;
                    },

                    finishRestElement: function (argument) {
                        this.type = Syntax.RestElement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },

                    finishReturnStatement: function (argument) {
                        this.type = Syntax.ReturnStatement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },

                    finishSequenceExpression: function (expressions) {
                        this.type = Syntax.SequenceExpression;
                        this.expressions = expressions;
                        this.finish();
                        return this;
                    },

                    finishSpreadElement: function (argument) {
                        this.type = Syntax.SpreadElement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },

                    finishSwitchCase: function (test, consequent) {
                        this.type = Syntax.SwitchCase;
                        this.test = test;
                        this.consequent = consequent;
                        this.finish();
                        return this;
                    },

                    finishSuper: function () {
                        this.type = Syntax.Super;
                        this.finish();
                        return this;
                    },

                    finishSwitchStatement: function (discriminant, cases) {
                        this.type = Syntax.SwitchStatement;
                        this.discriminant = discriminant;
                        this.cases = cases;
                        this.finish();
                        return this;
                    },

                    finishTaggedTemplateExpression: function (tag, quasi) {
                        this.type = Syntax.TaggedTemplateExpression;
                        this.tag = tag;
                        this.quasi = quasi;
                        this.finish();
                        return this;
                    },

                    finishTemplateElement: function (value, tail) {
                        this.type = Syntax.TemplateElement;
                        this.value = value;
                        this.tail = tail;
                        this.finish();
                        return this;
                    },

                    finishTemplateLiteral: function (quasis, expressions) {
                        this.type = Syntax.TemplateLiteral;
                        this.quasis = quasis;
                        this.expressions = expressions;
                        this.finish();
                        return this;
                    },

                    finishThisExpression: function () {
                        this.type = Syntax.ThisExpression;
                        this.finish();
                        return this;
                    },

                    finishThrowStatement: function (argument) {
                        this.type = Syntax.ThrowStatement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },

                    finishTryStatement: function (block, handler, finalizer) {
                        this.type = Syntax.TryStatement;
                        this.block = block;
                        this.guardedHandlers = [];
                        this.handlers = handler ? [handler] : [];
                        this.handler = handler;
                        this.finalizer = finalizer;
                        this.finish();
                        return this;
                    },

                    finishUnaryExpression: function (operator, argument) {
                        this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
                        this.operator = operator;
                        this.argument = argument;
                        this.prefix = true;
                        this.finish();
                        return this;
                    },

                    finishVariableDeclaration: function (declarations) {
                        this.type = Syntax.VariableDeclaration;
                        this.declarations = declarations;
                        this.kind = 'var';
                        this.finish();
                        return this;
                    },

                    finishLexicalDeclaration: function (declarations, kind) {
                        this.type = Syntax.VariableDeclaration;
                        this.declarations = declarations;
                        this.kind = kind;
                        this.finish();
                        return this;
                    },

                    finishVariableDeclarator: function (id, init) {
                        this.type = Syntax.VariableDeclarator;
                        this.id = id;
                        this.init = init;
                        this.finish();
                        return this;
                    },

                    finishWhileStatement: function (test, body) {
                        this.type = Syntax.WhileStatement;
                        this.test = test;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishWithStatement: function (object, body) {
                        this.type = Syntax.WithStatement;
                        this.object = object;
                        this.body = body;
                        this.finish();
                        return this;
                    },

                    finishExportSpecifier: function (local, exported) {
                        this.type = Syntax.ExportSpecifier;
                        this.exported = exported || local;
                        this.local = local;
                        this.finish();
                        return this;
                    },

                    finishImportDefaultSpecifier: function (local) {
                        this.type = Syntax.ImportDefaultSpecifier;
                        this.local = local;
                        this.finish();
                        return this;
                    },

                    finishImportNamespaceSpecifier: function (local) {
                        this.type = Syntax.ImportNamespaceSpecifier;
                        this.local = local;
                        this.finish();
                        return this;
                    },

                    finishExportNamedDeclaration: function (declaration, specifiers, src) {
                        this.type = Syntax.ExportNamedDeclaration;
                        this.declaration = declaration;
                        this.specifiers = specifiers;
                        this.source = src;
                        this.finish();
                        return this;
                    },

                    finishExportDefaultDeclaration: function (declaration) {
                        this.type = Syntax.ExportDefaultDeclaration;
                        this.declaration = declaration;
                        this.finish();
                        return this;
                    },

                    finishExportAllDeclaration: function (src) {
                        this.type = Syntax.ExportAllDeclaration;
                        this.source = src;
                        this.finish();
                        return this;
                    },

                    finishImportSpecifier: function (local, imported) {
                        this.type = Syntax.ImportSpecifier;
                        this.local = local || imported;
                        this.imported = imported;
                        this.finish();
                        return this;
                    },

                    finishImportDeclaration: function (specifiers, src) {
                        this.type = Syntax.ImportDeclaration;
                        this.specifiers = specifiers;
                        this.source = src;
                        this.finish();
                        return this;
                    },

                    finishYieldExpression: function (argument, delegate) {
                        this.type = Syntax.YieldExpression;
                        this.argument = argument;
                        this.delegate = delegate;
                        this.finish();
                        return this;
                    }
                };


                function recordError(error) {
                    var e, existing;

                    for (e = 0; e < extra.errors.length; e++) {
                        existing = extra.errors[e];
                        // Prevent duplicated error.
                        /* istanbul ignore next */
                        if (existing.index === error.index && existing.message === error.message) {
                            return;
                        }
                    }

                    extra.errors.push(error);
                }

                function constructError(msg, column) {
                    var error = new Error(msg);
                    try {
                        throw error;
                    } catch (base) {
                        /* istanbul ignore else */
                        if (Object.create && Object.defineProperty) {
                            error = Object.create(base);
                            Object.defineProperty(error, 'column', { value: column });
                        }
                    } finally {
                        return error;
                    }
                }

                function createError(line, pos, description) {
                    var msg, column, error;

                    msg = 'Line ' + line + ': ' + description;
                    column = pos - (scanning ? lineStart : lastLineStart) + 1;
                    error = constructError(msg, column);
                    error.lineNumber = line;
                    error.description = description;
                    error.index = pos;
                    return error;
                }

                // Throw an exception

                function throwError(messageFormat) {
                    var args, msg;

                    args = Array.prototype.slice.call(arguments, 1);
                    msg = messageFormat.replace(/%(\d)/g,
                        function (whole, idx) {
                            assert(idx < args.length, 'Message reference must be in range');
                            return args[idx];
                        }
                    );

                    throw createError(lastLineNumber, lastIndex, msg);
                }

                function tolerateError(messageFormat) {
                    var args, msg, error;

                    args = Array.prototype.slice.call(arguments, 1);
                    /* istanbul ignore next */
                    msg = messageFormat.replace(/%(\d)/g,
                        function (whole, idx) {
                            assert(idx < args.length, 'Message reference must be in range');
                            return args[idx];
                        }
                    );

                    error = createError(lineNumber, lastIndex, msg);
                    if (extra.errors) {
                        recordError(error);
                    } else {
                        throw error;
                    }
                }

                // Throw an exception because of the token.

                function unexpectedTokenError(token, message) {
                    var value, msg = message || Messages.UnexpectedToken;

                    if (token) {
                        if (!message) {
                            msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
                                (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
                                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
                                        (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
                                            (token.type === Token.Template) ? Messages.UnexpectedTemplate :
                                                Messages.UnexpectedToken;

                            if (token.type === Token.Keyword) {
                                if (isFutureReservedWord(token.value)) {
                                    msg = Messages.UnexpectedReserved;
                                } else if (strict && isStrictModeReservedWord(token.value)) {
                                    msg = Messages.StrictReservedWord;
                                }
                            }
                        }

                        value = (token.type === Token.Template) ? token.value.raw : token.value;
                    } else {
                        value = 'ILLEGAL';
                    }

                    msg = msg.replace('%0', value);

                    return (token && typeof token.lineNumber === 'number') ?
                        createError(token.lineNumber, token.start, msg) :
                        createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
                }

                function throwUnexpectedToken(token, message) {
                    throw unexpectedTokenError(token, message);
                }

                function tolerateUnexpectedToken(token, message) {
                    var error = unexpectedTokenError(token, message);
                    if (extra.errors) {
                        recordError(error);
                    } else {
                        throw error;
                    }
                }

                // Expect the next token to match the specified punctuator.
                // If not, an exception will be thrown.

                function expect(value) {
                    var token = lex();
                    if (token.type !== Token.Punctuator || token.value !== value) {
                        throwUnexpectedToken(token);
                    }
                }

                /**
                 * @name expectCommaSeparator
                 * @description Quietly expect a comma when in tolerant mode, otherwise delegates
                 * to <code>expect(value)</code>
                 * @since 2.0
                 */
                function expectCommaSeparator() {
                    var token;

                    if (extra.errors) {
                        token = lookahead;
                        if (token.type === Token.Punctuator && token.value === ',') {
                            lex();
                        } else if (token.type === Token.Punctuator && token.value === ';') {
                            lex();
                            tolerateUnexpectedToken(token);
                        } else {
                            tolerateUnexpectedToken(token, Messages.UnexpectedToken);
                        }
                    } else {
                        expect(',');
                    }
                }

                // Expect the next token to match the specified keyword.
                // If not, an exception will be thrown.

                function expectKeyword(keyword) {
                    var token = lex();
                    if (token.type !== Token.Keyword || token.value !== keyword) {
                        throwUnexpectedToken(token);
                    }
                }

                // Return true if the next token matches the specified punctuator.

                function match(value) {
                    return lookahead.type === Token.Punctuator && lookahead.value === value;
                }

                // Return true if the next token matches the specified keyword

                function matchKeyword(keyword) {
                    return lookahead.type === Token.Keyword && lookahead.value === keyword;
                }

                // Return true if the next token matches the specified contextual keyword
                // (where an identifier is sometimes a keyword depending on the context)

                function matchContextualKeyword(keyword) {
                    return lookahead.type === Token.Identifier && lookahead.value === keyword;
                }

                // Return true if the next token is an assignment operator

                function matchAssign() {
                    var op;

                    if (lookahead.type !== Token.Punctuator) {
                        return false;
                    }
                    op = lookahead.value;
                    return op === '=' ||
                        op === '*=' ||
                        op === '/=' ||
                        op === '%=' ||
                        op === '+=' ||
                        op === '-=' ||
                        op === '<<=' ||
                        op === '>>=' ||
                        op === '>>>=' ||
                        op === '&=' ||
                        op === '^=' ||
                        op === '|=';
                }

                function consumeSemicolon() {
                    // Catch the very common case first: immediately a semicolon (U+003B).
                    if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
                        lex();
                        return;
                    }

                    if (hasLineTerminator) {
                        return;
                    }

                    // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
                    lastIndex = startIndex;
                    lastLineNumber = startLineNumber;
                    lastLineStart = startLineStart;

                    if (lookahead.type !== Token.EOF && !match('}')) {
                        throwUnexpectedToken(lookahead);
                    }
                }

                // Cover grammar support.
                //
                // When an assignment expression position starts with an left parenthesis, the determination of the type
                // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
                // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
                //
                // There are three productions that can be parsed in a parentheses pair that needs to be determined
                // after the outermost pair is closed. They are:
                //
                //   1. AssignmentExpression
                //   2. BindingElements
                //   3. AssignmentTargets
                //
                // In order to avoid exponential backtracking, we use two flags to denote if the production can be
                // binding element or assignment target.
                //
                // The three productions have the relationship:
                //
                //   BindingElements âŠ† AssignmentTargets âŠ† AssignmentExpression
                //
                // with a single exception that CoverInitializedName when used directly in an Expression, generates
                // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
                // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
                //
                // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
                // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
                // the CoverInitializedName check is conducted.
                //
                // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
                // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
                // pattern. The CoverInitializedName check is deferred.
                function isolateCoverGrammar(parser) {
                    var oldIsBindingElement = isBindingElement,
                        oldIsAssignmentTarget = isAssignmentTarget,
                        oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
                        result;
                    isBindingElement = true;
                    isAssignmentTarget = true;
                    firstCoverInitializedNameError = null;
                    result = parser();
                    if (firstCoverInitializedNameError !== null) {
                        throwUnexpectedToken(firstCoverInitializedNameError);
                    }
                    isBindingElement = oldIsBindingElement;
                    isAssignmentTarget = oldIsAssignmentTarget;
                    firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
                    return result;
                }

                function inheritCoverGrammar(parser) {
                    var oldIsBindingElement = isBindingElement,
                        oldIsAssignmentTarget = isAssignmentTarget,
                        oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
                        result;
                    isBindingElement = true;
                    isAssignmentTarget = true;
                    firstCoverInitializedNameError = null;
                    result = parser();
                    isBindingElement = isBindingElement && oldIsBindingElement;
                    isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
                    firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
                    return result;
                }

                // ECMA-262 13.3.3 Destructuring Binding Patterns

                function parseArrayPattern(params, kind) {
                    var node = new Node(), elements = [], rest, restNode;
                    expect('[');

                    while (!match(']')) {
                        if (match(',')) {
                            lex();
                            elements.push(null);
                        } else {
                            if (match('...')) {
                                restNode = new Node();
                                lex();
                                params.push(lookahead);
                                rest = parseVariableIdentifier(kind);
                                elements.push(restNode.finishRestElement(rest));
                                break;
                            } else {
                                elements.push(parsePatternWithDefault(params, kind));
                            }
                            if (!match(']')) {
                                expect(',');
                            }
                        }

                    }

                    expect(']');

                    return node.finishArrayPattern(elements);
                }

                function parsePropertyPattern(params, kind) {
                    var node = new Node(), key, keyToken, computed = match('['), init;
                    if (lookahead.type === Token.Identifier) {
                        keyToken = lookahead;
                        key = parseVariableIdentifier();
                        if (match('=')) {
                            params.push(keyToken);
                            lex();
                            init = parseAssignmentExpression();

                            return node.finishProperty(
                                'init', key, false,
                                new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, false);
                        } else if (!match(':')) {
                            params.push(keyToken);
                            return node.finishProperty('init', key, false, key, false, true);
                        }
                    } else {
                        key = parseObjectPropertyKey();
                    }
                    expect(':');
                    init = parsePatternWithDefault(params, kind);
                    return node.finishProperty('init', key, computed, init, false, false);
                }

                function parseObjectPattern(params, kind) {
                    var node = new Node(), properties = [];

                    expect('{');

                    while (!match('}')) {
                        properties.push(parsePropertyPattern(params, kind));
                        if (!match('}')) {
                            expect(',');
                        }
                    }

                    lex();

                    return node.finishObjectPattern(properties);
                }

                function parsePattern(params, kind) {
                    if (match('[')) {
                        return parseArrayPattern(params, kind);
                    } else if (match('{')) {
                        return parseObjectPattern(params, kind);
                    } else if (matchKeyword('let')) {
                        if (kind === 'const' || kind === 'let') {
                            tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
                        }
                    }

                    params.push(lookahead);
                    return parseVariableIdentifier(kind);
                }

                function parsePatternWithDefault(params, kind) {
                    var startToken = lookahead, pattern, previousAllowYield, right;
                    pattern = parsePattern(params, kind);
                    if (match('=')) {
                        lex();
                        previousAllowYield = state.allowYield;
                        state.allowYield = true;
                        right = isolateCoverGrammar(parseAssignmentExpression);
                        state.allowYield = previousAllowYield;
                        pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
                    }
                    return pattern;
                }

                // ECMA-262 12.2.5 Array Initializer

                function parseArrayInitializer() {
                    var elements = [], node = new Node(), restSpread;

                    expect('[');

                    while (!match(']')) {
                        if (match(',')) {
                            lex();
                            elements.push(null);
                        } else if (match('...')) {
                            restSpread = new Node();
                            lex();
                            restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));

                            if (!match(']')) {
                                isAssignmentTarget = isBindingElement = false;
                                expect(',');
                            }
                            elements.push(restSpread);
                        } else {
                            elements.push(inheritCoverGrammar(parseAssignmentExpression));

                            if (!match(']')) {
                                expect(',');
                            }
                        }
                    }

                    lex();

                    return node.finishArrayExpression(elements);
                }

                // ECMA-262 12.2.6 Object Initializer

                function parsePropertyFunction(node, paramInfo, isGenerator) {
                    var previousStrict, body;

                    isAssignmentTarget = isBindingElement = false;

                    previousStrict = strict;
                    body = isolateCoverGrammar(parseFunctionSourceElements);

                    if (strict && paramInfo.firstRestricted) {
                        tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
                    }
                    if (strict && paramInfo.stricted) {
                        tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
                    }

                    strict = previousStrict;
                    return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
                }

                function parsePropertyMethodFunction() {
                    var params, method, node = new Node(),
                        previousAllowYield = state.allowYield;

                    state.allowYield = false;
                    params = parseParams();
                    state.allowYield = previousAllowYield;

                    state.allowYield = false;
                    method = parsePropertyFunction(node, params, false);
                    state.allowYield = previousAllowYield;

                    return method;
                }

                function parseObjectPropertyKey() {
                    var token, node = new Node(), expr;

                    token = lex();

                    // Note: This function is called only from parseObjectProperty(), where
                    // EOF and Punctuator tokens are already filtered out.

                    switch (token.type) {
                        case Token.StringLiteral:
                        case Token.NumericLiteral:
                            if (strict && token.octal) {
                                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
                            }
                            return node.finishLiteral(token);
                        case Token.Identifier:
                        case Token.BooleanLiteral:
                        case Token.NullLiteral:
                        case Token.Keyword:
                            return node.finishIdentifier(token.value);
                        case Token.Punctuator:
                            if (token.value === '[') {
                                expr = isolateCoverGrammar(parseAssignmentExpression);
                                expect(']');
                                return expr;
                            }
                            break;
                    }
                    throwUnexpectedToken(token);
                }

                function lookaheadPropertyName() {
                    switch (lookahead.type) {
                        case Token.Identifier:
                        case Token.StringLiteral:
                        case Token.BooleanLiteral:
                        case Token.NullLiteral:
                        case Token.NumericLiteral:
                        case Token.Keyword:
                            return true;
                        case Token.Punctuator:
                            return lookahead.value === '[';
                    }
                    return false;
                }

                // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,
                // it might be called at a position where there is in fact a short hand identifier pattern or a data property.
                // This can only be determined after we consumed up to the left parentheses.
                //
                // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller
                // is responsible to visit other options.
                function tryParseMethodDefinition(token, key, computed, node) {
                    var value, options, methodNode, params,
                        previousAllowYield = state.allowYield;

                    if (token.type === Token.Identifier) {
                        // check for `get` and `set`;

                        if (token.value === 'get' && lookaheadPropertyName()) {
                            computed = match('[');
                            key = parseObjectPropertyKey();
                            methodNode = new Node();
                            expect('(');
                            expect(')');

                            state.allowYield = false;
                            value = parsePropertyFunction(methodNode, {
                                params: [],
                                defaults: [],
                                stricted: null,
                                firstRestricted: null,
                                message: null
                            }, false);
                            state.allowYield = previousAllowYield;

                            return node.finishProperty('get', key, computed, value, false, false);
                        } else if (token.value === 'set' && lookaheadPropertyName()) {
                            computed = match('[');
                            key = parseObjectPropertyKey();
                            methodNode = new Node();
                            expect('(');

                            options = {
                                params: [],
                                defaultCount: 0,
                                defaults: [],
                                firstRestricted: null,
                                paramSet: {}
                            };
                            if (match(')')) {
                                tolerateUnexpectedToken(lookahead);
                            } else {
                                state.allowYield = false;
                                parseParam(options);
                                state.allowYield = previousAllowYield;
                                if (options.defaultCount === 0) {
                                    options.defaults = [];
                                }
                            }
                            expect(')');

                            state.allowYield = false;
                            value = parsePropertyFunction(methodNode, options, false);
                            state.allowYield = previousAllowYield;

                            return node.finishProperty('set', key, computed, value, false, false);
                        }
                    } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
                        computed = match('[');
                        key = parseObjectPropertyKey();
                        methodNode = new Node();

                        state.allowYield = true;
                        params = parseParams();
                        state.allowYield = previousAllowYield;

                        state.allowYield = false;
                        value = parsePropertyFunction(methodNode, params, true);
                        state.allowYield = previousAllowYield;

                        return node.finishProperty('init', key, computed, value, true, false);
                    }

                    if (key && match('(')) {
                        value = parsePropertyMethodFunction();
                        return node.finishProperty('init', key, computed, value, true, false);
                    }

                    // Not a MethodDefinition.
                    return null;
                }

                function parseObjectProperty(hasProto) {
                    var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;

                    computed = match('[');
                    if (match('*')) {
                        lex();
                    } else {
                        key = parseObjectPropertyKey();
                    }
                    maybeMethod = tryParseMethodDefinition(token, key, computed, node);
                    if (maybeMethod) {
                        return maybeMethod;
                    }

                    if (!key) {
                        throwUnexpectedToken(lookahead);
                    }

                    // Check for duplicated __proto__
                    if (!computed) {
                        proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||
                            (key.type === Syntax.Literal && key.value === '__proto__');
                        if (hasProto.value && proto) {
                            tolerateError(Messages.DuplicateProtoProperty);
                        }
                        hasProto.value |= proto;
                    }

                    if (match(':')) {
                        lex();
                        value = inheritCoverGrammar(parseAssignmentExpression);
                        return node.finishProperty('init', key, computed, value, false, false);
                    }

                    if (token.type === Token.Identifier) {
                        if (match('=')) {
                            firstCoverInitializedNameError = lookahead;
                            lex();
                            value = isolateCoverGrammar(parseAssignmentExpression);
                            return node.finishProperty('init', key, computed,
                                new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
                        }
                        return node.finishProperty('init', key, computed, key, false, true);
                    }

                    throwUnexpectedToken(lookahead);
                }

                function parseObjectInitializer() {
                    var properties = [], hasProto = {value: false}, node = new Node();

                    expect('{');

                    while (!match('}')) {
                        properties.push(parseObjectProperty(hasProto));

                        if (!match('}')) {
                            expectCommaSeparator();
                        }
                    }

                    expect('}');

                    return node.finishObjectExpression(properties);
                }

                function reinterpretExpressionAsPattern(expr) {
                    var i;
                    switch (expr.type) {
                        case Syntax.Identifier:
                        case Syntax.MemberExpression:
                        case Syntax.RestElement:
                        case Syntax.AssignmentPattern:
                            break;
                        case Syntax.SpreadElement:
                            expr.type = Syntax.RestElement;
                            reinterpretExpressionAsPattern(expr.argument);
                            break;
                        case Syntax.ArrayExpression:
                            expr.type = Syntax.ArrayPattern;
                            for (i = 0; i < expr.elements.length; i++) {
                                if (expr.elements[i] !== null) {
                                    reinterpretExpressionAsPattern(expr.elements[i]);
                                }
                            }
                            break;
                        case Syntax.ObjectExpression:
                            expr.type = Syntax.ObjectPattern;
                            for (i = 0; i < expr.properties.length; i++) {
                                reinterpretExpressionAsPattern(expr.properties[i].value);
                            }
                            break;
                        case Syntax.AssignmentExpression:
                            expr.type = Syntax.AssignmentPattern;
                            reinterpretExpressionAsPattern(expr.left);
                            break;
                        default:
                            // Allow other node type for tolerant parsing.
                            break;
                    }
                }

                // ECMA-262 12.2.9 Template Literals

                function parseTemplateElement(option) {
                    var node, token;

                    if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {
                        throwUnexpectedToken();
                    }

                    node = new Node();
                    token = lex();

                    return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);
                }

                function parseTemplateLiteral() {
                    var quasi, quasis, expressions, node = new Node();

                    quasi = parseTemplateElement({ head: true });
                    quasis = [quasi];
                    expressions = [];

                    while (!quasi.tail) {
                        expressions.push(parseExpression());
                        quasi = parseTemplateElement({ head: false });
                        quasis.push(quasi);
                    }

                    return node.finishTemplateLiteral(quasis, expressions);
                }

                // ECMA-262 12.2.10 The Grouping Operator

                function parseGroupExpression() {
                    var expr, expressions, startToken, i, params = [];

                    expect('(');

                    if (match(')')) {
                        lex();
                        if (!match('=>')) {
                            expect('=>');
                        }
                        return {
                            type: PlaceHolders.ArrowParameterPlaceHolder,
                            params: [],
                            rawParams: []
                        };
                    }

                    startToken = lookahead;
                    if (match('...')) {
                        expr = parseRestElement(params);
                        expect(')');
                        if (!match('=>')) {
                            expect('=>');
                        }
                        return {
                            type: PlaceHolders.ArrowParameterPlaceHolder,
                            params: [expr]
                        };
                    }

                    isBindingElement = true;
                    expr = inheritCoverGrammar(parseAssignmentExpression);

                    if (match(',')) {
                        isAssignmentTarget = false;
                        expressions = [expr];

                        while (startIndex < length) {
                            if (!match(',')) {
                                break;
                            }
                            lex();

                            if (match('...')) {
                                if (!isBindingElement) {
                                    throwUnexpectedToken(lookahead);
                                }
                                expressions.push(parseRestElement(params));
                                expect(')');
                                if (!match('=>')) {
                                    expect('=>');
                                }
                                isBindingElement = false;
                                for (i = 0; i < expressions.length; i++) {
                                    reinterpretExpressionAsPattern(expressions[i]);
                                }
                                return {
                                    type: PlaceHolders.ArrowParameterPlaceHolder,
                                    params: expressions
                                };
                            }

                            expressions.push(inheritCoverGrammar(parseAssignmentExpression));
                        }

                        expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
                    }


                    expect(')');

                    if (match('=>')) {
                        if (expr.type === Syntax.Identifier && expr.name === 'yield') {
                            return {
                                type: PlaceHolders.ArrowParameterPlaceHolder,
                                params: [expr]
                            };
                        }

                        if (!isBindingElement) {
                            throwUnexpectedToken(lookahead);
                        }

                        if (expr.type === Syntax.SequenceExpression) {
                            for (i = 0; i < expr.expressions.length; i++) {
                                reinterpretExpressionAsPattern(expr.expressions[i]);
                            }
                        } else {
                            reinterpretExpressionAsPattern(expr);
                        }

                        expr = {
                            type: PlaceHolders.ArrowParameterPlaceHolder,
                            params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
                        };
                    }
                    isBindingElement = false;
                    return expr;
                }


                // ECMA-262 12.2 Primary Expressions

                function parsePrimaryExpression() {
                    var type, token, expr, node;

                    if (match('(')) {
                        isBindingElement = false;
                        return inheritCoverGrammar(parseGroupExpression);
                    }

                    if (match('[')) {
                        return inheritCoverGrammar(parseArrayInitializer);
                    }

                    if (match('{')) {
                        return inheritCoverGrammar(parseObjectInitializer);
                    }

                    type = lookahead.type;
                    node = new Node();

                    if (type === Token.Identifier) {
                        if (state.sourceType === 'module' && lookahead.value === 'await') {
                            tolerateUnexpectedToken(lookahead);
                        }
                        expr = node.finishIdentifier(lex().value);
                    } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
                        isAssignmentTarget = isBindingElement = false;
                        if (strict && lookahead.octal) {
                            tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
                        }
                        expr = node.finishLiteral(lex());
                    } else if (type === Token.Keyword) {
                        if (!strict && state.allowYield && matchKeyword('yield')) {
                            return parseNonComputedProperty();
                        }
                        if (!strict && matchKeyword('let')) {
                            return node.finishIdentifier(lex().value);
                        }
                        isAssignmentTarget = isBindingElement = false;
                        if (matchKeyword('function')) {
                            return parseFunctionExpression();
                        }
                        if (matchKeyword('this')) {
                            lex();
                            return node.finishThisExpression();
                        }
                        if (matchKeyword('class')) {
                            return parseClassExpression();
                        }
                        throwUnexpectedToken(lex());
                    } else if (type === Token.BooleanLiteral) {
                        isAssignmentTarget = isBindingElement = false;
                        token = lex();
                        token.value = (token.value === 'true');
                        expr = node.finishLiteral(token);
                    } else if (type === Token.NullLiteral) {
                        isAssignmentTarget = isBindingElement = false;
                        token = lex();
                        token.value = null;
                        expr = node.finishLiteral(token);
                    } else if (match('/') || match('/=')) {
                        isAssignmentTarget = isBindingElement = false;
                        index = startIndex;

                        if (typeof extra.tokens !== 'undefined') {
                            token = collectRegex();
                        } else {
                            token = scanRegExp();
                        }
                        lex();
                        expr = node.finishLiteral(token);
                    } else if (type === Token.Template) {
                        expr = parseTemplateLiteral();
                    } else {
                        throwUnexpectedToken(lex());
                    }

                    return expr;
                }

                // ECMA-262 12.3 Left-Hand-Side Expressions

                function parseArguments() {
                    var args = [], expr;

                    expect('(');

                    if (!match(')')) {
                        while (startIndex < length) {
                            if (match('...')) {
                                expr = new Node();
                                lex();
                                expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
                            } else {
                                expr = isolateCoverGrammar(parseAssignmentExpression);
                            }
                            args.push(expr);
                            if (match(')')) {
                                break;
                            }
                            expectCommaSeparator();
                        }
                    }

                    expect(')');

                    return args;
                }

                function parseNonComputedProperty() {
                    var token, node = new Node();

                    token = lex();

                    if (!isIdentifierName(token)) {
                        throwUnexpectedToken(token);
                    }

                    return node.finishIdentifier(token.value);
                }

                function parseNonComputedMember() {
                    expect('.');

                    return parseNonComputedProperty();
                }

                function parseComputedMember() {
                    var expr;

                    expect('[');

                    expr = isolateCoverGrammar(parseExpression);

                    expect(']');

                    return expr;
                }

                // ECMA-262 12.3.3 The new Operator

                function parseNewExpression() {
                    var callee, args, node = new Node();

                    expectKeyword('new');

                    if (match('.')) {
                        lex();
                        if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
                            if (state.inFunctionBody) {
                                lex();
                                return node.finishMetaProperty('new', 'target');
                            }
                        }
                        throwUnexpectedToken(lookahead);
                    }

                    callee = isolateCoverGrammar(parseLeftHandSideExpression);
                    args = match('(') ? parseArguments() : [];

                    isAssignmentTarget = isBindingElement = false;

                    return node.finishNewExpression(callee, args);
                }

                // ECMA-262 12.3.4 Function Calls

                function parseLeftHandSideExpressionAllowCall() {
                    var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;

                    startToken = lookahead;
                    state.allowIn = true;

                    if (matchKeyword('super') && state.inFunctionBody) {
                        expr = new Node();
                        lex();
                        expr = expr.finishSuper();
                        if (!match('(') && !match('.') && !match('[')) {
                            throwUnexpectedToken(lookahead);
                        }
                    } else {
                        expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
                    }

                    for (;;) {
                        if (match('.')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseNonComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
                        } else if (match('(')) {
                            isBindingElement = false;
                            isAssignmentTarget = false;
                            args = parseArguments();
                            expr = new WrappingNode(startToken).finishCallExpression(expr, args);
                        } else if (match('[')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
                        } else if (lookahead.type === Token.Template && lookahead.head) {
                            quasi = parseTemplateLiteral();
                            expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
                        } else {
                            break;
                        }
                    }
                    state.allowIn = previousAllowIn;

                    return expr;
                }

                // ECMA-262 12.3 Left-Hand-Side Expressions

                function parseLeftHandSideExpression() {
                    var quasi, expr, property, startToken;
                    assert(state.allowIn, 'callee of new expression always allow in keyword.');

                    startToken = lookahead;

                    if (matchKeyword('super') && state.inFunctionBody) {
                        expr = new Node();
                        lex();
                        expr = expr.finishSuper();
                        if (!match('[') && !match('.')) {
                            throwUnexpectedToken(lookahead);
                        }
                    } else {
                        expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
                    }

                    for (;;) {
                        if (match('[')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
                        } else if (match('.')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseNonComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
                        } else if (lookahead.type === Token.Template && lookahead.head) {
                            quasi = parseTemplateLiteral();
                            expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
                        } else {
                            break;
                        }
                    }
                    return expr;
                }

                // ECMA-262 12.4 Postfix Expressions

                function parsePostfixExpression() {
                    var expr, token, startToken = lookahead;

                    expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);

                    if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
                        if (match('++') || match('--')) {
                            // ECMA-262 11.3.1, 11.3.2
                            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                                tolerateError(Messages.StrictLHSPostfix);
                            }

                            if (!isAssignmentTarget) {
                                tolerateError(Messages.InvalidLHSInAssignment);
                            }

                            isAssignmentTarget = isBindingElement = false;

                            token = lex();
                            expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
                        }
                    }

                    return expr;
                }

                // ECMA-262 12.5 Unary Operators

                function parseUnaryExpression() {
                    var token, expr, startToken;

                    if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
                        expr = parsePostfixExpression();
                    } else if (match('++') || match('--')) {
                        startToken = lookahead;
                        token = lex();
                        expr = inheritCoverGrammar(parseUnaryExpression);
                        // ECMA-262 11.4.4, 11.4.5
                        if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                            tolerateError(Messages.StrictLHSPrefix);
                        }

                        if (!isAssignmentTarget) {
                            tolerateError(Messages.InvalidLHSInAssignment);
                        }
                        expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
                        isAssignmentTarget = isBindingElement = false;
                    } else if (match('+') || match('-') || match('~') || match('!')) {
                        startToken = lookahead;
                        token = lex();
                        expr = inheritCoverGrammar(parseUnaryExpression);
                        expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
                        isAssignmentTarget = isBindingElement = false;
                    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
                        startToken = lookahead;
                        token = lex();
                        expr = inheritCoverGrammar(parseUnaryExpression);
                        expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
                        if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                            tolerateError(Messages.StrictDelete);
                        }
                        isAssignmentTarget = isBindingElement = false;
                    } else {
                        expr = parsePostfixExpression();
                    }

                    return expr;
                }

                function binaryPrecedence(token, allowIn) {
                    var prec = 0;

                    if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
                        return 0;
                    }

                    switch (token.value) {
                        case '||':
                            prec = 1;
                            break;

                        case '&&':
                            prec = 2;
                            break;

                        case '|':
                            prec = 3;
                            break;

                        case '^':
                            prec = 4;
                            break;

                        case '&':
                            prec = 5;
                            break;

                        case '==':
                        case '!=':
                        case '===':
                        case '!==':
                            prec = 6;
                            break;

                        case '<':
                        case '>':
                        case '<=':
                        case '>=':
                        case 'instanceof':
                            prec = 7;
                            break;

                        case 'in':
                            prec = allowIn ? 7 : 0;
                            break;

                        case '<<':
                        case '>>':
                        case '>>>':
                            prec = 8;
                            break;

                        case '+':
                        case '-':
                            prec = 9;
                            break;

                        case '*':
                        case '/':
                        case '%':
                            prec = 11;
                            break;

                        default:
                            break;
                    }

                    return prec;
                }

                // ECMA-262 12.6 Multiplicative Operators
                // ECMA-262 12.7 Additive Operators
                // ECMA-262 12.8 Bitwise Shift Operators
                // ECMA-262 12.9 Relational Operators
                // ECMA-262 12.10 Equality Operators
                // ECMA-262 12.11 Binary Bitwise Operators
                // ECMA-262 12.12 Binary Logical Operators

                function parseBinaryExpression() {
                    var marker, markers, expr, token, prec, stack, right, operator, left, i;

                    marker = lookahead;
                    left = inheritCoverGrammar(parseUnaryExpression);

                    token = lookahead;
                    prec = binaryPrecedence(token, state.allowIn);
                    if (prec === 0) {
                        return left;
                    }
                    isAssignmentTarget = isBindingElement = false;
                    token.prec = prec;
                    lex();

                    markers = [marker, lookahead];
                    right = isolateCoverGrammar(parseUnaryExpression);

                    stack = [left, token, right];

                    while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

                        // Reduce: make a binary expression from the three topmost entries.
                        while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                            right = stack.pop();
                            operator = stack.pop().value;
                            left = stack.pop();
                            markers.pop();
                            expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
                            stack.push(expr);
                        }

                        // Shift.
                        token = lex();
                        token.prec = prec;
                        stack.push(token);
                        markers.push(lookahead);
                        expr = isolateCoverGrammar(parseUnaryExpression);
                        stack.push(expr);
                    }

                    // Final reduce to clean-up the stack.
                    i = stack.length - 1;
                    expr = stack[i];
                    markers.pop();
                    while (i > 1) {
                        expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
                        i -= 2;
                    }

                    return expr;
                }


                // ECMA-262 12.13 Conditional Operator

                function parseConditionalExpression() {
                    var expr, previousAllowIn, consequent, alternate, startToken;

                    startToken = lookahead;

                    expr = inheritCoverGrammar(parseBinaryExpression);
                    if (match('?')) {
                        lex();
                        previousAllowIn = state.allowIn;
                        state.allowIn = true;
                        consequent = isolateCoverGrammar(parseAssignmentExpression);
                        state.allowIn = previousAllowIn;
                        expect(':');
                        alternate = isolateCoverGrammar(parseAssignmentExpression);

                        expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
                        isAssignmentTarget = isBindingElement = false;
                    }

                    return expr;
                }

                // ECMA-262 14.2 Arrow Function Definitions

                function parseConciseBody() {
                    if (match('{')) {
                        return parseFunctionSourceElements();
                    }
                    return isolateCoverGrammar(parseAssignmentExpression);
                }

                function checkPatternParam(options, param) {
                    var i;
                    switch (param.type) {
                        case Syntax.Identifier:
                            validateParam(options, param, param.name);
                            break;
                        case Syntax.RestElement:
                            checkPatternParam(options, param.argument);
                            break;
                        case Syntax.AssignmentPattern:
                            checkPatternParam(options, param.left);
                            break;
                        case Syntax.ArrayPattern:
                            for (i = 0; i < param.elements.length; i++) {
                                if (param.elements[i] !== null) {
                                    checkPatternParam(options, param.elements[i]);
                                }
                            }
                            break;
                        case Syntax.YieldExpression:
                            break;
                        default:
                            assert(param.type === Syntax.ObjectPattern, 'Invalid type');
                            for (i = 0; i < param.properties.length; i++) {
                                checkPatternParam(options, param.properties[i].value);
                            }
                            break;
                    }
                }
                function reinterpretAsCoverFormalsList(expr) {
                    var i, len, param, params, defaults, defaultCount, options, token;

                    defaults = [];
                    defaultCount = 0;
                    params = [expr];

                    switch (expr.type) {
                        case Syntax.Identifier:
                            break;
                        case PlaceHolders.ArrowParameterPlaceHolder:
                            params = expr.params;
                            break;
                        default:
                            return null;
                    }

                    options = {
                        paramSet: {}
                    };

                    for (i = 0, len = params.length; i < len; i += 1) {
                        param = params[i];
                        switch (param.type) {
                            case Syntax.AssignmentPattern:
                                params[i] = param.left;
                                if (param.right.type === Syntax.YieldExpression) {
                                    if (param.right.argument) {
                                        throwUnexpectedToken(lookahead);
                                    }
                                    param.right.type = Syntax.Identifier;
                                    param.right.name = 'yield';
                                    delete param.right.argument;
                                    delete param.right.delegate;
                                }
                                defaults.push(param.right);
                                ++defaultCount;
                                checkPatternParam(options, param.left);
                                break;
                            default:
                                checkPatternParam(options, param);
                                params[i] = param;
                                defaults.push(null);
                                break;
                        }
                    }

                    if (strict || !state.allowYield) {
                        for (i = 0, len = params.length; i < len; i += 1) {
                            param = params[i];
                            if (param.type === Syntax.YieldExpression) {
                                throwUnexpectedToken(lookahead);
                            }
                        }
                    }

                    if (options.message === Messages.StrictParamDupe) {
                        token = strict ? options.stricted : options.firstRestricted;
                        throwUnexpectedToken(token, options.message);
                    }

                    if (defaultCount === 0) {
                        defaults = [];
                    }

                    return {
                        params: params,
                        defaults: defaults,
                        stricted: options.stricted,
                        firstRestricted: options.firstRestricted,
                        message: options.message
                    };
                }

                function parseArrowFunctionExpression(options, node) {
                    var previousStrict, previousAllowYield, body;

                    if (hasLineTerminator) {
                        tolerateUnexpectedToken(lookahead);
                    }
                    expect('=>');

                    previousStrict = strict;
                    previousAllowYield = state.allowYield;
                    state.allowYield = true;

                    body = parseConciseBody();

                    if (strict && options.firstRestricted) {
                        throwUnexpectedToken(options.firstRestricted, options.message);
                    }
                    if (strict && options.stricted) {
                        tolerateUnexpectedToken(options.stricted, options.message);
                    }

                    strict = previousStrict;
                    state.allowYield = previousAllowYield;

                    return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
                }

                // ECMA-262 14.4 Yield expression

                function parseYieldExpression() {
                    var argument, expr, delegate, previousAllowYield;

                    argument = null;
                    expr = new Node();
                    delegate = false;

                    expectKeyword('yield');

                    if (!hasLineTerminator) {
                        previousAllowYield = state.allowYield;
                        state.allowYield = false;
                        delegate = match('*');
                        if (delegate) {
                            lex();
                            argument = parseAssignmentExpression();
                        } else {
                            if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
                                argument = parseAssignmentExpression();
                            }
                        }
                        state.allowYield = previousAllowYield;
                    }

                    return expr.finishYieldExpression(argument, delegate);
                }

                // ECMA-262 12.14 Assignment Operators

                function parseAssignmentExpression() {
                    var token, expr, right, list, startToken;

                    startToken = lookahead;
                    token = lookahead;

                    if (!state.allowYield && matchKeyword('yield')) {
                        return parseYieldExpression();
                    }

                    expr = parseConditionalExpression();

                    if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
                        isAssignmentTarget = isBindingElement = false;
                        list = reinterpretAsCoverFormalsList(expr);

                        if (list) {
                            firstCoverInitializedNameError = null;
                            return parseArrowFunctionExpression(list, new WrappingNode(startToken));
                        }

                        return expr;
                    }

                    if (matchAssign()) {
                        if (!isAssignmentTarget) {
                            tolerateError(Messages.InvalidLHSInAssignment);
                        }

                        // ECMA-262 12.1.1
                        if (strict && expr.type === Syntax.Identifier) {
                            if (isRestrictedWord(expr.name)) {
                                tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
                            }
                            if (isStrictModeReservedWord(expr.name)) {
                                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                            }
                        }

                        if (!match('=')) {
                            isAssignmentTarget = isBindingElement = false;
                        } else {
                            reinterpretExpressionAsPattern(expr);
                        }

                        token = lex();
                        right = isolateCoverGrammar(parseAssignmentExpression);
                        expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
                        firstCoverInitializedNameError = null;
                    }

                    return expr;
                }

                // ECMA-262 12.15 Comma Operator

                function parseExpression() {
                    var expr, startToken = lookahead, expressions;

                    expr = isolateCoverGrammar(parseAssignmentExpression);

                    if (match(',')) {
                        expressions = [expr];

                        while (startIndex < length) {
                            if (!match(',')) {
                                break;
                            }
                            lex();
                            expressions.push(isolateCoverGrammar(parseAssignmentExpression));
                        }

                        expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
                    }

                    return expr;
                }

                // ECMA-262 13.2 Block

                function parseStatementListItem() {
                    if (lookahead.type === Token.Keyword) {
                        switch (lookahead.value) {
                            case 'export':
                                if (state.sourceType !== 'module') {
                                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
                                }
                                return parseExportDeclaration();
                            case 'import':
                                if (state.sourceType !== 'module') {
                                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
                                }
                                return parseImportDeclaration();
                            case 'const':
                                return parseLexicalDeclaration({inFor: false});
                            case 'function':
                                return parseFunctionDeclaration(new Node());
                            case 'class':
                                return parseClassDeclaration();
                        }
                    }

                    if (matchKeyword('let') && isLexicalDeclaration()) {
                        return parseLexicalDeclaration({inFor: false});
                    }

                    return parseStatement();
                }

                function parseStatementList() {
                    var list = [];
                    while (startIndex < length) {
                        if (match('}')) {
                            break;
                        }
                        list.push(parseStatementListItem());
                    }

                    return list;
                }

                function parseBlock() {
                    var block, node = new Node();

                    expect('{');

                    block = parseStatementList();

                    expect('}');

                    return node.finishBlockStatement(block);
                }

                // ECMA-262 13.3.2 Variable Statement

                function parseVariableIdentifier(kind) {
                    var token, node = new Node();

                    token = lex();

                    if (token.type === Token.Keyword && token.value === 'yield') {
                        if (strict) {
                            tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                        } if (!state.allowYield) {
                            throwUnexpectedToken(token);
                        }
                    } else if (token.type !== Token.Identifier) {
                        if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
                            tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                        } else {
                            if (strict || token.value !== 'let' || kind !== 'var') {
                                throwUnexpectedToken(token);
                            }
                        }
                    } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
                        tolerateUnexpectedToken(token);
                    }

                    return node.finishIdentifier(token.value);
                }

                function parseVariableDeclaration(options) {
                    var init = null, id, node = new Node(), params = [];

                    id = parsePattern(params, 'var');

                    // ECMA-262 12.2.1
                    if (strict && isRestrictedWord(id.name)) {
                        tolerateError(Messages.StrictVarName);
                    }

                    if (match('=')) {
                        lex();
                        init = isolateCoverGrammar(parseAssignmentExpression);
                    } else if (id.type !== Syntax.Identifier && !options.inFor) {
                        expect('=');
                    }

                    return node.finishVariableDeclarator(id, init);
                }

                function parseVariableDeclarationList(options) {
                    var opt, list;

                    opt = { inFor: options.inFor };
                    list = [parseVariableDeclaration(opt)];

                    while (match(',')) {
                        lex();
                        list.push(parseVariableDeclaration(opt));
                    }

                    return list;
                }

                function parseVariableStatement(node) {
                    var declarations;

                    expectKeyword('var');

                    declarations = parseVariableDeclarationList({ inFor: false });

                    consumeSemicolon();

                    return node.finishVariableDeclaration(declarations);
                }

                // ECMA-262 13.3.1 Let and Const Declarations

                function parseLexicalBinding(kind, options) {
                    var init = null, id, node = new Node(), params = [];

                    id = parsePattern(params, kind);

                    // ECMA-262 12.2.1
                    if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
                        tolerateError(Messages.StrictVarName);
                    }

                    if (kind === 'const') {
                        if (!matchKeyword('in') && !matchContextualKeyword('of')) {
                            expect('=');
                            init = isolateCoverGrammar(parseAssignmentExpression);
                        }
                    } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {
                        expect('=');
                        init = isolateCoverGrammar(parseAssignmentExpression);
                    }

                    return node.finishVariableDeclarator(id, init);
                }

                function parseBindingList(kind, options) {
                    var list = [parseLexicalBinding(kind, options)];

                    while (match(',')) {
                        lex();
                        list.push(parseLexicalBinding(kind, options));
                    }

                    return list;
                }


                function tokenizerState() {
                    return {
                        index: index,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        hasLineTerminator: hasLineTerminator,
                        lastIndex: lastIndex,
                        lastLineNumber: lastLineNumber,
                        lastLineStart: lastLineStart,
                        startIndex: startIndex,
                        startLineNumber: startLineNumber,
                        startLineStart: startLineStart,
                        lookahead: lookahead,
                        tokenCount: extra.tokens ? extra.tokens.length : 0
                    };
                }

                function resetTokenizerState(ts) {
                    index = ts.index;
                    lineNumber = ts.lineNumber;
                    lineStart = ts.lineStart;
                    hasLineTerminator = ts.hasLineTerminator;
                    lastIndex = ts.lastIndex;
                    lastLineNumber = ts.lastLineNumber;
                    lastLineStart = ts.lastLineStart;
                    startIndex = ts.startIndex;
                    startLineNumber = ts.startLineNumber;
                    startLineStart = ts.startLineStart;
                    lookahead = ts.lookahead;
                    if (extra.tokens) {
                        extra.tokens.splice(ts.tokenCount, extra.tokens.length);
                    }
                }

                function isLexicalDeclaration() {
                    var lexical, ts;

                    ts = tokenizerState();

                    lex();
                    lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||
                        matchKeyword('let') || matchKeyword('yield');

                    resetTokenizerState(ts);

                    return lexical;
                }

                function parseLexicalDeclaration(options) {
                    var kind, declarations, node = new Node();

                    kind = lex().value;
                    assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');

                    declarations = parseBindingList(kind, options);

                    consumeSemicolon();

                    return node.finishLexicalDeclaration(declarations, kind);
                }

                function parseRestElement(params) {
                    var param, node = new Node();

                    lex();

                    if (match('{')) {
                        throwError(Messages.ObjectPatternAsRestParameter);
                    }

                    params.push(lookahead);

                    param = parseVariableIdentifier();

                    if (match('=')) {
                        throwError(Messages.DefaultRestParameter);
                    }

                    if (!match(')')) {
                        throwError(Messages.ParameterAfterRestParameter);
                    }

                    return node.finishRestElement(param);
                }

                // ECMA-262 13.4 Empty Statement

                function parseEmptyStatement(node) {
                    expect(';');
                    return node.finishEmptyStatement();
                }

                // ECMA-262 12.4 Expression Statement

                function parseExpressionStatement(node) {
                    var expr = parseExpression();
                    consumeSemicolon();
                    return node.finishExpressionStatement(expr);
                }

                // ECMA-262 13.6 If statement

                function parseIfStatement(node) {
                    var test, consequent, alternate;

                    expectKeyword('if');

                    expect('(');

                    test = parseExpression();

                    expect(')');

                    consequent = parseStatement();

                    if (matchKeyword('else')) {
                        lex();
                        alternate = parseStatement();
                    } else {
                        alternate = null;
                    }

                    return node.finishIfStatement(test, consequent, alternate);
                }

                // ECMA-262 13.7 Iteration Statements

                function parseDoWhileStatement(node) {
                    var body, test, oldInIteration;

                    expectKeyword('do');

                    oldInIteration = state.inIteration;
                    state.inIteration = true;

                    body = parseStatement();

                    state.inIteration = oldInIteration;

                    expectKeyword('while');

                    expect('(');

                    test = parseExpression();

                    expect(')');

                    if (match(';')) {
                        lex();
                    }

                    return node.finishDoWhileStatement(body, test);
                }

                function parseWhileStatement(node) {
                    var test, body, oldInIteration;

                    expectKeyword('while');

                    expect('(');

                    test = parseExpression();

                    expect(')');

                    oldInIteration = state.inIteration;
                    state.inIteration = true;

                    body = parseStatement();

                    state.inIteration = oldInIteration;

                    return node.finishWhileStatement(test, body);
                }

                function parseForStatement(node) {
                    var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,
                        body, oldInIteration, previousAllowIn = state.allowIn;

                    init = test = update = null;
                    forIn = true;

                    expectKeyword('for');

                    expect('(');

                    if (match(';')) {
                        lex();
                    } else {
                        if (matchKeyword('var')) {
                            init = new Node();
                            lex();

                            state.allowIn = false;
                            declarations = parseVariableDeclarationList({ inFor: true });
                            state.allowIn = previousAllowIn;

                            if (declarations.length === 1 && matchKeyword('in')) {
                                init = init.finishVariableDeclaration(declarations);
                                lex();
                                left = init;
                                right = parseExpression();
                                init = null;
                            } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                                init = init.finishVariableDeclaration(declarations);
                                lex();
                                left = init;
                                right = parseAssignmentExpression();
                                init = null;
                                forIn = false;
                            } else {
                                init = init.finishVariableDeclaration(declarations);
                                expect(';');
                            }
                        } else if (matchKeyword('const') || matchKeyword('let')) {
                            init = new Node();
                            kind = lex().value;

                            if (!strict && lookahead.value === 'in') {
                                init = init.finishIdentifier(kind);
                                lex();
                                left = init;
                                right = parseExpression();
                                init = null;
                            } else {
                                state.allowIn = false;
                                declarations = parseBindingList(kind, {inFor: true});
                                state.allowIn = previousAllowIn;

                                if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
                                    init = init.finishLexicalDeclaration(declarations, kind);
                                    lex();
                                    left = init;
                                    right = parseExpression();
                                    init = null;
                                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                                    init = init.finishLexicalDeclaration(declarations, kind);
                                    lex();
                                    left = init;
                                    right = parseAssignmentExpression();
                                    init = null;
                                    forIn = false;
                                } else {
                                    consumeSemicolon();
                                    init = init.finishLexicalDeclaration(declarations, kind);
                                }
                            }
                        } else {
                            initStartToken = lookahead;
                            state.allowIn = false;
                            init = inheritCoverGrammar(parseAssignmentExpression);
                            state.allowIn = previousAllowIn;

                            if (matchKeyword('in')) {
                                if (!isAssignmentTarget) {
                                    tolerateError(Messages.InvalidLHSInForIn);
                                }

                                lex();
                                reinterpretExpressionAsPattern(init);
                                left = init;
                                right = parseExpression();
                                init = null;
                            } else if (matchContextualKeyword('of')) {
                                if (!isAssignmentTarget) {
                                    tolerateError(Messages.InvalidLHSInForLoop);
                                }

                                lex();
                                reinterpretExpressionAsPattern(init);
                                left = init;
                                right = parseAssignmentExpression();
                                init = null;
                                forIn = false;
                            } else {
                                if (match(',')) {
                                    initSeq = [init];
                                    while (match(',')) {
                                        lex();
                                        initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
                                    }
                                    init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
                                }
                                expect(';');
                            }
                        }
                    }

                    if (typeof left === 'undefined') {

                        if (!match(';')) {
                            test = parseExpression();
                        }
                        expect(';');

                        if (!match(')')) {
                            update = parseExpression();
                        }
                    }

                    expect(')');

                    oldInIteration = state.inIteration;
                    state.inIteration = true;

                    body = isolateCoverGrammar(parseStatement);

                    state.inIteration = oldInIteration;

                    return (typeof left === 'undefined') ?
                        node.finishForStatement(init, test, update, body) :
                        forIn ? node.finishForInStatement(left, right, body) :
                            node.finishForOfStatement(left, right, body);
                }

                // ECMA-262 13.8 The continue statement

                function parseContinueStatement(node) {
                    var label = null, key;

                    expectKeyword('continue');

                    // Optimize the most common form: 'continue;'.
                    if (source.charCodeAt(startIndex) === 0x3B) {
                        lex();

                        if (!state.inIteration) {
                            throwError(Messages.IllegalContinue);
                        }

                        return node.finishContinueStatement(null);
                    }

                    if (hasLineTerminator) {
                        if (!state.inIteration) {
                            throwError(Messages.IllegalContinue);
                        }

                        return node.finishContinueStatement(null);
                    }

                    if (lookahead.type === Token.Identifier) {
                        label = parseVariableIdentifier();

                        key = '$' + label.name;
                        if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                            throwError(Messages.UnknownLabel, label.name);
                        }
                    }

                    consumeSemicolon();

                    if (label === null && !state.inIteration) {
                        throwError(Messages.IllegalContinue);
                    }

                    return node.finishContinueStatement(label);
                }

                // ECMA-262 13.9 The break statement

                function parseBreakStatement(node) {
                    var label = null, key;

                    expectKeyword('break');

                    // Catch the very common case first: immediately a semicolon (U+003B).
                    if (source.charCodeAt(lastIndex) === 0x3B) {
                        lex();

                        if (!(state.inIteration || state.inSwitch)) {
                            throwError(Messages.IllegalBreak);
                        }

                        return node.finishBreakStatement(null);
                    }

                    if (hasLineTerminator) {
                        if (!(state.inIteration || state.inSwitch)) {
                            throwError(Messages.IllegalBreak);
                        }
                    } else if (lookahead.type === Token.Identifier) {
                        label = parseVariableIdentifier();

                        key = '$' + label.name;
                        if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                            throwError(Messages.UnknownLabel, label.name);
                        }
                    }

                    consumeSemicolon();

                    if (label === null && !(state.inIteration || state.inSwitch)) {
                        throwError(Messages.IllegalBreak);
                    }

                    return node.finishBreakStatement(label);
                }

                // ECMA-262 13.10 The return statement

                function parseReturnStatement(node) {
                    var argument = null;

                    expectKeyword('return');

                    if (!state.inFunctionBody) {
                        tolerateError(Messages.IllegalReturn);
                    }

                    // 'return' followed by a space and an identifier is very common.
                    if (source.charCodeAt(lastIndex) === 0x20) {
                        if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
                            argument = parseExpression();
                            consumeSemicolon();
                            return node.finishReturnStatement(argument);
                        }
                    }

                    if (hasLineTerminator) {
                        // HACK
                        return node.finishReturnStatement(null);
                    }

                    if (!match(';')) {
                        if (!match('}') && lookahead.type !== Token.EOF) {
                            argument = parseExpression();
                        }
                    }

                    consumeSemicolon();

                    return node.finishReturnStatement(argument);
                }

                // ECMA-262 13.11 The with statement

                function parseWithStatement(node) {
                    var object, body;

                    if (strict) {
                        tolerateError(Messages.StrictModeWith);
                    }

                    expectKeyword('with');

                    expect('(');

                    object = parseExpression();

                    expect(')');

                    body = parseStatement();

                    return node.finishWithStatement(object, body);
                }

                // ECMA-262 13.12 The switch statement

                function parseSwitchCase() {
                    var test, consequent = [], statement, node = new Node();

                    if (matchKeyword('default')) {
                        lex();
                        test = null;
                    } else {
                        expectKeyword('case');
                        test = parseExpression();
                    }
                    expect(':');

                    while (startIndex < length) {
                        if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                            break;
                        }
                        statement = parseStatementListItem();
                        consequent.push(statement);
                    }

                    return node.finishSwitchCase(test, consequent);
                }

                function parseSwitchStatement(node) {
                    var discriminant, cases, clause, oldInSwitch, defaultFound;

                    expectKeyword('switch');

                    expect('(');

                    discriminant = parseExpression();

                    expect(')');

                    expect('{');

                    cases = [];

                    if (match('}')) {
                        lex();
                        return node.finishSwitchStatement(discriminant, cases);
                    }

                    oldInSwitch = state.inSwitch;
                    state.inSwitch = true;
                    defaultFound = false;

                    while (startIndex < length) {
                        if (match('}')) {
                            break;
                        }
                        clause = parseSwitchCase();
                        if (clause.test === null) {
                            if (defaultFound) {
                                throwError(Messages.MultipleDefaultsInSwitch);
                            }
                            defaultFound = true;
                        }
                        cases.push(clause);
                    }

                    state.inSwitch = oldInSwitch;

                    expect('}');

                    return node.finishSwitchStatement(discriminant, cases);
                }

                // ECMA-262 13.14 The throw statement

                function parseThrowStatement(node) {
                    var argument;

                    expectKeyword('throw');

                    if (hasLineTerminator) {
                        throwError(Messages.NewlineAfterThrow);
                    }

                    argument = parseExpression();

                    consumeSemicolon();

                    return node.finishThrowStatement(argument);
                }

                // ECMA-262 13.15 The try statement

                function parseCatchClause() {
                    var param, params = [], paramMap = {}, key, i, body, node = new Node();

                    expectKeyword('catch');

                    expect('(');
                    if (match(')')) {
                        throwUnexpectedToken(lookahead);
                    }

                    param = parsePattern(params);
                    for (i = 0; i < params.length; i++) {
                        key = '$' + params[i].value;
                        if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                            tolerateError(Messages.DuplicateBinding, params[i].value);
                        }
                        paramMap[key] = true;
                    }

                    // ECMA-262 12.14.1
                    if (strict && isRestrictedWord(param.name)) {
                        tolerateError(Messages.StrictCatchVariable);
                    }

                    expect(')');
                    body = parseBlock();
                    return node.finishCatchClause(param, body);
                }

                function parseTryStatement(node) {
                    var block, handler = null, finalizer = null;

                    expectKeyword('try');

                    block = parseBlock();

                    if (matchKeyword('catch')) {
                        handler = parseCatchClause();
                    }

                    if (matchKeyword('finally')) {
                        lex();
                        finalizer = parseBlock();
                    }

                    if (!handler && !finalizer) {
                        throwError(Messages.NoCatchOrFinally);
                    }

                    return node.finishTryStatement(block, handler, finalizer);
                }

                // ECMA-262 13.16 The debugger statement

                function parseDebuggerStatement(node) {
                    expectKeyword('debugger');

                    consumeSemicolon();

                    return node.finishDebuggerStatement();
                }

                // 13 Statements

                function parseStatement() {
                    var type = lookahead.type,
                        expr,
                        labeledBody,
                        key,
                        node;

                    if (type === Token.EOF) {
                        throwUnexpectedToken(lookahead);
                    }

                    if (type === Token.Punctuator && lookahead.value === '{') {
                        return parseBlock();
                    }
                    isAssignmentTarget = isBindingElement = true;
                    node = new Node();

                    if (type === Token.Punctuator) {
                        switch (lookahead.value) {
                            case ';':
                                return parseEmptyStatement(node);
                            case '(':
                                return parseExpressionStatement(node);
                            default:
                                break;
                        }
                    } else if (type === Token.Keyword) {
                        switch (lookahead.value) {
                            case 'break':
                                return parseBreakStatement(node);
                            case 'continue':
                                return parseContinueStatement(node);
                            case 'debugger':
                                return parseDebuggerStatement(node);
                            case 'do':
                                return parseDoWhileStatement(node);
                            case 'for':
                                return parseForStatement(node);
                            case 'function':
                                return parseFunctionDeclaration(node);
                            case 'if':
                                return parseIfStatement(node);
                            case 'return':
                                return parseReturnStatement(node);
                            case 'switch':
                                return parseSwitchStatement(node);
                            case 'throw':
                                return parseThrowStatement(node);
                            case 'try':
                                return parseTryStatement(node);
                            case 'var':
                                return parseVariableStatement(node);
                            case 'while':
                                return parseWhileStatement(node);
                            case 'with':
                                return parseWithStatement(node);
                            default:
                                break;
                        }
                    }

                    expr = parseExpression();

                    // ECMA-262 12.12 Labelled Statements
                    if ((expr.type === Syntax.Identifier) && match(':')) {
                        lex();

                        key = '$' + expr.name;
                        if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                            throwError(Messages.Redeclaration, 'Label', expr.name);
                        }

                        state.labelSet[key] = true;
                        labeledBody = parseStatement();
                        delete state.labelSet[key];
                        return node.finishLabeledStatement(expr, labeledBody);
                    }

                    consumeSemicolon();

                    return node.finishExpressionStatement(expr);
                }

                // ECMA-262 14.1 Function Definition

                function parseFunctionSourceElements() {
                    var statement, body = [], token, directive, firstRestricted,
                        oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, oldParenthesisCount,
                        node = new Node();

                    expect('{');

                    while (startIndex < length) {
                        if (lookahead.type !== Token.StringLiteral) {
                            break;
                        }
                        token = lookahead;

                        statement = parseStatementListItem();
                        body.push(statement);
                        if (statement.expression.type !== Syntax.Literal) {
                            // this is not directive
                            break;
                        }
                        directive = source.slice(token.start + 1, token.end - 1);
                        if (directive === 'use strict') {
                            strict = true;
                            if (firstRestricted) {
                                tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                            }
                        } else {
                            if (!firstRestricted && token.octal) {
                                firstRestricted = token;
                            }
                        }
                    }

                    oldLabelSet = state.labelSet;
                    oldInIteration = state.inIteration;
                    oldInSwitch = state.inSwitch;
                    oldInFunctionBody = state.inFunctionBody;
                    oldParenthesisCount = state.parenthesizedCount;

                    state.labelSet = {};
                    state.inIteration = false;
                    state.inSwitch = false;
                    state.inFunctionBody = true;
                    state.parenthesizedCount = 0;

                    while (startIndex < length) {
                        if (match('}')) {
                            break;
                        }
                        body.push(parseStatementListItem());
                    }

                    expect('}');

                    state.labelSet = oldLabelSet;
                    state.inIteration = oldInIteration;
                    state.inSwitch = oldInSwitch;
                    state.inFunctionBody = oldInFunctionBody;
                    state.parenthesizedCount = oldParenthesisCount;

                    return node.finishBlockStatement(body);
                }

                function validateParam(options, param, name) {
                    var key = '$' + name;
                    if (strict) {
                        if (isRestrictedWord(name)) {
                            options.stricted = param;
                            options.message = Messages.StrictParamName;
                        }
                        if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                            options.stricted = param;
                            options.message = Messages.StrictParamDupe;
                        }
                    } else if (!options.firstRestricted) {
                        if (isRestrictedWord(name)) {
                            options.firstRestricted = param;
                            options.message = Messages.StrictParamName;
                        } else if (isStrictModeReservedWord(name)) {
                            options.firstRestricted = param;
                            options.message = Messages.StrictReservedWord;
                        } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                            options.stricted = param;
                            options.message = Messages.StrictParamDupe;
                        }
                    }
                    options.paramSet[key] = true;
                }

                function parseParam(options) {
                    var token, param, params = [], i, def;

                    token = lookahead;
                    if (token.value === '...') {
                        param = parseRestElement(params);
                        validateParam(options, param.argument, param.argument.name);
                        options.params.push(param);
                        options.defaults.push(null);
                        return false;
                    }

                    param = parsePatternWithDefault(params);
                    for (i = 0; i < params.length; i++) {
                        validateParam(options, params[i], params[i].value);
                    }

                    if (param.type === Syntax.AssignmentPattern) {
                        def = param.right;
                        param = param.left;
                        ++options.defaultCount;
                    }

                    options.params.push(param);
                    options.defaults.push(def);

                    return !match(')');
                }

                function parseParams(firstRestricted) {
                    var options;

                    options = {
                        params: [],
                        defaultCount: 0,
                        defaults: [],
                        firstRestricted: firstRestricted
                    };

                    expect('(');

                    if (!match(')')) {
                        options.paramSet = {};
                        while (startIndex < length) {
                            if (!parseParam(options)) {
                                break;
                            }
                            expect(',');
                        }
                    }

                    expect(')');

                    if (options.defaultCount === 0) {
                        options.defaults = [];
                    }

                    return {
                        params: options.params,
                        defaults: options.defaults,
                        stricted: options.stricted,
                        firstRestricted: options.firstRestricted,
                        message: options.message
                    };
                }

                function parseFunctionDeclaration(node, identifierIsOptional) {
                    var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,
                        isGenerator, previousAllowYield;

                    previousAllowYield = state.allowYield;

                    expectKeyword('function');

                    isGenerator = match('*');
                    if (isGenerator) {
                        lex();
                    }

                    if (!identifierIsOptional || !match('(')) {
                        token = lookahead;
                        id = parseVariableIdentifier();
                        if (strict) {
                            if (isRestrictedWord(token.value)) {
                                tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                            }
                        } else {
                            if (isRestrictedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictFunctionName;
                            } else if (isStrictModeReservedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictReservedWord;
                            }
                        }
                    }

                    state.allowYield = !isGenerator;
                    tmp = parseParams(firstRestricted);
                    params = tmp.params;
                    defaults = tmp.defaults;
                    stricted = tmp.stricted;
                    firstRestricted = tmp.firstRestricted;
                    if (tmp.message) {
                        message = tmp.message;
                    }


                    previousStrict = strict;
                    body = parseFunctionSourceElements();
                    if (strict && firstRestricted) {
                        throwUnexpectedToken(firstRestricted, message);
                    }
                    if (strict && stricted) {
                        tolerateUnexpectedToken(stricted, message);
                    }

                    strict = previousStrict;
                    state.allowYield = previousAllowYield;

                    return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
                }

                function parseFunctionExpression() {
                    var token, id = null, stricted, firstRestricted, message, tmp,
                        params = [], defaults = [], body, previousStrict, node = new Node(),
                        isGenerator, previousAllowYield;

                    previousAllowYield = state.allowYield;

                    expectKeyword('function');

                    isGenerator = match('*');
                    if (isGenerator) {
                        lex();
                    }

                    state.allowYield = !isGenerator;
                    if (!match('(')) {
                        token = lookahead;
                        id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();
                        if (strict) {
                            if (isRestrictedWord(token.value)) {
                                tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                            }
                        } else {
                            if (isRestrictedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictFunctionName;
                            } else if (isStrictModeReservedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictReservedWord;
                            }
                        }
                    }

                    tmp = parseParams(firstRestricted);
                    params = tmp.params;
                    defaults = tmp.defaults;
                    stricted = tmp.stricted;
                    firstRestricted = tmp.firstRestricted;
                    if (tmp.message) {
                        message = tmp.message;
                    }

                    previousStrict = strict;
                    body = parseFunctionSourceElements();
                    if (strict && firstRestricted) {
                        throwUnexpectedToken(firstRestricted, message);
                    }
                    if (strict && stricted) {
                        tolerateUnexpectedToken(stricted, message);
                    }
                    strict = previousStrict;
                    state.allowYield = previousAllowYield;

                    return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
                }

                // ECMA-262 14.5 Class Definitions

                function parseClassBody() {
                    var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;

                    classBody = new Node();

                    expect('{');
                    body = [];
                    while (!match('}')) {
                        if (match(';')) {
                            lex();
                        } else {
                            method = new Node();
                            token = lookahead;
                            isStatic = false;
                            computed = match('[');
                            if (match('*')) {
                                lex();
                            } else {
                                key = parseObjectPropertyKey();
                                if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
                                    token = lookahead;
                                    isStatic = true;
                                    computed = match('[');
                                    if (match('*')) {
                                        lex();
                                    } else {
                                        key = parseObjectPropertyKey();
                                    }
                                }
                            }
                            method = tryParseMethodDefinition(token, key, computed, method);
                            if (method) {
                                method['static'] = isStatic; // jscs:ignore requireDotNotation
                                if (method.kind === 'init') {
                                    method.kind = 'method';
                                }
                                if (!isStatic) {
                                    if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
                                        if (method.kind !== 'method' || !method.method || method.value.generator) {
                                            throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
                                        }
                                        if (hasConstructor) {
                                            throwUnexpectedToken(token, Messages.DuplicateConstructor);
                                        } else {
                                            hasConstructor = true;
                                        }
                                        method.kind = 'constructor';
                                    }
                                } else {
                                    if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
                                        throwUnexpectedToken(token, Messages.StaticPrototype);
                                    }
                                }
                                method.type = Syntax.MethodDefinition;
                                delete method.method;
                                delete method.shorthand;
                                body.push(method);
                            } else {
                                throwUnexpectedToken(lookahead);
                            }
                        }
                    }
                    lex();
                    return classBody.finishClassBody(body);
                }

                function parseClassDeclaration(identifierIsOptional) {
                    var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
                    strict = true;

                    expectKeyword('class');

                    if (!identifierIsOptional || lookahead.type === Token.Identifier) {
                        id = parseVariableIdentifier();
                    }

                    if (matchKeyword('extends')) {
                        lex();
                        superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
                    }
                    classBody = parseClassBody();
                    strict = previousStrict;

                    return classNode.finishClassDeclaration(id, superClass, classBody);
                }

                function parseClassExpression() {
                    var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
                    strict = true;

                    expectKeyword('class');

                    if (lookahead.type === Token.Identifier) {
                        id = parseVariableIdentifier();
                    }

                    if (matchKeyword('extends')) {
                        lex();
                        superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
                    }
                    classBody = parseClassBody();
                    strict = previousStrict;

                    return classNode.finishClassExpression(id, superClass, classBody);
                }

                // ECMA-262 15.2 Modules

                function parseModuleSpecifier() {
                    var node = new Node();

                    if (lookahead.type !== Token.StringLiteral) {
                        throwError(Messages.InvalidModuleSpecifier);
                    }
                    return node.finishLiteral(lex());
                }

                // ECMA-262 15.2.3 Exports

                function parseExportSpecifier() {
                    var exported, local, node = new Node(), def;
                    if (matchKeyword('default')) {
                        // export {default} from 'something';
                        def = new Node();
                        lex();
                        local = def.finishIdentifier('default');
                    } else {
                        local = parseVariableIdentifier();
                    }
                    if (matchContextualKeyword('as')) {
                        lex();
                        exported = parseNonComputedProperty();
                    }
                    return node.finishExportSpecifier(local, exported);
                }

                function parseExportNamedDeclaration(node) {
                    var declaration = null,
                        isExportFromIdentifier,
                        src = null, specifiers = [];

                    // non-default export
                    if (lookahead.type === Token.Keyword) {
                        // covers:
                        // export var f = 1;
                        switch (lookahead.value) {
                            case 'let':
                            case 'const':
                                declaration = parseLexicalDeclaration({inFor: false});
                                return node.finishExportNamedDeclaration(declaration, specifiers, null);
                            case 'var':
                            case 'class':
                            case 'function':
                                declaration = parseStatementListItem();
                                return node.finishExportNamedDeclaration(declaration, specifiers, null);
                        }
                    }

                    expect('{');
                    while (!match('}')) {
                        isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
                        specifiers.push(parseExportSpecifier());
                        if (!match('}')) {
                            expect(',');
                            if (match('}')) {
                                break;
                            }
                        }
                    }
                    expect('}');

                    if (matchContextualKeyword('from')) {
                        // covering:
                        // export {default} from 'foo';
                        // export {foo} from 'foo';
                        lex();
                        src = parseModuleSpecifier();
                        consumeSemicolon();
                    } else if (isExportFromIdentifier) {
                        // covering:
                        // export {default}; // missing fromClause
                        throwError(lookahead.value ?
                            Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
                    } else {
                        // cover
                        // export {foo};
                        consumeSemicolon();
                    }
                    return node.finishExportNamedDeclaration(declaration, specifiers, src);
                }

                function parseExportDefaultDeclaration(node) {
                    var declaration = null,
                        expression = null;

                    // covers:
                    // export default ...
                    expectKeyword('default');

                    if (matchKeyword('function')) {
                        // covers:
                        // export default function foo () {}
                        // export default function () {}
                        declaration = parseFunctionDeclaration(new Node(), true);
                        return node.finishExportDefaultDeclaration(declaration);
                    }
                    if (matchKeyword('class')) {
                        declaration = parseClassDeclaration(true);
                        return node.finishExportDefaultDeclaration(declaration);
                    }

                    if (matchContextualKeyword('from')) {
                        throwError(Messages.UnexpectedToken, lookahead.value);
                    }

                    // covers:
                    // export default {};
                    // export default [];
                    // export default (1 + 2);
                    if (match('{')) {
                        expression = parseObjectInitializer();
                    } else if (match('[')) {
                        expression = parseArrayInitializer();
                    } else {
                        expression = parseAssignmentExpression();
                    }
                    consumeSemicolon();
                    return node.finishExportDefaultDeclaration(expression);
                }

                function parseExportAllDeclaration(node) {
                    var src;

                    // covers:
                    // export * from 'foo';
                    expect('*');
                    if (!matchContextualKeyword('from')) {
                        throwError(lookahead.value ?
                            Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
                    }
                    lex();
                    src = parseModuleSpecifier();
                    consumeSemicolon();

                    return node.finishExportAllDeclaration(src);
                }

                function parseExportDeclaration() {
                    var node = new Node();
                    if (state.inFunctionBody) {
                        throwError(Messages.IllegalExportDeclaration);
                    }

                    expectKeyword('export');

                    if (matchKeyword('default')) {
                        return parseExportDefaultDeclaration(node);
                    }
                    if (match('*')) {
                        return parseExportAllDeclaration(node);
                    }
                    return parseExportNamedDeclaration(node);
                }

                // ECMA-262 15.2.2 Imports

                function parseImportSpecifier() {
                    // import {<foo as bar>} ...;
                    var local, imported, node = new Node();

                    imported = parseNonComputedProperty();
                    if (matchContextualKeyword('as')) {
                        lex();
                        local = parseVariableIdentifier();
                    }

                    return node.finishImportSpecifier(local, imported);
                }

                function parseNamedImports() {
                    var specifiers = [];
                    // {foo, bar as bas}
                    expect('{');
                    while (!match('}')) {
                        specifiers.push(parseImportSpecifier());
                        if (!match('}')) {
                            expect(',');
                            if (match('}')) {
                                break;
                            }
                        }
                    }
                    expect('}');
                    return specifiers;
                }

                function parseImportDefaultSpecifier() {
                    // import <foo> ...;
                    var local, node = new Node();

                    local = parseNonComputedProperty();

                    return node.finishImportDefaultSpecifier(local);
                }

                function parseImportNamespaceSpecifier() {
                    // import <* as foo> ...;
                    var local, node = new Node();

                    expect('*');
                    if (!matchContextualKeyword('as')) {
                        throwError(Messages.NoAsAfterImportNamespace);
                    }
                    lex();
                    local = parseNonComputedProperty();

                    return node.finishImportNamespaceSpecifier(local);
                }

                function parseImportDeclaration() {
                    var specifiers = [], src, node = new Node();

                    if (state.inFunctionBody) {
                        throwError(Messages.IllegalImportDeclaration);
                    }

                    expectKeyword('import');

                    if (lookahead.type === Token.StringLiteral) {
                        // import 'foo';
                        src = parseModuleSpecifier();
                    } else {

                        if (match('{')) {
                            // import {bar}
                            specifiers = specifiers.concat(parseNamedImports());
                        } else if (match('*')) {
                            // import * as foo
                            specifiers.push(parseImportNamespaceSpecifier());
                        } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
                            // import foo
                            specifiers.push(parseImportDefaultSpecifier());
                            if (match(',')) {
                                lex();
                                if (match('*')) {
                                    // import foo, * as foo
                                    specifiers.push(parseImportNamespaceSpecifier());
                                } else if (match('{')) {
                                    // import foo, {bar}
                                    specifiers = specifiers.concat(parseNamedImports());
                                } else {
                                    throwUnexpectedToken(lookahead);
                                }
                            }
                        } else {
                            throwUnexpectedToken(lex());
                        }

                        if (!matchContextualKeyword('from')) {
                            throwError(lookahead.value ?
                                Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
                        }
                        lex();
                        src = parseModuleSpecifier();
                    }

                    consumeSemicolon();
                    return node.finishImportDeclaration(specifiers, src);
                }

                // ECMA-262 15.1 Scripts

                function parseScriptBody() {
                    var statement, body = [], token, directive, firstRestricted;

                    while (startIndex < length) {
                        token = lookahead;
                        if (token.type !== Token.StringLiteral) {
                            break;
                        }

                        statement = parseStatementListItem();
                        body.push(statement);
                        if (statement.expression.type !== Syntax.Literal) {
                            // this is not directive
                            break;
                        }
                        directive = source.slice(token.start + 1, token.end - 1);
                        if (directive === 'use strict') {
                            strict = true;
                            if (firstRestricted) {
                                tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                            }
                        } else {
                            if (!firstRestricted && token.octal) {
                                firstRestricted = token;
                            }
                        }
                    }

                    while (startIndex < length) {
                        statement = parseStatementListItem();
                        /* istanbul ignore if */
                        if (typeof statement === 'undefined') {
                            break;
                        }
                        body.push(statement);
                    }
                    return body;
                }

                function parseProgram() {
                    var body, node;

                    peek();
                    node = new Node();

                    body = parseScriptBody();
                    return node.finishProgram(body, state.sourceType);
                }

                function filterTokenLocation() {
                    var i, entry, token, tokens = [];

                    for (i = 0; i < extra.tokens.length; ++i) {
                        entry = extra.tokens[i];
                        token = {
                            type: entry.type,
                            value: entry.value
                        };
                        if (entry.regex) {
                            token.regex = {
                                pattern: entry.regex.pattern,
                                flags: entry.regex.flags
                            };
                        }
                        if (extra.range) {
                            token.range = entry.range;
                        }
                        if (extra.loc) {
                            token.loc = entry.loc;
                        }
                        tokens.push(token);
                    }

                    extra.tokens = tokens;
                }

                function tokenize(code, options, delegate) {
                    var toString,
                        tokens;

                    toString = String;
                    if (typeof code !== 'string' && !(code instanceof String)) {
                        code = toString(code);
                    }

                    source = code;
                    index = 0;
                    lineNumber = (source.length > 0) ? 1 : 0;
                    lineStart = 0;
                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;
                    length = source.length;
                    lookahead = null;
                    state = {
                        allowIn: true,
                        allowYield: true,
                        labelSet: {},
                        inFunctionBody: false,
                        inIteration: false,
                        inSwitch: false,
                        lastCommentStart: -1,
                        curlyStack: []
                    };

                    extra = {};

                    // Options matching.
                    options = options || {};

                    // Of course we collect tokens here.
                    options.tokens = true;
                    extra.tokens = [];
                    extra.tokenValues = [];
                    extra.tokenize = true;
                    extra.delegate = delegate;

                    // The following two fields are necessary to compute the Regex tokens.
                    extra.openParenToken = -1;
                    extra.openCurlyToken = -1;

                    extra.range = (typeof options.range === 'boolean') && options.range;
                    extra.loc = (typeof options.loc === 'boolean') && options.loc;

                    if (typeof options.comment === 'boolean' && options.comment) {
                        extra.comments = [];
                    }
                    if (typeof options.tolerant === 'boolean' && options.tolerant) {
                        extra.errors = [];
                    }

                    try {
                        peek();
                        if (lookahead.type === Token.EOF) {
                            return extra.tokens;
                        }

                        lex();
                        while (lookahead.type !== Token.EOF) {
                            try {
                                lex();
                            } catch (lexError) {
                                if (extra.errors) {
                                    recordError(lexError);
                                    // We have to break on the first error
                                    // to avoid infinite loops.
                                    break;
                                } else {
                                    throw lexError;
                                }
                            }
                        }

                        tokens = extra.tokens;
                        if (typeof extra.errors !== 'undefined') {
                            tokens.errors = extra.errors;
                        }
                    } catch (e) {
                        throw e;
                    } finally {
                        extra = {};
                    }
                    return tokens;
                }

                function parse(code, options) {
                    var program, toString;

                    toString = String;
                    if (typeof code !== 'string' && !(code instanceof String)) {
                        code = toString(code);
                    }

                    source = code;
                    index = 0;
                    lineNumber = (source.length > 0) ? 1 : 0;
                    lineStart = 0;
                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;
                    length = source.length;
                    lookahead = null;
                    state = {
                        allowIn: true,
                        allowYield: true,
                        labelSet: {},
                        inFunctionBody: false,
                        inIteration: false,
                        inSwitch: false,
                        lastCommentStart: -1,
                        curlyStack: [],
                        sourceType: 'script'
                    };
                    strict = false;

                    extra = {};
                    if (typeof options !== 'undefined') {
                        extra.range = (typeof options.range === 'boolean') && options.range;
                        extra.loc = (typeof options.loc === 'boolean') && options.loc;
                        extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

                        if (extra.loc && options.source !== null && options.source !== undefined) {
                            extra.source = toString(options.source);
                        }

                        if (typeof options.tokens === 'boolean' && options.tokens) {
                            extra.tokens = [];
                        }
                        if (typeof options.comment === 'boolean' && options.comment) {
                            extra.comments = [];
                        }
                        if (typeof options.tolerant === 'boolean' && options.tolerant) {
                            extra.errors = [];
                        }
                        if (extra.attachComment) {
                            extra.range = true;
                            extra.comments = [];
                            extra.bottomRightStack = [];
                            extra.trailingComments = [];
                            extra.leadingComments = [];
                        }
                        if (options.sourceType === 'module') {
                            // very restrictive condition for now
                            state.sourceType = options.sourceType;
                            strict = true;
                        }
                    }

                    try {
                        program = parseProgram();
                        if (typeof extra.comments !== 'undefined') {
                            program.comments = extra.comments;
                        }
                        if (typeof extra.tokens !== 'undefined') {
                            filterTokenLocation();
                            program.tokens = extra.tokens;
                        }
                        if (typeof extra.errors !== 'undefined') {
                            program.errors = extra.errors;
                        }
                    } catch (e) {
                        throw e;
                    } finally {
                        extra = {};
                    }

                    return program;
                }

                // Sync with *.json manifests.
                exports.version = '2.7.1';

                exports.tokenize = tokenize;

                exports.parse = parse;

                // Deep copy.
                /* istanbul ignore next */
                exports.Syntax = (function () {
                    var name, types = {};

                    if (typeof Object.create === 'function') {
                        types = Object.create(null);
                    }

                    for (name in Syntax) {
                        if (Syntax.hasOwnProperty(name)) {
                            types[name] = Syntax[name];
                        }
                    }

                    if (typeof Object.freeze === 'function') {
                        Object.freeze(types);
                    }

                    return types;
                }());

            }));
            /* vim: set sw=4 ts=4 et tw=80 : */


            /***/ },
        /* 154 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _create = __webpack_require__(78);

            var _create2 = _interopRequireDefault(_create);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);
            var ArrayValue = __webpack_require__(146);

            function invoke(target, thiz, args) {
                return Function.prototype.apply.call(target, thiz, args);
            }

            /**
             * Represents a value that maps directly to an untrusted local value.
             */

            var LinkValue = function (_Value) {
                (0, _inherits3.default)(LinkValue, _Value);

                function LinkValue(value, realm) {
                    (0, _classCallCheck3.default)(this, LinkValue);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(LinkValue).call(this));

                    _this.native = value;
                    _this.realm = realm;
                    return _this;
                }

                (0, _createClass3.default)(LinkValue, [{
                    key: 'ref',
                    value: function ref(name, realm) {
                        var _this2 = this;

                        var that = this;
                        var out = (0, _create2.default)(null);

                        var getter = undefined;
                        if (this.native.hasOwnProperty(name)) {
                            getter = function getter() {
                                return realm.import(_this2.native[name], _this2.linkKind);
                            };
                        } else {
                            getter = function getter() {
                                return realm.import(_this2.native, _this2.linkKind).ref(name, realm).value;
                            };
                        }

                        out.getValue = _regenerator2.default.mark(function _callee() {
                            return _regenerator2.default.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            return _context.abrupt('return', getter());

                                        case 1:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        });
                        out.setValue = _regenerator2.default.mark(function _callee2(to) {
                            return _regenerator2.default.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            return _context2.delegateYield(that.set(name, to), 't0', 1);

                                        case 1:
                                            return _context2.abrupt('return', _context2.t0);

                                        case 2:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        });
                        out.del = function () {
                            return false;
                        };

                        return out;
                    }
                }, {
                    key: 'set',
                    value: _regenerator2.default.mark(function set(name, value, s, extra) {
                        return _regenerator2.default.wrap(function set$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        this.native[name] = value.toNative();

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, set, this);
                    })
                }, {
                    key: 'toNative',
                    value: function toNative() {
                        return this.native;
                    }
                }, {
                    key: 'asString',
                    value: _regenerator2.default.mark(function asString() {
                        return _regenerator2.default.wrap(function asString$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', this.native.toString());

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, asString, this);
                    })
                }, {
                    key: 'makeLink',
                    value: function makeLink(value) {
                        return this.realm.import(value, this.linkKind);
                    }
                }, {
                    key: 'doubleEquals',
                    value: _regenerator2.default.mark(function doubleEquals(other) {
                        return _regenerator2.default.wrap(function doubleEquals$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', this.makeLink(this.native == other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, doubleEquals, this);
                    })
                }, {
                    key: 'tripleEquals',
                    value: _regenerator2.default.mark(function tripleEquals(other) {
                        return _regenerator2.default.wrap(function tripleEquals$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.abrupt('return', this.makeLink(this.native === other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, tripleEquals, this);
                    })
                }, {
                    key: 'add',
                    value: _regenerator2.default.mark(function add(other) {
                        return _regenerator2.default.wrap(function add$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        return _context7.abrupt('return', this.makeLink(this.native + other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, add, this);
                    })
                }, {
                    key: 'subtract',
                    value: _regenerator2.default.mark(function subtract(other) {
                        return _regenerator2.default.wrap(function subtract$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        return _context8.abrupt('return', this.makeLink(this.native - other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, subtract, this);
                    })
                }, {
                    key: 'multiply',
                    value: _regenerator2.default.mark(function multiply(other) {
                        return _regenerator2.default.wrap(function multiply$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        return _context9.abrupt('return', this.makeLink(this.native * other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, multiply, this);
                    })
                }, {
                    key: 'divide',
                    value: _regenerator2.default.mark(function divide(other) {
                        return _regenerator2.default.wrap(function divide$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        return _context10.abrupt('return', this.makeLink(this.native / other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, divide, this);
                    })
                }, {
                    key: 'mod',
                    value: _regenerator2.default.mark(function mod(other) {
                        return _regenerator2.default.wrap(function mod$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        return _context11.abrupt('return', this.makeLink(this.native % other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, mod, this);
                    })
                }, {
                    key: 'shiftLeft',
                    value: _regenerator2.default.mark(function shiftLeft(other) {
                        return _regenerator2.default.wrap(function shiftLeft$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        return _context12.abrupt('return', this.makeLink(this.native << other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, shiftLeft, this);
                    })
                }, {
                    key: 'shiftRight',
                    value: _regenerator2.default.mark(function shiftRight(other) {
                        return _regenerator2.default.wrap(function shiftRight$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        return _context13.abrupt('return', this.makeLink(this.native >> other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, shiftRight, this);
                    })
                }, {
                    key: 'shiftRightZF',
                    value: _regenerator2.default.mark(function shiftRightZF(other) {
                        return _regenerator2.default.wrap(function shiftRightZF$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        return _context14.abrupt('return', this.makeLink(this.native >>> other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, shiftRightZF, this);
                    })
                }, {
                    key: 'bitAnd',
                    value: _regenerator2.default.mark(function bitAnd(other) {
                        return _regenerator2.default.wrap(function bitAnd$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        return _context15.abrupt('return', this.makeLink(this.native & other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context15.stop();
                                }
                            }
                        }, bitAnd, this);
                    })
                }, {
                    key: 'bitOr',
                    value: _regenerator2.default.mark(function bitOr(other) {
                        return _regenerator2.default.wrap(function bitOr$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        return _context16.abrupt('return', this.makeLink(this.native | other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context16.stop();
                                }
                            }
                        }, bitOr, this);
                    })
                }, {
                    key: 'bitXor',
                    value: _regenerator2.default.mark(function bitXor(other) {
                        return _regenerator2.default.wrap(function bitXor$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        return _context17.abrupt('return', this.makeLink(this.native ^ other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context17.stop();
                                }
                            }
                        }, bitXor, this);
                    })
                }, {
                    key: 'gt',
                    value: _regenerator2.default.mark(function gt(other) {
                        return _regenerator2.default.wrap(function gt$(_context18) {
                            while (1) {
                                switch (_context18.prev = _context18.next) {
                                    case 0:
                                        return _context18.abrupt('return', this.makeLink(this.native > other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context18.stop();
                                }
                            }
                        }, gt, this);
                    })
                }, {
                    key: 'lt',
                    value: _regenerator2.default.mark(function lt(other) {
                        return _regenerator2.default.wrap(function lt$(_context19) {
                            while (1) {
                                switch (_context19.prev = _context19.next) {
                                    case 0:
                                        return _context19.abrupt('return', this.makeLink(this.native < other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context19.stop();
                                }
                            }
                        }, lt, this);
                    })
                }, {
                    key: 'gte',
                    value: _regenerator2.default.mark(function gte(other) {
                        return _regenerator2.default.wrap(function gte$(_context20) {
                            while (1) {
                                switch (_context20.prev = _context20.next) {
                                    case 0:
                                        return _context20.abrupt('return', this.makeLink(this.native >= other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context20.stop();
                                }
                            }
                        }, gte, this);
                    })
                }, {
                    key: 'lte',
                    value: _regenerator2.default.mark(function lte(other) {
                        return _regenerator2.default.wrap(function lte$(_context21) {
                            while (1) {
                                switch (_context21.prev = _context21.next) {
                                    case 0:
                                        return _context21.abrupt('return', this.makeLink(this.native <= other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context21.stop();
                                }
                            }
                        }, lte, this);
                    })
                }, {
                    key: 'inOperator',
                    value: _regenerator2.default.mark(function inOperator(other) {
                        return _regenerator2.default.wrap(function inOperator$(_context22) {
                            while (1) {
                                switch (_context22.prev = _context22.next) {
                                    case 0:
                                        return _context22.abrupt('return', this.makeLink(other.toNative() in this.native));

                                    case 1:
                                    case 'end':
                                        return _context22.stop();
                                }
                            }
                        }, inOperator, this);
                    })
                }, {
                    key: 'instanceOf',
                    value: _regenerator2.default.mark(function instanceOf(other) {
                        return _regenerator2.default.wrap(function instanceOf$(_context23) {
                            while (1) {
                                switch (_context23.prev = _context23.next) {
                                    case 0:
                                        return _context23.abrupt('return', this.makeLink(this.native instanceof other.toNative()));

                                    case 1:
                                    case 'end':
                                        return _context23.stop();
                                }
                            }
                        }, instanceOf, this);
                    })
                }, {
                    key: 'unaryPlus',
                    value: _regenerator2.default.mark(function unaryPlus() {
                        return _regenerator2.default.wrap(function unaryPlus$(_context24) {
                            while (1) {
                                switch (_context24.prev = _context24.next) {
                                    case 0:
                                        return _context24.abrupt('return', this.makeLink(+this.native));

                                    case 1:
                                    case 'end':
                                        return _context24.stop();
                                }
                            }
                        }, unaryPlus, this);
                    })
                }, {
                    key: 'unaryMinus',
                    value: _regenerator2.default.mark(function unaryMinus() {
                        return _regenerator2.default.wrap(function unaryMinus$(_context25) {
                            while (1) {
                                switch (_context25.prev = _context25.next) {
                                    case 0:
                                        return _context25.abrupt('return', this.makeLink(-this.native));

                                    case 1:
                                    case 'end':
                                        return _context25.stop();
                                }
                            }
                        }, unaryMinus, this);
                    })
                }, {
                    key: 'not',
                    value: _regenerator2.default.mark(function not() {
                        return _regenerator2.default.wrap(function not$(_context26) {
                            while (1) {
                                switch (_context26.prev = _context26.next) {
                                    case 0:
                                        return _context26.abrupt('return', this.makeLink(!this.native));

                                    case 1:
                                    case 'end':
                                        return _context26.stop();
                                }
                            }
                        }, not, this);
                    })
                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        return _regenerator2.default.wrap(function get$(_context27) {
                            while (1) {
                                switch (_context27.prev = _context27.next) {
                                    case 0:
                                        if (!this.native.hasOwnProperty(name)) {
                                            _context27.next = 2;
                                            break;
                                        }

                                        return _context27.abrupt('return', this.makeLink(this.native[name], realm));

                                    case 2:
                                        return _context27.delegateYield(this.makeLink((0, _getPrototypeOf2.default)(this.native), realm).get(name, realm), 't0', 3);

                                    case 3:
                                        return _context27.abrupt('return', _context27.t0);

                                    case 4:
                                    case 'end':
                                        return _context27.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'observableProperties',
                    value: _regenerator2.default.mark(function observableProperties(realm) {
                        var p;
                        return _regenerator2.default.wrap(function observableProperties$(_context28) {
                            while (1) {
                                switch (_context28.prev = _context28.next) {
                                    case 0:
                                        _context28.t0 = _regenerator2.default.keys(this.native);

                                    case 1:
                                        if ((_context28.t1 = _context28.t0()).done) {
                                            _context28.next = 7;
                                            break;
                                        }

                                        p = _context28.t1.value;
                                        _context28.next = 5;
                                        return this.makeLink(p);

                                    case 5:
                                        _context28.next = 1;
                                        break;

                                    case 7:
                                        return _context28.abrupt('return');

                                    case 8:
                                    case 'end':
                                        return _context28.stop();
                                }
                            }
                        }, observableProperties, this);
                    })

                    /**
                     *
                     * @param {Value} thiz
                     * @param {Value[]} args
                     * @param {Scope} s
                     */

                }, {
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s) {
                        var realArgs, i, result, val;
                        return _regenerator2.default.wrap(function call$(_context29) {
                            while (1) {
                                switch (_context29.prev = _context29.next) {
                                    case 0:
                                        realArgs = new Array(args.length);

                                        for (i = 0; i < args.length; ++i) {
                                            realArgs[i] = args[i].toNative();
                                        }
                                        _context29.prev = 2;
                                        result = invoke(this.native, thiz ? thiz.toNative() : undefined, realArgs);
                                        val = this.makeLink(result, s.realm);

                                        if (typeof s.realm.options.linkValueCallReturnValueWrapper === 'function') {
                                            val = s.realm.options.linkValueCallReturnValueWrapper(val);
                                        }
                                        return _context29.abrupt('return', val);

                                    case 9:
                                        _context29.prev = 9;
                                        _context29.t0 = _context29['catch'](2);
                                        result = this.makeLink(_context29.t0, s.realm);
                                        return _context29.abrupt('return', new CompletionRecord(CompletionRecord.THROW, result));

                                    case 13:
                                    case 'end':
                                        return _context29.stop();
                                }
                            }
                        }, call, this, [[2, 9]]);
                    })
                }, {
                    key: 'getPropertyValueMap',
                    value: function getPropertyValueMap() {
                        var list = {};
                        for (var _p in this.native) {
                            var v = this.native[_p];
                            list[_p] = this.makeLink(v);
                        }
                        return list;
                    }
                }, {
                    key: 'toNumberValue',
                    value: _regenerator2.default.mark(function toNumberValue() {
                        return _regenerator2.default.wrap(function toNumberValue$(_context30) {
                            while (1) {
                                switch (_context30.prev = _context30.next) {
                                    case 0:
                                        return _context30.abrupt('return', Value.fromNative(Number(this.native)));

                                    case 1:
                                    case 'end':
                                        return _context30.stop();
                                }
                            }
                        }, toNumberValue, this);
                    })
                }, {
                    key: 'toStringValue',
                    value: _regenerator2.default.mark(function toStringValue() {
                        return _regenerator2.default.wrap(function toStringValue$(_context31) {
                            while (1) {
                                switch (_context31.prev = _context31.next) {
                                    case 0:
                                        return _context31.abrupt('return', Value.fromNative(String(this.native)));

                                    case 1:
                                    case 'end':
                                        return _context31.stop();
                                }
                            }
                        }, toStringValue, this);
                    })
                }, {
                    key: 'getPrototype',
                    value: function getPrototype(realm) {
                        return realm.ObjectPrototype;
                    }
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew() {
                        return _regenerator2.default.wrap(function makeThisForNew$(_context32) {
                            while (1) {
                                switch (_context32.prev = _context32.next) {
                                    case 0:
                                        return _context32.abrupt('return', Value.undef);

                                    case 1:
                                    case 'end':
                                        return _context32.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })
                }, {
                    key: 'isCallable',
                    get: function get() {
                        return typeof this.native === 'function';
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        return '[Link: ' + this.native + ']';
                    }
                }, {
                    key: 'truthy',
                    get: function get() {
                        return !!this.native;
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return (0, _typeof3.default)(this.native);
                    }
                }, {
                    key: 'linkKind',
                    get: function get() {
                        return 'link';
                    }
                }], [{
                    key: 'make',
                    value: function make(native, realm) {
                        var wellKnown = realm.lookupWellKnown(native);
                        if (wellKnown) return wellKnown;

                        if (Array.isArray(native)) {
                            var ia = new Array(native.length);
                            for (var _i = 0; _i < native.length; ++_i) {
                                ia[_i] = LinkValue.make(native[_i], realm);
                            }
                            return ArrayValue.make(ia, realm);
                        }

                        return new LinkValue(native, realm);
                    }
                }]);
                return LinkValue;
            }(Value);

            module.exports = LinkValue;

            /***/ },
        /* 155 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _get2 = __webpack_require__(132);

            var _get3 = _interopRequireDefault(_get2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var LinkValue = __webpack_require__(154);
            var CompletionRecord = __webpack_require__(115);
            var ArrayValue = __webpack_require__(146);
            /**
             * Represents a value that maps directly to an untrusted local value.
             */

            var SmartLinkValue = function (_LinkValue) {
                (0, _inherits3.default)(SmartLinkValue, _LinkValue);

                function SmartLinkValue(value, realm) {
                    (0, _classCallCheck3.default)(this, SmartLinkValue);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(SmartLinkValue).call(this, value, realm));
                }

                (0, _createClass3.default)(SmartLinkValue, [{
                    key: 'allowRead',
                    value: function allowRead(name) {
                        //if ( name === 'call' ) return true;
                        //return true;
                        if (name.indexOf('esper_') === 0) return true;
                        if (name === 'hasOwnProperty') return true;
                        var props = this.apiProperties;
                        if (props === null) return true;
                        return props.indexOf(name) !== -1;
                    }
                }, {
                    key: 'allowWrite',
                    value: function allowWrite(name) {
                        var allowed = [];
                        var native = this.native;
                        if (native.apiUserProperties) {
                            Array.prototype.push.apply(allowed, native.apiUserProperties);
                        }

                        return allowed.indexOf(name) != -1;
                    }
                }, {
                    key: 'getPropertyValueMap',
                    value: function getPropertyValueMap() {
                        var list = {};
                        for (var p in this.native) {
                            var v = this.native[p];
                            if (this.allowRead(p)) {
                                list[p] = this.makeLink(v);
                            }
                        }
                        return list;
                    }
                }, {
                    key: 'makeLink',
                    value: function makeLink(value) {
                        return this.realm.import(value, 'smart');
                    }
                }, {
                    key: 'ref',
                    value: function ref(name, realm) {
                        var out = (0, _get3.default)((0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'ref', this).call(this, name, realm);
                        var native = this.native;
                        if (name in native) {
                            var noWrite = _regenerator2.default.mark(function noWrite() {
                                var err;
                                return _regenerator2.default.wrap(function noWrite$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                err = CompletionRecord.makeTypeError(realm, "Can't write to protected property: " + name);
                                                return _context.delegateYield(err.addExtra({ code: 'SmartAccessDenied', when: 'write', ident: name }), 't0', 2);

                                            case 2:
                                                _context.next = 4;
                                                return err;

                                            case 4:
                                                return _context.abrupt('return', _context.sent);

                                            case 5:
                                            case 'end':
                                                return _context.stop();
                                        }
                                    }
                                }, noWrite, this);
                            });
                            var noRead = _regenerator2.default.mark(function noRead() {
                                var err;
                                return _regenerator2.default.wrap(function noRead$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                err = CompletionRecord.makeTypeError(realm, "Can't read protected property: " + name);
                                                return _context2.delegateYield(err.addExtra({ code: 'SmartAccessDenied', when: 'read', ident: name }), 't0', 2);

                                            case 2:
                                                _context2.next = 4;
                                                return err;

                                            case 4:
                                                return _context2.abrupt('return', _context2.sent);

                                            case 5:
                                            case 'end':
                                                return _context2.stop();
                                        }
                                    }
                                }, noRead, this);
                            });
                            if (!this.allowRead(name)) {
                                return {
                                    getValue: noRead,
                                    setValue: noWrite,
                                    del: function del() {
                                        return false;
                                    }
                                };
                            } else if (!this.allowWrite(name)) {
                                out.setValue = noWrite;
                            }
                        } else {
                            (function () {
                                var defaultAction = out.setValue;
                                if (!native.apiUserProperties) native.apiUserProperties = [];

                                if (native.apiUserProperties.indexOf(name) == -1) {
                                    out.setValue = _regenerator2.default.mark(function _callee() {
                                        var ret,
                                            _args3 = arguments;
                                        return _regenerator2.default.wrap(function _callee$(_context3) {
                                            while (1) {
                                                switch (_context3.prev = _context3.next) {
                                                    case 0:
                                                        return _context3.delegateYield(defaultAction.apply(this, _args3), 't0', 1);

                                                    case 1:
                                                        ret = _context3.t0;

                                                        native.apiUserProperties.push(name);
                                                        return _context3.abrupt('return', ret);

                                                    case 4:
                                                    case 'end':
                                                        return _context3.stop();
                                                }
                                            }
                                        }, _callee, this);
                                    });
                                }
                            })();
                        }

                        return out;
                    }
                }, {
                    key: 'set',
                    value: _regenerator2.default.mark(function set(name, value, s, extra) {
                        return _regenerator2.default.wrap(function set$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        if (!(name in this.native)) {
                                            _context4.next = 7;
                                            break;
                                        }

                                        if (this.allowWrite(name)) {
                                            _context4.next = 5;
                                            break;
                                        }

                                        _context4.next = 4;
                                        return CompletionRecord.makeTypeError(s.realm, "Can't write to protected property: " + name);

                                    case 4:
                                        return _context4.abrupt('return', _context4.sent);

                                    case 5:
                                        _context4.next = 7;
                                        break;

                                    case 7:
                                        return _context4.delegateYield((0, _get3.default)((0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'set', this).call(this, name, value, s, extra), 't0', 8);

                                    case 8:
                                        return _context4.abrupt('return', _context4.t0);

                                    case 9:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, set, this);
                    })
                }, {
                    key: 'get',
                    value: _regenerator2.default.mark(function get(name, realm) {
                        return _regenerator2.default.wrap(function get$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        if (name in this.native) {
                                            _context5.next = 2;
                                            break;
                                        }

                                        return _context5.abrupt('return', Value.undef);

                                    case 2:

                                        if ('esper_' + name in this.native) name = 'esper_' + name;

                                        if (this.allowRead(name)) {
                                            _context5.next = 7;
                                            break;
                                        }

                                        _context5.next = 6;
                                        return CompletionRecord.makeTypeError(realm, "Can't read protected property: " + name);

                                    case 6:
                                        return _context5.abrupt('return', _context5.sent);

                                    case 7:
                                        return _context5.delegateYield((0, _get3.default)((0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'get', this).call(this, name, realm), 't0', 8);

                                    case 8:
                                        return _context5.abrupt('return', _context5.t0);

                                    case 9:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, get, this);
                    })
                }, {
                    key: 'apiProperties',
                    get: function get() {
                        var allowed = [];
                        var native = this.native;

                        if (native.apiProperties === undefined && native.apiMethods === undefined) return null;

                        if (native.apiProperties) {
                            Array.prototype.push.apply(allowed, native.apiProperties);
                        }

                        if (native.apiUserProperties) {
                            Array.prototype.push.apply(allowed, native.apiUserProperties);
                        }

                        if (native.apiMethods) {
                            Array.prototype.push.apply(allowed, native.apiMethods);
                        }

                        if (native.apiOwnMethods) {
                            Array.prototype.push.apply(allowed, native.apiOwnMethods);
                        }

                        if (native.programmableProperties) {
                            Array.prototype.push.apply(allowed, native.programmableProperties);
                        }

                        return allowed;
                    }
                }, {
                    key: 'debugString',
                    get: function get() {
                        var props = this.apiProperties;
                        return '[SmartLink: ' + this.native + ', props: ' + (props ? props.join(',') : '[none]') + ']';
                    }
                }], [{
                    key: 'make',
                    value: function make(native, realm) {
                        var wellKnown = realm.lookupWellKnown(native);
                        if (wellKnown) return wellKnown;

                        if (Array.isArray(native)) {
                            var ia = new Array(native.length);
                            for (var i = 0; i < native.length; ++i) {
                                ia[i] = realm.import(native[i], 'smart');
                            }
                            return ArrayValue.make(ia, realm);
                        }

                        return new SmartLinkValue(native, realm);
                    }
                }]);
                return SmartLinkValue;
            }(LinkValue);

            module.exports = SmartLinkValue;

            /***/ },
        /* 156 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _create = __webpack_require__(78);

            var _create2 = _interopRequireDefault(_create);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _stringify = __webpack_require__(129);

            var _stringify2 = _interopRequireDefault(_stringify);

            var _keys = __webpack_require__(147);

            var _keys2 = _interopRequireDefault(_keys);

            var _defineProperty = __webpack_require__(96);

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function invokeCB(o, name) {
                if (!(name in o)) return;
                var args = Array.prototype.slice.call(arguments, 2);
                o[name].apply(o, args);
            }

            function detectStrict(body) {
                if (!body || body.length < 1) return;
                var first = body[0];
                if (first.type === 'ExpressionStatement') {
                    var exp = first.expression;
                    if (exp.type === 'Literal' && exp.value === 'use strict') {
                        return true;
                    }
                }
            }

            var ASTNode = function () {
                function ASTNode(o) {
                    (0, _classCallCheck3.default)(this, ASTNode);

                    if ((typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) === 'object') {
                        for (var k in o) {
                            this[k] = o[k];
                        }
                    }
                }

                (0, _createClass3.default)(ASTNode, [{
                    key: 'addHiddenProperty',
                    value: function addHiddenProperty(name, value) {
                        (0, _defineProperty2.default)(this, name, {
                            value: value,
                            configurable: true
                        });
                    }
                }, {
                    key: 'source',
                    value: function source() {
                        if (!this._source) return;
                        if (!this.range) return;
                        return this._source.substring(this.range[0], this.range[1]);
                    }
                }, {
                    key: 'toString',
                    value: function toString() {
                        var _this = this;

                        var extra = (0, _keys2.default)(this).map(function (k) {
                            var v = _this[k];
                            if (v === null || typeof v === 'function') return;
                            if (k == 'range' || k == 'loc' || k == 'nodeID') return;
                            if (v instanceof ASTNode) return k + ': [ASTNode: ' + v.type + ']';
                            if (Array.isArray(v)) return '[...]';else return k + ': ' + (0, _stringify2.default)(v);
                        }).filter(function (v) {
                            return !!v;
                        }).join(', ');
                        return '[ASTNode: ' + this.type + ' ' + extra + ']';
                    }
                }]);
                return ASTNode;
            }();

            var ASTPreprocessor = function () {
                (0, _createClass3.default)(ASTPreprocessor, null, [{
                    key: 'process',
                    value: function process(ast, extra) {
                        if ((typeof ast === 'undefined' ? 'undefined' : (0, _typeof3.default)(ast)) !== 'object') throw new TypeError('Provided AST is invalid (type is ' + (typeof ast === 'undefined' ? 'undefined' : (0, _typeof3.default)(ast)) + ')');
                        var nast = JSON.parse((0, _stringify2.default)(ast), function (n, o) {
                            if (o === null) return null;
                            if ((typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) !== 'object') return o;
                            if (o.type) {
                                var z = new ASTNode(o);
                                if (extra && extra.source) z.addHiddenProperty('_source', extra.source);
                                return z;
                            }
                            return o;
                        });
                        new ASTPreprocessor(nast, extra).start();
                        return nast;
                    }
                }, {
                    key: 'walker',
                    value: _regenerator2.default.mark(function walker(ast, cbs, parent) {
                        var me, _iterator, _isArray, _i, _ref, e, _iterator2, _isArray2, _i2, _ref2, _iterator3, _isArray3, _i3, _ref3, _iterator4, _isArray4, _i4, _ref4, _iterator5, _isArray5, _i5, _ref5, _iterator6, _isArray6, _i6, _ref6, p, n;

                        return _regenerator2.default.wrap(function walker$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        me = function me(a) {
                                            return ASTPreprocessor.walker(a, cbs, ast);
                                        };

                                        invokeCB(cbs, 'enter', ast);
                                        invokeCB(cbs, 'enter' + ast.type, ast);
                                        if (parent && ast instanceof ASTNode) ast.addHiddenProperty('parent', parent);
                                        _context.t0 = ast.type;
                                        _context.next = _context.t0 === 'Program' ? 7 : _context.t0 === 'BlockStatement' ? 23 : _context.t0 === 'NewExpression' ? 39 : _context.t0 === 'CallExpression' ? 39 : _context.t0 === 'WhileStatement' ? 56 : _context.t0 === 'DoWhileStatement' ? 56 : _context.t0 === 'VariableDeclaration' ? 60 : _context.t0 === 'VariableDeclarator' ? 76 : _context.t0 === 'FunctionDeclaration' ? 80 : _context.t0 === 'ArrowFunctionExpression' ? 85 : _context.t0 === 'FunctionExpression' ? 85 : _context.t0 === 'Identifier' ? 89 : _context.t0 === 'ArrayExpression' ? 90 : _context.t0 === 'ObjectExpression' ? 108 : _context.t0 === 'Property' ? 126 : 129;
                                        break;

                                    case 7:
                                        _iterator = ast.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

                                    case 8:
                                        if (!_isArray) {
                                            _context.next = 14;
                                            break;
                                        }

                                        if (!(_i >= _iterator.length)) {
                                            _context.next = 11;
                                            break;
                                        }

                                        return _context.abrupt('break', 22);

                                    case 11:
                                        _ref = _iterator[_i++];
                                        _context.next = 18;
                                        break;

                                    case 14:
                                        _i = _iterator.next();

                                        if (!_i.done) {
                                            _context.next = 17;
                                            break;
                                        }

                                        return _context.abrupt('break', 22);

                                    case 17:
                                        _ref = _i.value;

                                    case 18:
                                        e = _ref;
                                        return _context.delegateYield(me(e), 't1', 20);

                                    case 20:
                                        _context.next = 8;
                                        break;

                                    case 22:
                                        return _context.abrupt('break', 152);

                                    case 23:
                                        _iterator2 = ast.body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

                                    case 24:
                                        if (!_isArray2) {
                                            _context.next = 30;
                                            break;
                                        }

                                        if (!(_i2 >= _iterator2.length)) {
                                            _context.next = 27;
                                            break;
                                        }

                                        return _context.abrupt('break', 38);

                                    case 27:
                                        _ref2 = _iterator2[_i2++];
                                        _context.next = 34;
                                        break;

                                    case 30:
                                        _i2 = _iterator2.next();

                                        if (!_i2.done) {
                                            _context.next = 33;
                                            break;
                                        }

                                        return _context.abrupt('break', 38);

                                    case 33:
                                        _ref2 = _i2.value;

                                    case 34:
                                        e = _ref2;
                                        return _context.delegateYield(me(e), 't2', 36);

                                    case 36:
                                        _context.next = 24;
                                        break;

                                    case 38:
                                        return _context.abrupt('break', 152);

                                    case 39:
                                        _iterator3 = ast.arguments, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

                                    case 40:
                                        if (!_isArray3) {
                                            _context.next = 46;
                                            break;
                                        }

                                        if (!(_i3 >= _iterator3.length)) {
                                            _context.next = 43;
                                            break;
                                        }

                                        return _context.abrupt('break', 54);

                                    case 43:
                                        _ref3 = _iterator3[_i3++];
                                        _context.next = 50;
                                        break;

                                    case 46:
                                        _i3 = _iterator3.next();

                                        if (!_i3.done) {
                                            _context.next = 49;
                                            break;
                                        }

                                        return _context.abrupt('break', 54);

                                    case 49:
                                        _ref3 = _i3.value;

                                    case 50:
                                        e = _ref3;
                                        return _context.delegateYield(me(e), 't3', 52);

                                    case 52:
                                        _context.next = 40;
                                        break;

                                    case 54:
                                        return _context.delegateYield(me(ast.callee), 't4', 55);

                                    case 55:
                                        return _context.abrupt('break', 152);

                                    case 56:
                                        if (!ast.test) {
                                            _context.next = 58;
                                            break;
                                        }

                                        return _context.delegateYield(me(ast.test), 't5', 58);

                                    case 58:
                                        return _context.delegateYield(me(ast.body), 't6', 59);

                                    case 59:
                                        return _context.abrupt('break', 152);

                                    case 60:
                                        _iterator4 = ast.declarations, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

                                    case 61:
                                        if (!_isArray4) {
                                            _context.next = 67;
                                            break;
                                        }

                                        if (!(_i4 >= _iterator4.length)) {
                                            _context.next = 64;
                                            break;
                                        }

                                        return _context.abrupt('break', 75);

                                    case 64:
                                        _ref4 = _iterator4[_i4++];
                                        _context.next = 71;
                                        break;

                                    case 67:
                                        _i4 = _iterator4.next();

                                        if (!_i4.done) {
                                            _context.next = 70;
                                            break;
                                        }

                                        return _context.abrupt('break', 75);

                                    case 70:
                                        _ref4 = _i4.value;

                                    case 71:
                                        e = _ref4;
                                        return _context.delegateYield(me(e), 't7', 73);

                                    case 73:
                                        _context.next = 61;
                                        break;

                                    case 75:
                                        return _context.abrupt('break', 152);

                                    case 76:
                                        invokeCB(cbs, 'decl', ast);

                                        if (!ast.init) {
                                            _context.next = 79;
                                            break;
                                        }

                                        return _context.delegateYield(me(ast.init), 't8', 79);

                                    case 79:
                                        return _context.abrupt('break', 152);

                                    case 80:
                                        invokeCB(cbs, 'decl', ast);
                                        invokeCB(cbs, 'enterFunction', ast);
                                        return _context.delegateYield(me(ast.body), 't9', 83);

                                    case 83:
                                        invokeCB(cbs, 'exitFunction', ast);
                                        return _context.abrupt('break', 152);

                                    case 85:
                                        invokeCB(cbs, 'enterFunction', ast);
                                        return _context.delegateYield(me(ast.body), 't10', 87);

                                    case 87:
                                        invokeCB(cbs, 'exitFunction', ast);
                                        return _context.abrupt('break', 152);

                                    case 89:
                                        return _context.abrupt('break', 152);

                                    case 90:
                                        if (!ast.elements) {
                                            _context.next = 107;
                                            break;
                                        }

                                        _iterator5 = ast.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

                                    case 92:
                                        if (!_isArray5) {
                                            _context.next = 98;
                                            break;
                                        }

                                        if (!(_i5 >= _iterator5.length)) {
                                            _context.next = 95;
                                            break;
                                        }

                                        return _context.abrupt('break', 107);

                                    case 95:
                                        _ref5 = _iterator5[_i5++];
                                        _context.next = 102;
                                        break;

                                    case 98:
                                        _i5 = _iterator5.next();

                                        if (!_i5.done) {
                                            _context.next = 101;
                                            break;
                                        }

                                        return _context.abrupt('break', 107);

                                    case 101:
                                        _ref5 = _i5.value;

                                    case 102:
                                        e = _ref5;

                                        if (!e) {
                                            _context.next = 105;
                                            break;
                                        }

                                        return _context.delegateYield(me(e), 't11', 105);

                                    case 105:
                                        _context.next = 92;
                                        break;

                                    case 107:
                                        return _context.abrupt('break', 152);

                                    case 108:
                                        if (!ast.properties) {
                                            _context.next = 125;
                                            break;
                                        }

                                        _iterator6 = ast.properties, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

                                    case 110:
                                        if (!_isArray6) {
                                            _context.next = 116;
                                            break;
                                        }

                                        if (!(_i6 >= _iterator6.length)) {
                                            _context.next = 113;
                                            break;
                                        }

                                        return _context.abrupt('break', 125);

                                    case 113:
                                        _ref6 = _iterator6[_i6++];
                                        _context.next = 120;
                                        break;

                                    case 116:
                                        _i6 = _iterator6.next();

                                        if (!_i6.done) {
                                            _context.next = 119;
                                            break;
                                        }

                                        return _context.abrupt('break', 125);

                                    case 119:
                                        _ref6 = _i6.value;

                                    case 120:
                                        e = _ref6;

                                        if (!e) {
                                            _context.next = 123;
                                            break;
                                        }

                                        return _context.delegateYield(me(e), 't12', 123);

                                    case 123:
                                        _context.next = 110;
                                        break;

                                    case 125:
                                        return _context.abrupt('break', 152);

                                    case 126:
                                        return _context.delegateYield(me(ast.key), 't13', 127);

                                    case 127:
                                        return _context.delegateYield(me(ast.value), 't14', 128);

                                    case 128:
                                        return _context.abrupt('break', 152);

                                    case 129:
                                        _context.t15 = _regenerator2.default.keys(ast);

                                    case 130:
                                        if ((_context.t16 = _context.t15()).done) {
                                            _context.next = 152;
                                            break;
                                        }

                                        p = _context.t16.value;
                                        n = ast[p];

                                        if (!(p === 'parent')) {
                                            _context.next = 135;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 135:
                                        if (!(p === 'loc')) {
                                            _context.next = 137;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 137:
                                        if (!(p === 'type')) {
                                            _context.next = 139;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 139:
                                        if (!(p === 'nodeID')) {
                                            _context.next = 141;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 141:
                                        if (!(p === 'parentFunction')) {
                                            _context.next = 143;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 143:
                                        if (!(p === 'funcs')) {
                                            _context.next = 145;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 145:
                                        if (!(n === null)) {
                                            _context.next = 147;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 147:
                                        if (!(typeof n.type !== 'string')) {
                                            _context.next = 149;
                                            break;
                                        }

                                        return _context.abrupt('continue', 130);

                                    case 149:
                                        return _context.delegateYield(me(n), 't17', 150);

                                    case 150:
                                        _context.next = 130;
                                        break;

                                    case 152:

                                        invokeCB(cbs, 'exit' + ast.type, ast);
                                        invokeCB(cbs, 'exit', ast);

                                    case 154:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, walker, this);
                    })
                }]);

                function ASTPreprocessor(ast, options) {
                    (0, _classCallCheck3.default)(this, ASTPreprocessor);

                    this.options = options || {};
                    this.ast = ast;
                    this.gen = ASTPreprocessor.walker(ast, this);
                }

                (0, _createClass3.default)(ASTPreprocessor, [{
                    key: 'start',
                    value: function start() {
                        this.counter = 0;
                        this.depth = 0;

                        var globalScope = (0, _create2.default)(null);
                        var globalVars = (0, _create2.default)(null);
                        var globalFuncs = (0, _create2.default)(null);

                        this.scopeStack = [globalScope];
                        this.varStack = [globalVars];
                        this.funcStack = [globalFuncs];
                        for (var _iterator7 = this.gen, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
                            var _ref7;

                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref7 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref7 = _i7.value;
                            }

                            var x = _ref7;
                        }
                    }
                }, {
                    key: 'log',
                    value: function log() {
                        var str = Array.prototype.join.call(arguments, ', ');
                        var indent = new Array(this.depth).join('  ');
                        //console.log(indent + str);
                    }
                }, {
                    key: 'enter',
                    value: function enter(a) {
                        ++this.depth;
                        a.nodeID = this.counter++;
                        this.log('Entering', a.type);
                    }
                }, {
                    key: 'enterIdentifier',
                    value: function enterIdentifier(a) {
                        var fn = this.funcStack[0];
                        fn.refs[a.name] = true;
                    }
                }, {
                    key: 'decl',
                    value: function decl(a) {
                        if (a.parent.type == 'VariableDeclaration' && a.parent.kind != 'var') return;
                        var stack = this.varStack[0];
                        stack[a.id.name] = a;
                    }
                }, {
                    key: 'enterProgram',
                    value: function enterProgram(a) {
                        var scope = (0, _create2.default)(null);

                        a.addHiddenProperty('refs', (0, _create2.default)(null));
                        a.addHiddenProperty('vars', (0, _create2.default)(null));
                        a.addHiddenProperty('funcs', (0, _create2.default)(null));

                        this.funcStack.unshift(a);
                        this.scopeStack.unshift(scope);
                        this.varStack.unshift(a.vars);

                        this.mangleBody(a);

                        var strict = detectStrict(a.body);
                        if (strict !== undefined) a.strict = strict;
                    }
                }, {
                    key: 'enterThisExpression',
                    value: function enterThisExpression(a) {
                        a.srcName = 'this';
                    }
                }, {
                    key: 'enterLabeledStatement',
                    value: function enterLabeledStatement(a) {
                        a.body.label = a.label.name;
                    }
                }, {
                    key: 'exitArrayExpression',
                    value: function exitArrayExpression(a) {
                        a.srcName = '[' + a.elements.map(function (e) {
                                return e ? e.srcName : '';
                            }).join() + ']';
                    }
                }, {
                    key: 'mangleBody',
                    value: function mangleBody(a) {
                        function prehoist(s) {
                            if (s.type === 'VariableDeclaration' && s.kind == 'var') {
                                for (var _iterator8 = s.declarations, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
                                    var _ref8;

                                    if (_isArray8) {
                                        if (_i8 >= _iterator8.length) break;
                                        _ref8 = _iterator8[_i8++];
                                    } else {
                                        _i8 = _iterator8.next();
                                        if (_i8.done) break;
                                        _ref8 = _i8.value;
                                    }

                                    var decl = _ref8;

                                    a.vars[decl.id.name] = decl;
                                }
                            } else if (s.type === 'FunctionDeclaration') {
                                a.vars[s.id.name] = s;
                            }
                        }

                        if (a.body.type === 'BlockStatement') {
                            for (var _iterator9 = a.body.body, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);;) {
                                var _ref9;

                                if (_isArray9) {
                                    if (_i9 >= _iterator9.length) break;
                                    _ref9 = _iterator9[_i9++];
                                } else {
                                    _i9 = _iterator9.next();
                                    if (_i9.done) break;
                                    _ref9 = _i9.value;
                                }

                                var stmt = _ref9;
                                prehoist(stmt);
                            }
                        } else if (Array.isArray(a.body)) {
                            for (var _iterator10 = a.body, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);;) {
                                var _ref10;

                                if (_isArray10) {
                                    if (_i10 >= _iterator10.length) break;
                                    _ref10 = _iterator10[_i10++];
                                } else {
                                    _i10 = _iterator10.next();
                                    if (_i10.done) break;
                                    _ref10 = _i10.value;
                                }

                                var stmt = _ref10;
                                prehoist(stmt);
                            }
                        } else {
                            prehoist(a.body);
                        }
                    }
                }, {
                    key: 'enterFunction',
                    value: function enterFunction(a) {
                        this.funcStack.unshift(a);
                        var scope = (0, _create2.default)(this.scopeStack[0]);
                        this.scopeStack.unshift(scope);

                        a.addHiddenProperty('refs', (0, _create2.default)(null));
                        a.addHiddenProperty('vars', (0, _create2.default)(null));
                        a.addHiddenProperty('funcs', (0, _create2.default)(null));

                        if (this.options.nonUserCode) {
                            a.addHiddenProperty('nonUserCode', true);
                        }

                        for (var _iterator11 = a.params, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11);;) {
                            var _ref11;

                            if (_isArray11) {
                                if (_i11 >= _iterator11.length) break;
                                _ref11 = _iterator11[_i11++];
                            } else {
                                _i11 = _iterator11.next();
                                if (_i11.done) break;
                                _ref11 = _i11.value;
                            }

                            var o = _ref11;

                            a.vars[o.name] = a;
                        }

                        this.mangleBody(a);

                        var strict = detectStrict(a.body.body);
                        if (strict !== undefined) a.strict = strict;

                        this.varStack.unshift(a.vars);
                    }
                }, {
                    key: 'enterFunctionDeclaration',
                    value: function enterFunctionDeclaration(a) {
                        var parent = this.funcStack[0];
                        //a.parentFunction = parent.nodeID;
                        a.srcName = 'function ' + a.id.name + ' {';
                        parent.funcs[a.id.name] = a;
                    }
                }, {
                    key: 'exitIdentifier',
                    value: function exitIdentifier(a) {
                        a.srcName = a.name;
                    }
                }, {
                    key: 'exitLiteral',
                    value: function exitLiteral(a) {
                        if (a.regex) {
                            a.srcName = '/' + a.regex.pattern + '/' + a.regex.flags;
                        } else if (typeof a.value === 'string') {
                            a.srcName = a.raw;
                        } else if (typeof a.value === 'undefined') {
                            a.srcName = 'undefiend';
                        } else {
                            a.srcName = a.raw;
                        }
                    }
                }, {
                    key: 'exitBinaryExpression',
                    value: function exitBinaryExpression(a) {
                        a.srcName = a.left.srcName + ' ' + a.operator + ' ' + a.right.srcName;
                    }
                }, {
                    key: 'exitMemberExpression',
                    value: function exitMemberExpression(a) {
                        var left = a.object.srcName || '??';
                        var right = a.property.srcName || '(intermediate value)';
                        if (!a.computed) a.srcName = left + '.' + right;else a.srcName = a.srcName = left + '[' + right + ']';
                    }
                }, {
                    key: 'exitCallExpression',
                    value: function exitCallExpression(a) {
                        a.srcName = a.callee.srcName + '(...)';
                    }
                }, {
                    key: 'exitFunction',
                    value: function exitFunction(a) {
                        var vars = this.varStack.shift();
                        var free = {};
                        var upvars = {};
                        for (var r in a.refs) {
                            if (r in vars) {
                                //Local refrence
                            } else if (r in this.varStack[0]) {
                                upvars[r] = true;
                            } else {
                                free[r] = true;
                            }
                        }
                        a.upvars = upvars;
                        a.freevars = free;

                        this.scopeStack.shift();
                        this.funcStack.shift();
                        delete a.refs;
                        //this.log("VARS:", Object.getOwnPropertyNames(a.vars).join(', '));
                    }
                }, {
                    key: 'exitProgram',
                    value: function exitProgram(a) {
                        this.scopeStack.shift();
                        var vars = this.varStack.shift();
                        //this.log("VARS:", Object.getOwnPropertyNames(a.vars).join(', '));
                    }
                }, {
                    key: 'exit',
                    value: function exit(a) {
                        this.log('Exiting', a.type);
                        --this.depth;
                    }
                }]);
                return ASTPreprocessor;
            }();

            module.exports = ASTPreprocessor;

            /***/ },
        /* 157 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var ObjectValue = __webpack_require__(120);
            var CompletionRecord = __webpack_require__(115);

            var EasyNativeFunction = function (_ObjectValue) {
                (0, _inherits3.default)(EasyNativeFunction, _ObjectValue);

                function EasyNativeFunction(realm) {
                    (0, _classCallCheck3.default)(this, EasyNativeFunction);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(EasyNativeFunction).call(this, realm, realm.FunctionPrototype));
                }

                (0, _createClass3.default)(EasyNativeFunction, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, argz, scope, extra) {
                        var s,
                            o,
                            _args = arguments;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        _context.prev = 0;
                                        s = scope ? scope.createChild() : scope;

                                        if (s) s.strict = true;
                                        return _context.delegateYield(this.fn.apply(this.binding, _args, s, extra), 't0', 4);

                                    case 4:
                                        o = _context.t0;

                                        if (!(o instanceof CompletionRecord)) {
                                            _context.next = 7;
                                            break;
                                        }

                                        return _context.abrupt('return', o);

                                    case 7:
                                        if (!(o instanceof Value)) o = scope.realm.makeForForeignObject(o);
                                        return _context.abrupt('return', new CompletionRecord(CompletionRecord.NORMAL, o));

                                    case 11:
                                        _context.prev = 11;
                                        _context.t1 = _context['catch'](0);
                                        return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, scope.realm.makeForForeignObject(_context.t1)));

                                    case 14:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this, [[0, 11]]);
                    })
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew(realm) {
                        return _regenerator2.default.wrap(function makeThisForNew$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        _context2.next = 2;
                                        return CompletionRecord.makeTypeError(realm, 'function is not a constructor');

                                    case 2:
                                        return _context2.abrupt('return', _context2.sent);

                                    case 3:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })
                }, {
                    key: 'debugString',
                    get: function get() {
                        return 'function() { [Native Code] }';
                    }
                }], [{
                    key: 'make',
                    value: function make(realm, fx, binding) {
                        var out = new EasyNativeFunction(realm);
                        out.fn = fx;
                        out.binding = binding;
                        return out;
                    }
                }, {
                    key: 'makeForNative',
                    value: function makeForNative(realm, fx) {
                        var out = new EasyNativeFunction(realm);
                        out.fn = _regenerator2.default.mark(function _callee(thiz, args) {
                            var rargs, i, nt, nr;
                            return _regenerator2.default.wrap(function _callee$(_context3) {
                                while (1) {
                                    switch (_context3.prev = _context3.next) {
                                        case 0:
                                            rargs = new Array(args.length);

                                            for (i = 0; i < args.length; ++i) {
                                                rargs[i] = args[i].toNative();
                                            }
                                            nt = thiz.toNative();
                                            nr = fx.apply(nt, rargs);
                                            return _context3.abrupt('return', Value.fromNative(nr));

                                        case 5:
                                        case 'end':
                                            return _context3.stop();
                                    }
                                }
                            }, _callee, this);
                        });
                        return out;
                    }
                }]);
                return EasyNativeFunction;
            }(ObjectValue);

            EasyNativeFunction.prototype.clazz = 'Function';

            module.exports = EasyNativeFunction;

            /***/ },
        /* 158 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var ObjectValue = __webpack_require__(120);
            var EasyObjectValue = __webpack_require__(159);
            var Value = __webpack_require__(103);
            var NullValue = __webpack_require__(137);
            var UndefinedValue = __webpack_require__(140);

            var ObjectPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(ObjectPrototype, _EasyObjectValue);

                function ObjectPrototype(realm) {
                    (0, _classCallCheck3.default)(this, ObjectPrototype);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ObjectPrototype).call(this, realm));

                    _this.setPrototype(null);
                    return _this;
                }

                (0, _createClass3.default)(ObjectPrototype, null, [{
                    key: 'hasOwnProperty$e',
                    value: _regenerator2.default.mark(function hasOwnProperty$e(thiz, args) {
                        var name;
                        return _regenerator2.default.wrap(function hasOwnProperty$e$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.delegateYield(args[0].toStringNative(), 't0', 1);

                                    case 1:
                                        name = _context.t0;

                                        if (thiz instanceof ObjectValue) {
                                            _context.next = 6;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.false);

                                    case 6:
                                        if (!thiz.hasOwnProperty(name)) {
                                            _context.next = 8;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.true);

                                    case 8:
                                        return _context.abrupt('return', Value.false);

                                    case 9:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, hasOwnProperty$e, this);
                    })
                }, {
                    key: 'isPrototypeOf$e',
                    value: _regenerator2.default.mark(function isPrototypeOf$e(thiz, args, s) {
                        var target, pt, checked;
                        return _regenerator2.default.wrap(function isPrototypeOf$e$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        if (!(args.length < 1)) {
                                            _context2.next = 2;
                                            break;
                                        }

                                        return _context2.abrupt('return', Value.false);

                                    case 2:
                                        target = args[0]; //TODO: Call ToObject();

                                        if (target.getPrototype) {
                                            _context2.next = 7;
                                            break;
                                        }

                                        _context2.next = 6;
                                        return CompletionRecord.makeTypeError(s.realm, 'No prototype.');

                                    case 6:
                                        return _context2.abrupt('return', _context2.sent);

                                    case 7:
                                        pt = target.getPrototype(s.realm);
                                        checked = [pt];

                                    case 9:
                                        if (!pt) {
                                            _context2.next = 18;
                                            break;
                                        }

                                        if (!(pt === thiz)) {
                                            _context2.next = 12;
                                            break;
                                        }

                                        return _context2.abrupt('return', Value.true);

                                    case 12:
                                        pt = pt.getPrototype(s.realm);

                                        if (!(checked.indexOf(pt) !== -1)) {
                                            _context2.next = 15;
                                            break;
                                        }

                                        return _context2.abrupt('break', 18);

                                    case 15:
                                        checked.push(pt);
                                        _context2.next = 9;
                                        break;

                                    case 18:
                                        return _context2.abrupt('return', Value.false);

                                    case 19:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, isPrototypeOf$e, this);
                    })
                }, {
                    key: 'propertyIsEnumerable$e',
                    value: _regenerator2.default.mark(function propertyIsEnumerable$e(thiz, args) {
                        var nam, pd;
                        return _regenerator2.default.wrap(function propertyIsEnumerable$e$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.delegateYield(args[0].toStringNative(), 't0', 1);

                                    case 1:
                                        nam = _context3.t0;
                                        pd = thiz.properties[nam];
                                        return _context3.abrupt('return', this.fromNative(pd.enumerable));

                                    case 4:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, propertyIsEnumerable$e, this);
                    })
                }, {
                    key: 'toLocaleString$e',
                    value: _regenerator2.default.mark(function toLocaleString$e(thiz, args) {
                        return _regenerator2.default.wrap(function toLocaleString$e$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.delegateYield(ObjectPrototype.toString$e(thiz, args), 't0', 1);

                                    case 1:
                                        return _context4.abrupt('return', _context4.t0);

                                    case 2:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, toLocaleString$e, this);
                    })
                }, {
                    key: 'toString$e',
                    value: _regenerator2.default.mark(function toString$e(thiz, args) {
                        return _regenerator2.default.wrap(function toString$e$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        if (!(thiz instanceof UndefinedValue)) {
                                            _context5.next = 2;
                                            break;
                                        }

                                        return _context5.abrupt('return', this.fromNative('[object Undefined]'));

                                    case 2:
                                        if (!(thiz instanceof NullValue)) {
                                            _context5.next = 4;
                                            break;
                                        }

                                        return _context5.abrupt('return', this.fromNative('[object Null]'));

                                    case 4:
                                        return _context5.abrupt('return', this.fromNative('[object ' + thiz.clazz + ']'));

                                    case 5:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, toString$e, this);
                    })
                }, {
                    key: 'valueOf$e',
                    value: _regenerator2.default.mark(function valueOf$e(thiz, args) {
                        return _regenerator2.default.wrap(function valueOf$e$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        if (!(thiz.specTypeName === 'object')) {
                                            _context6.next = 2;
                                            break;
                                        }

                                        return _context6.abrupt('return', thiz);

                                    case 2:
                                        return _context6.abrupt('return', thiz);

                                    case 3:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, valueOf$e, this);
                    })
                }]);
                return ObjectPrototype;
            }(EasyObjectValue);

            ObjectPrototype.prototype.wellKnownName = '%ObjectPrototype%';

            module.exports = ObjectPrototype;

            /***/ },
        /* 159 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';
            /* @flow */

            var _getOwnPropertyDescriptor = __webpack_require__(133);

            var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _getOwnPropertyNames = __webpack_require__(160);

            var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var PropertyDescriptor = __webpack_require__(127);
            var ObjectValue = __webpack_require__(120);
            var CompletionRecord = __webpack_require__(115);
            var EasyNativeFunction = __webpack_require__(157);

            var EasyObjectValue = function (_ObjectValue) {
                (0, _inherits3.default)(EasyObjectValue, _ObjectValue);

                function EasyObjectValue(realm) {
                    (0, _classCallCheck3.default)(this, EasyObjectValue);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(EasyObjectValue).call(this, realm));

                    var objProto = realm.ObjectPrototype;
                    if (typeof _this.objPrototype === 'function') {
                        objProto = _this.objPrototype(realm);
                    } else if (typeof _this.call === 'function') {
                        objProto = realm.FunctionPrototype;
                    }
                    if (_this.call == 'function') _this.clazz = 'Function';
                    _this.setPrototype(objProto);

                    _this._init(realm);
                    return _this;
                }

                (0, _createClass3.default)(EasyObjectValue, [{
                    key: '_init',
                    value: function _init(realm) {
                        var clazz = (0, _getPrototypeOf2.default)(this);
                        for (var _iterator = (0, _getOwnPropertyNames2.default)(clazz.constructor), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var p = _ref;

                            if (p === 'length') continue;
                            if (p === 'name') continue;
                            if (p === 'prototype') continue;
                            if (p === 'constructor') continue;
                            if (p === 'caller') continue;
                            if (p === 'callee') continue;
                            if (p === 'arguments') continue;
                            var parts = p.split(/\$/);
                            var name = parts[0];
                            var flags = parts[1] || '';
                            var d = (0, _getOwnPropertyDescriptor2.default)(clazz.constructor, p);
                            var v = new PropertyDescriptor();
                            var length = 1;

                            if (d.get) {
                                //Its a property
                                var val = d.get();
                                if (val instanceof Value) v.value = val;else v.value = this.fromNative(val);
                            } else {
                                if (d.value.esperLength !== undefined) length = d.value.esperLength;
                                var rb = EasyNativeFunction.make(realm, d.value, this);
                                var rblen = new PropertyDescriptor(Value.fromNative(length));
                                rblen.configurable = false;
                                rblen.writable = false;
                                rblen.enumerable = false;
                                rb.properties['length'] = rblen;
                                v.value = rb;
                            }
                            if (flags.indexOf('e') !== -1) v.enumerable = false;
                            if (flags.indexOf('w') !== -1) v.writable = false;
                            if (flags.indexOf('c') !== -1) v.configurable = false;
                            if (flags.indexOf('g') !== -1) {
                                v.getter = v.value;
                                delete v.value;
                            }
                            this.properties[name] = v;
                        }

                        if (this.callPrototype) {
                            var pt = new PropertyDescriptor(this.callPrototype(realm));
                            pt.configurable = false;
                            pt.enumerable = false;
                            pt.writable = false;
                            this.properties['prototype'] = pt;
                        }

                        if (this.callLength !== undefined) {
                            var rblen = new PropertyDescriptor(Value.fromNative(this.callLength));
                            rblen.configurable = false;
                            rblen.writable = false;
                            rblen.enumerable = false;
                            this.properties['length'] = rblen;
                        }

                        if (this.constructorFor) {
                            var target = this.constructorFor(realm);
                            if (target) {
                                var cs = new PropertyDescriptor(this);
                                cs.configurable = false;
                                cs.enumerable = false;
                                target.properties['constructor'] = cs;
                            }
                        }

                        if (realm.Function) {
                            var cs = new PropertyDescriptor(realm.Function);
                            cs.configurable = false;
                            cs.enumerable = false;
                            this.properties['constructor'] = cs;
                        }
                    }
                }, {
                    key: 'jsTypeName',
                    get: function get() {
                        return typeof this.call === 'function' ? 'function' : 'object';
                    }
                }]);
                return EasyObjectValue;
            }(ObjectValue);

            EasyObjectValue.EasyNativeFunction = EasyNativeFunction;

            module.exports = EasyObjectValue;

            /***/ },
        /* 160 */
        /***/ function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(161), __esModule: true };

            /***/ },
        /* 161 */
        /***/ function(module, exports, __webpack_require__) {

            __webpack_require__(162);
            var $Object = __webpack_require__(18).Object;
            module.exports = function getOwnPropertyNames(it){
                return $Object.getOwnPropertyNames(it);
            };

            /***/ },
        /* 162 */
        /***/ function(module, exports, __webpack_require__) {

            // 19.1.2.7 Object.getOwnPropertyNames(O)
            __webpack_require__(124)('getOwnPropertyNames', function(){
                return __webpack_require__(92).f;
            });

            /***/ },
        /* 163 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var ClosureValue = __webpack_require__(141);
            var Value = __webpack_require__(103);
            var ObjectValue = __webpack_require__(120);
            var CompletionRecord = __webpack_require__(115);
            var PropertyDescriptor = __webpack_require__(127);

            var BoundFunction = function (_ObjectValue) {
                (0, _inherits3.default)(BoundFunction, _ObjectValue);

                function BoundFunction(func, realm) {
                    (0, _classCallCheck3.default)(this, BoundFunction);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(BoundFunction).call(this, realm));

                    _this.setPrototype(realm.FunctionPrototype);
                    _this.func = func;
                    _this.boundArgs = [];
                    return _this;
                }

                (0, _createClass3.default)(BoundFunction, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s, ext) {
                        var tt, asConstructor, rargs;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        tt = thiz;
                                        asConstructor = ext && ext.asConstructor;

                                        if (!asConstructor) {
                                            tt = this.boundThis;
                                        }

                                        rargs = [].concat(this.boundArgs, args);
                                        return _context.delegateYield(this.func.call(tt, rargs, s, ext), 't0', 5);

                                    case 5:
                                        return _context.abrupt('return', _context.t0);

                                    case 6:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'constructorOf',
                    value: _regenerator2.default.mark(function constructorOf(other, realm) {
                        return _regenerator2.default.wrap(function constructorOf$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.delegateYield(this.func.constructorOf(other, realm), 't0', 1);

                                    case 1:
                                        return _context2.abrupt('return', _context2.t0);

                                    case 2:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, constructorOf, this);
                    })
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew(realm) {
                        return _regenerator2.default.wrap(function makeThisForNew$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.delegateYield(this.func.makeThisForNew(realm), 't0', 1);

                                    case 1:
                                        return _context3.abrupt('return', _context3.t0);

                                    case 2:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })
                }]);
                return BoundFunction;
            }(ObjectValue);

            var FunctionPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(FunctionPrototype, _EasyObjectValue);

                function FunctionPrototype() {
                    (0, _classCallCheck3.default)(this, FunctionPrototype);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(FunctionPrototype).apply(this, arguments));
                }

                (0, _createClass3.default)(FunctionPrototype, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s) {
                        return _regenerator2.default.wrap(function call$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', EasyObjectValue.undef);

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, call, this);
                    })
                }], [{
                    key: 'apply',
                    value: _regenerator2.default.mark(function apply(thiz, args, s) {
                        var vthis, arga, arr, length, i;
                        return _regenerator2.default.wrap(function apply$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        vthis = args[0];
                                        arga = [];

                                        if (!(args.length > 1)) {
                                            _context5.next = 15;
                                            break;
                                        }

                                        arr = args[1];
                                        return _context5.delegateYield(arr.get('length'), 't0', 5);

                                    case 5:
                                        length = _context5.t0;
                                        return _context5.delegateYield(length.toNumberValue(), 't1', 7);

                                    case 7:
                                        length = _context5.t1.toNative();
                                        i = 0;

                                    case 9:
                                        if (!(i < length)) {
                                            _context5.next = 15;
                                            break;
                                        }

                                        return _context5.delegateYield(arr.get(i), 't2', 11);

                                    case 11:
                                        arga[i] = _context5.t2;

                                    case 12:
                                        ++i;
                                        _context5.next = 9;
                                        break;

                                    case 15:
                                        return _context5.delegateYield(thiz.call(vthis, arga, s), 't3', 16);

                                    case 16:
                                        return _context5.abrupt('return', _context5.t3);

                                    case 17:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, apply, this);
                    })
                }, {
                    key: 'bind',
                    value: _regenerator2.default.mark(function bind(thiz, args, s) {
                        var bthis, out, newlen;
                        return _regenerator2.default.wrap(function bind$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        bthis = s.realm.globalScope.object; //TODO: is this actually null in scrict mode?

                                        if (args.length > 0) {
                                            if (args[0].jsTypeName !== 'undefined') bthis = args[0];
                                        }
                                        out = new BoundFunction(thiz, s.realm);

                                        if (args.length > 1) out.boundArgs = args.slice(1);
                                        out.boundThis = bthis;

                                        if (thiz.properties['length']) {
                                            newlen = thiz.properties['length'].value.toNative() - out.boundArgs.length;

                                            out.properties['length'] = new PropertyDescriptor(this.fromNative(newlen));
                                        }
                                        return _context6.abrupt('return', out);

                                    case 7:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, bind, this);
                    })
                }, {
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s) {
                        var vthis;
                        return _regenerator2.default.wrap(function call$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        vthis = Value.undef;

                                        if (args.length > 0) vthis = args.shift();
                                        return _context7.delegateYield(thiz.call(vthis, args, s), 't0', 3);

                                    case 3:
                                        return _context7.abrupt('return', _context7.t0);

                                    case 4:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'toString',
                    value: _regenerator2.default.mark(function toString(thiz, args, s) {
                        var astsrc;
                        return _regenerator2.default.wrap(function toString$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        if (!(thiz instanceof ClosureValue)) {
                                            _context8.next = 7;
                                            break;
                                        }

                                        astsrc = thiz.func.source();

                                        if (!astsrc) {
                                            _context8.next = 4;
                                            break;
                                        }

                                        return _context8.abrupt('return', this.fromNative(astsrc));

                                    case 4:
                                        return _context8.abrupt('return', this.fromNative('function() { [AST] }'));

                                    case 7:
                                        if (!(thiz instanceof BoundFunction)) {
                                            _context8.next = 11;
                                            break;
                                        }

                                        return _context8.abrupt('return', this.fromNative('function() { [bound function] }'));

                                    case 11:
                                        if (!(thiz instanceof EasyObjectValue.EasyNativeFunction)) {
                                            _context8.next = 13;
                                            break;
                                        }

                                        return _context8.abrupt('return', this.fromNative('function() { [native code] }'));

                                    case 13:
                                        return _context8.abrupt('return', CompletionRecord.makeTypeError(s.realm, 'Function.prototype.toString is not generic'));

                                    case 14:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, toString, this);
                    })
                }, {
                    key: 'caller$cew',
                    get: function get() {
                        return null;
                    }
                }, {
                    key: 'length$ew',
                    get: function get() {
                        return '?';
                    }
                }, {
                    key: 'name$ew',
                    get: function get() {
                        return '';
                    }
                }]);
                return FunctionPrototype;
            }(EasyObjectValue);

            FunctionPrototype.prototype.wellKnownName = '%FunctionPrototype%';

            module.exports = FunctionPrototype;

            /***/ },
        /* 164 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getOwnPropertyNames = __webpack_require__(160);

            var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

            var _keys = __webpack_require__(147);

            var _keys2 = _interopRequireDefault(_keys);

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var _marked = [defObjectProperty, getDescriptor, objOrThrow].map(_regenerator2.default.mark);

            var EasyObjectValue = __webpack_require__(159);
            var ObjectValue = __webpack_require__(120);
            var ArrayValue = __webpack_require__(146);
            var CompletionRecord = __webpack_require__(115);
            var Value = __webpack_require__(103);
            var PropertyDescriptor = __webpack_require__(127);
            var EmptyValue = __webpack_require__(138);

            function defObjectProperty(obj, name, desc, realm) {
                var value, v, enu, wri, conf, get, set;
                return _regenerator2.default.wrap(function defObjectProperty$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(name instanceof Value)) {
                                    _context.next = 3;
                                    break;
                                }

                                return _context.delegateYield(name.toStringNative(), 't0', 2);

                            case 2:
                                name = _context.t0;

                            case 3:
                                return _context.delegateYield(desc.get('value', realm), 't1', 4);

                            case 4:
                                value = _context.t1;
                                v = new PropertyDescriptor(value);

                                if (!desc.has('enumerable')) {
                                    _context.next = 12;
                                    break;
                                }

                                return _context.delegateYield(desc.get('enumerable', realm), 't2', 8);

                            case 8:
                                enu = _context.t2;

                                if (!(enu instanceof EmptyValue)) {
                                    v.enumerable = enu.truthy;
                                }
                                _context.next = 13;
                                break;

                            case 12:
                                v.enumerable = false;

                            case 13:
                                if (!desc.has('writable')) {
                                    _context.next = 19;
                                    break;
                                }

                                return _context.delegateYield(desc.get('writable', realm), 't3', 15);

                            case 15:
                                wri = _context.t3;

                                if (!(wri instanceof EmptyValue)) {
                                    v.writable = wri.truthy;
                                }
                                _context.next = 20;
                                break;

                            case 19:
                                v.writable = false;

                            case 20:
                                if (!desc.has('configurable')) {
                                    _context.next = 26;
                                    break;
                                }

                                return _context.delegateYield(desc.get('configurable', realm), 't4', 22);

                            case 22:
                                conf = _context.t4;

                                if (!(conf instanceof EmptyValue)) {
                                    v.writable = conf.truthy;
                                }
                                _context.next = 27;
                                break;

                            case 26:
                                v.writable = false;

                            case 27:
                                if (!desc.has('get')) {
                                    _context.next = 31;
                                    break;
                                }

                                return _context.delegateYield(desc.get('get', realm), 't5', 29);

                            case 29:
                                get = _context.t5;

                                if (!(get instanceof EmptyValue)) {
                                    v.getter = get;
                                }

                            case 31:
                                if (!desc.has('set')) {
                                    _context.next = 35;
                                    break;
                                }

                                return _context.delegateYield(desc.get('set', realm), 't6', 33);

                            case 33:
                                set = _context.t6;

                                if (!(set instanceof EmptyValue)) {
                                    v.setter = set;
                                }

                            case 35:

                                obj.rawSetProperty(name, v);
                                return _context.abrupt('return', true);

                            case 37:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _marked[0], this);
            }

            function getDescriptor(target, name, realm) {
                var pdesc, out;
                return _regenerator2.default.wrap(function getDescriptor$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (Object.hasOwnProperty.call(target.properties, name)) {
                                    _context2.next = 2;
                                    break;
                                }

                                return _context2.abrupt('return', Value.undef);

                            case 2:
                                pdesc = target.properties[name];
                                out = new ObjectValue(realm);

                                if (!pdesc.value) {
                                    _context2.next = 6;
                                    break;
                                }

                                return _context2.delegateYield(out.set('value', pdesc.value), 't0', 6);

                            case 6:
                                if (!pdesc.getter) {
                                    _context2.next = 8;
                                    break;
                                }

                                return _context2.delegateYield(out.set('get', pdesc.getter), 't1', 8);

                            case 8:
                                if (!pdesc.setter) {
                                    _context2.next = 10;
                                    break;
                                }

                                return _context2.delegateYield(out.set('set', pdesc.setter), 't2', 10);

                            case 10:
                                return _context2.delegateYield(out.set('writable', Value.fromNative(pdesc.writable)), 't3', 11);

                            case 11:
                                return _context2.delegateYield(out.set('enumerable', Value.fromNative(pdesc.enumerable)), 't4', 12);

                            case 12:
                                return _context2.delegateYield(out.set('configurable', Value.fromNative(pdesc.configurable)), 't5', 13);

                            case 13:
                                return _context2.abrupt('return', out);

                            case 14:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _marked[1], this);
            }

            function objOrThrow(i, realm) {
                var val;
                return _regenerator2.default.wrap(function objOrThrow$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                val = i ? i : Value.undef;

                                if (!(val instanceof EmptyValue)) {
                                    _context3.next = 5;
                                    break;
                                }

                                _context3.next = 4;
                                return CompletionRecord.makeTypeError(realm, 'Cannot convert undefined or null to object');

                            case 4:
                                return _context3.abrupt('return', _context3.sent);

                            case 5:
                                if (val instanceof ObjectValue) {
                                    _context3.next = 9;
                                    break;
                                }

                                _context3.next = 8;
                                return CompletionRecord.makeTypeError(realm, 'Need an object');

                            case 8:
                                return _context3.abrupt('return', _context3.sent);

                            case 9:
                                return _context3.abrupt('return', val);

                            case 10:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _marked[2], this);
            }

            var ObjectObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(ObjectObject, _EasyObjectValue);

                function ObjectObject() {
                    (0, _classCallCheck3.default)(this, ObjectObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ObjectObject).apply(this, arguments));
                }

                (0, _createClass3.default)(ObjectObject, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s, ext) {
                        var asConstructor;
                        return _regenerator2.default.wrap(function call$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        asConstructor = ext && ext.asConstructor;

                                        if (!asConstructor) {
                                            _context4.next = 3;
                                            break;
                                        }

                                        return _context4.abrupt('return', new ObjectValue(s.realm));

                                    case 3:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.ObjectPrototype;
                    }
                    //objPrototype(realm) { return realm.Function; }

                }, {
                    key: 'toNativeCounterpart',
                    value: function toNativeCounterpart() {
                        return Object;
                    }
                }], [{
                    key: 'create$e',
                    value: _regenerator2.default.mark(function create$e(thiz, args, s) {
                        var v, p, propsobj, _iterator, _isArray, _i, _ref, _p, strval, podesc;

                        return _regenerator2.default.wrap(function create$e$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        v = new ObjectValue(s.realm);
                                        p = Value.undef;

                                        if (args.length > 0) {
                                            p = args[0];
                                        }

                                        if (!(p.jsTypeName !== 'object' && p.jsTypeName !== 'function')) {
                                            _context5.next = 7;
                                            break;
                                        }

                                        _context5.next = 6;
                                        return CompletionRecord.makeTypeError(s.realm, 'Object prototype may only be an Object or null');

                                    case 6:
                                        return _context5.abrupt('return', _context5.sent);

                                    case 7:

                                        v.setPrototype(p);

                                        if (!(args.length > 1)) {
                                            _context5.next = 28;
                                            break;
                                        }

                                        propsobj = args[1];
                                        _iterator = propsobj.observableProperties(s.realm), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

                                    case 11:
                                        if (!_isArray) {
                                            _context5.next = 17;
                                            break;
                                        }

                                        if (!(_i >= _iterator.length)) {
                                            _context5.next = 14;
                                            break;
                                        }

                                        return _context5.abrupt('break', 28);

                                    case 14:
                                        _ref = _iterator[_i++];
                                        _context5.next = 21;
                                        break;

                                    case 17:
                                        _i = _iterator.next();

                                        if (!_i.done) {
                                            _context5.next = 20;
                                            break;
                                        }

                                        return _context5.abrupt('break', 28);

                                    case 20:
                                        _ref = _i.value;

                                    case 21:
                                        _p = _ref;
                                        strval = _p.native;
                                        return _context5.delegateYield(propsobj.get(strval, s.realm), 't0', 24);

                                    case 24:
                                        podesc = _context5.t0;
                                        return _context5.delegateYield(defObjectProperty(v, _p, podesc, s.realm), 't1', 26);

                                    case 26:
                                        _context5.next = 11;
                                        break;

                                    case 28:
                                        return _context5.abrupt('return', v);

                                    case 29:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, create$e, this);
                    })
                }, {
                    key: 'defineProperty',
                    value: _regenerator2.default.mark(function defineProperty(thiz, args, s) {
                        var target, name, desc;
                        return _regenerator2.default.wrap(function defineProperty$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context6.t0;
                                        return _context6.delegateYield(args[1].toStringNative(), 't1', 3);

                                    case 3:
                                        name = _context6.t1;
                                        desc = args[2];
                                        return _context6.delegateYield(defObjectProperty(target, name, desc, s.realm), 't2', 6);

                                    case 6:
                                        return _context6.abrupt('return', Value.true);

                                    case 7:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, defineProperty, this);
                    })
                }, {
                    key: 'defineProperties',
                    value: _regenerator2.default.mark(function defineProperties(thiz, args, s) {
                        var target, propsobj, _iterator2, _isArray2, _i2, _ref2, p, _strval, _podesc;

                        return _regenerator2.default.wrap(function defineProperties$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        return _context7.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context7.t0;
                                        return _context7.delegateYield(objOrThrow(args[1], s.realm), 't1', 3);

                                    case 3:
                                        propsobj = _context7.t1;
                                        _iterator2 = propsobj.observableProperties(s.realm), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

                                    case 5:
                                        if (!_isArray2) {
                                            _context7.next = 11;
                                            break;
                                        }

                                        if (!(_i2 >= _iterator2.length)) {
                                            _context7.next = 8;
                                            break;
                                        }

                                        return _context7.abrupt('break', 22);

                                    case 8:
                                        _ref2 = _iterator2[_i2++];
                                        _context7.next = 15;
                                        break;

                                    case 11:
                                        _i2 = _iterator2.next();

                                        if (!_i2.done) {
                                            _context7.next = 14;
                                            break;
                                        }

                                        return _context7.abrupt('break', 22);

                                    case 14:
                                        _ref2 = _i2.value;

                                    case 15:
                                        p = _ref2;
                                        _strval = p.native;
                                        return _context7.delegateYield(propsobj.get(_strval, s.realm), 't2', 18);

                                    case 18:
                                        _podesc = _context7.t2;
                                        return _context7.delegateYield(defObjectProperty(target, p, _podesc, s.realm), 't3', 20);

                                    case 20:
                                        _context7.next = 5;
                                        break;

                                    case 22:
                                        return _context7.abrupt('return', Value.true);

                                    case 23:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, defineProperties, this);
                    })
                }, {
                    key: 'seal$e',
                    value: _regenerator2.default.mark(function seal$e(thiz, args, s) {
                        var target, _iterator3, _isArray3, _i3, _ref3, _p2;

                        return _regenerator2.default.wrap(function seal$e$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        return _context8.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context8.t0;

                                        target.extensable = false;
                                        _iterator3 = (0, _keys2.default)(target.properties), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

                                    case 4:
                                        if (!_isArray3) {
                                            _context8.next = 10;
                                            break;
                                        }

                                        if (!(_i3 >= _iterator3.length)) {
                                            _context8.next = 7;
                                            break;
                                        }

                                        return _context8.abrupt('break', 18);

                                    case 7:
                                        _ref3 = _iterator3[_i3++];
                                        _context8.next = 14;
                                        break;

                                    case 10:
                                        _i3 = _iterator3.next();

                                        if (!_i3.done) {
                                            _context8.next = 13;
                                            break;
                                        }

                                        return _context8.abrupt('break', 18);

                                    case 13:
                                        _ref3 = _i3.value;

                                    case 14:
                                        _p2 = _ref3;

                                        target.properties[_p2].configurable = false;

                                    case 16:
                                        _context8.next = 4;
                                        break;

                                    case 18:
                                        return _context8.abrupt('return', target);

                                    case 19:
                                    case 'end':
                                        return _context8.stop();
                                }
                            }
                        }, seal$e, this);
                    })
                }, {
                    key: 'isSealed',
                    value: _regenerator2.default.mark(function isSealed(thiz, args, s) {
                        var target, _iterator4, _isArray4, _i4, _ref4, _p3, ps;

                        return _regenerator2.default.wrap(function isSealed$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        return _context9.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context9.t0;

                                        if (!target.extensable) {
                                            _context9.next = 4;
                                            break;
                                        }

                                        return _context9.abrupt('return', Value.false);

                                    case 4:
                                        _iterator4 = (0, _keys2.default)(target.properties), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

                                    case 5:
                                        if (!_isArray4) {
                                            _context9.next = 11;
                                            break;
                                        }

                                        if (!(_i4 >= _iterator4.length)) {
                                            _context9.next = 8;
                                            break;
                                        }

                                        return _context9.abrupt('break', 21);

                                    case 8:
                                        _ref4 = _iterator4[_i4++];
                                        _context9.next = 15;
                                        break;

                                    case 11:
                                        _i4 = _iterator4.next();

                                        if (!_i4.done) {
                                            _context9.next = 14;
                                            break;
                                        }

                                        return _context9.abrupt('break', 21);

                                    case 14:
                                        _ref4 = _i4.value;

                                    case 15:
                                        _p3 = _ref4;
                                        ps = target.properties[_p3];

                                        if (!ps.configurable) {
                                            _context9.next = 19;
                                            break;
                                        }

                                        return _context9.abrupt('return', Value.false);

                                    case 19:
                                        _context9.next = 5;
                                        break;

                                    case 21:
                                        return _context9.abrupt('return', Value.true);

                                    case 22:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, isSealed, this);
                    })
                }, {
                    key: 'freeze$e',
                    value: _regenerator2.default.mark(function freeze$e(thiz, args, s) {
                        var target, _p4;

                        return _regenerator2.default.wrap(function freeze$e$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        return _context10.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context10.t0;

                                        target.extensable = false;
                                        _context10.t1 = _regenerator2.default.keys(target.properties);

                                    case 4:
                                        if ((_context10.t2 = _context10.t1()).done) {
                                            _context10.next = 12;
                                            break;
                                        }

                                        _p4 = _context10.t2.value;

                                        if (Object.prototype.hasOwnProperty.call(target.properties, _p4)) {
                                            _context10.next = 8;
                                            break;
                                        }

                                        return _context10.abrupt('continue', 4);

                                    case 8:
                                        target.properties[_p4].configurable = false;
                                        target.properties[_p4].writable = false;
                                        _context10.next = 4;
                                        break;

                                    case 12:
                                        return _context10.abrupt('return', target);

                                    case 13:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, freeze$e, this);
                    })
                }, {
                    key: 'isFrozen',
                    value: _regenerator2.default.mark(function isFrozen(thiz, args, s) {
                        var target, _iterator5, _isArray5, _i5, _ref5, _p5, _ps;

                        return _regenerator2.default.wrap(function isFrozen$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        return _context11.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context11.t0;

                                        if (!target.extensable) {
                                            _context11.next = 4;
                                            break;
                                        }

                                        return _context11.abrupt('return', Value.false);

                                    case 4:
                                        _iterator5 = (0, _keys2.default)(target.properties), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

                                    case 5:
                                        if (!_isArray5) {
                                            _context11.next = 11;
                                            break;
                                        }

                                        if (!(_i5 >= _iterator5.length)) {
                                            _context11.next = 8;
                                            break;
                                        }

                                        return _context11.abrupt('break', 23);

                                    case 8:
                                        _ref5 = _iterator5[_i5++];
                                        _context11.next = 15;
                                        break;

                                    case 11:
                                        _i5 = _iterator5.next();

                                        if (!_i5.done) {
                                            _context11.next = 14;
                                            break;
                                        }

                                        return _context11.abrupt('break', 23);

                                    case 14:
                                        _ref5 = _i5.value;

                                    case 15:
                                        _p5 = _ref5;
                                        _ps = target.properties[_p5];

                                        if (!_ps.configurable) {
                                            _context11.next = 19;
                                            break;
                                        }

                                        return _context11.abrupt('return', Value.false);

                                    case 19:
                                        if (!_ps.writable) {
                                            _context11.next = 21;
                                            break;
                                        }

                                        return _context11.abrupt('return', Value.false);

                                    case 21:
                                        _context11.next = 5;
                                        break;

                                    case 23:
                                        return _context11.abrupt('return', Value.true);

                                    case 24:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, isFrozen, this);
                    })
                }, {
                    key: 'preventExtensions$e',
                    value: _regenerator2.default.mark(function preventExtensions$e(thiz, args, s) {
                        var target;
                        return _regenerator2.default.wrap(function preventExtensions$e$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        return _context12.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context12.t0;

                                        target.extensable = false;
                                        return _context12.abrupt('return', target);

                                    case 4:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, preventExtensions$e, this);
                    })
                }, {
                    key: 'isExtensible$e',
                    value: _regenerator2.default.mark(function isExtensible$e(thiz, args, s) {
                        var target;
                        return _regenerator2.default.wrap(function isExtensible$e$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        return _context13.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context13.t0;
                                        return _context13.abrupt('return', this.fromNative(target.extensable));

                                    case 3:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, isExtensible$e, this);
                    })
                }, {
                    key: 'keys$e',
                    value: _regenerator2.default.mark(function keys$e(thiz, args, s) {
                        var target, result, _iterator6, _isArray6, _i6, _ref6, _p6;

                        return _regenerator2.default.wrap(function keys$e$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        return _context14.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context14.t0;
                                        result = [];
                                        _iterator6 = (0, _keys2.default)(target.properties), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

                                    case 4:
                                        if (!_isArray6) {
                                            _context14.next = 10;
                                            break;
                                        }

                                        if (!(_i6 >= _iterator6.length)) {
                                            _context14.next = 7;
                                            break;
                                        }

                                        return _context14.abrupt('break', 20);

                                    case 7:
                                        _ref6 = _iterator6[_i6++];
                                        _context14.next = 14;
                                        break;

                                    case 10:
                                        _i6 = _iterator6.next();

                                        if (!_i6.done) {
                                            _context14.next = 13;
                                            break;
                                        }

                                        return _context14.abrupt('break', 20);

                                    case 13:
                                        _ref6 = _i6.value;

                                    case 14:
                                        _p6 = _ref6;

                                        if (target.properties[_p6].enumerable) {
                                            _context14.next = 17;
                                            break;
                                        }

                                        return _context14.abrupt('continue', 18);

                                    case 17:
                                        result.push(_p6);

                                    case 18:
                                        _context14.next = 4;
                                        break;

                                    case 20:
                                        return _context14.abrupt('return', ArrayValue.make(result, s.realm));

                                    case 21:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, keys$e, this);
                    })
                }, {
                    key: 'getOwnPropertyNames$e',
                    value: _regenerator2.default.mark(function getOwnPropertyNames$e(thiz, args, s) {
                        var target;
                        return _regenerator2.default.wrap(function getOwnPropertyNames$e$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        return _context15.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context15.t0;
                                        return _context15.abrupt('return', ArrayValue.make((0, _getOwnPropertyNames2.default)(target.properties), s.realm));

                                    case 3:
                                    case 'end':
                                        return _context15.stop();
                                }
                            }
                        }, getOwnPropertyNames$e, this);
                    })
                }, {
                    key: 'getOwnPropertyDescriptor',
                    value: _regenerator2.default.mark(function getOwnPropertyDescriptor(thiz, args, s) {
                        var target, name;
                        return _regenerator2.default.wrap(function getOwnPropertyDescriptor$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        return _context16.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

                                    case 1:
                                        target = _context16.t0;
                                        return _context16.delegateYield(args[1].toStringNative(), 't1', 3);

                                    case 3:
                                        name = _context16.t1;
                                        return _context16.delegateYield(getDescriptor(target, name, s.realm), 't2', 5);

                                    case 5:
                                        return _context16.abrupt('return', _context16.t2);

                                    case 6:
                                    case 'end':
                                        return _context16.stop();
                                }
                            }
                        }, getOwnPropertyDescriptor, this);
                    })
                }, {
                    key: 'getPrototypeOf',
                    value: _regenerator2.default.mark(function getPrototypeOf(thiz, args, s) {
                        var target, proto;
                        return _regenerator2.default.wrap(function getPrototypeOf$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        target = EasyObjectValue.undef;

                                        if (args.length > 0) target = args[0];

                                        if (target.getPrototype) {
                                            _context17.next = 6;
                                            break;
                                        }

                                        _context17.next = 5;
                                        return CompletionRecord.makeTypeError(s.realm, 'No prototype.');

                                    case 5:
                                        return _context17.abrupt('return', _context17.sent);

                                    case 6:
                                        proto = target.getPrototype(s.realm);

                                        if (!proto) {
                                            _context17.next = 9;
                                            break;
                                        }

                                        return _context17.abrupt('return', proto);

                                    case 9:
                                        return _context17.abrupt('return', EasyObjectValue.null);

                                    case 10:
                                    case 'end':
                                        return _context17.stop();
                                }
                            }
                        }, getPrototypeOf, this);
                    })
                }]);
                return ObjectObject;
            }(EasyObjectValue);

            module.exports = ObjectObject;

            /***/ },
        /* 165 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _get2 = __webpack_require__(132);

            var _get3 = _interopRequireDefault(_get2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var ClosureValue = __webpack_require__(141);
            var CompletionRecord = __webpack_require__(115);
            var ASTPreprocessor = __webpack_require__(156);
            var PropertyDescriptor = __webpack_require__(127);

            var FunctionObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(FunctionObject, _EasyObjectValue);

                function FunctionObject() {
                    (0, _classCallCheck3.default)(this, FunctionObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(FunctionObject).apply(this, arguments));
                }

                (0, _createClass3.default)(FunctionObject, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope) {
                        var an, i, code, ast, oast, fn;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        an = new Array(args.length - 1);
                                        i = 0;

                                    case 2:
                                        if (!(i < args.length - 1)) {
                                            _context.next = 8;
                                            break;
                                        }

                                        return _context.delegateYield(args[i].toStringValue(), 't0', 4);

                                    case 4:
                                        an[i] = _context.t0.toNative();

                                    case 5:
                                        ++i;
                                        _context.next = 2;
                                        break;

                                    case 8:
                                        code = 'function name(' + an.join(', ') + ') {\n' + args[args.length - 1].toNative().toString() + '\n}';
                                        ast = undefined;
                                        _context.prev = 10;
                                        oast = scope.realm.parser(code, { loc: true });

                                        ast = ASTPreprocessor.process(oast);
                                        _context.next = 18;
                                        break;

                                    case 15:
                                        _context.prev = 15;
                                        _context.t1 = _context['catch'](10);
                                        return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _context.t1));

                                    case 18:
                                        fn = new ClosureValue(ast.body[0], scope.global);

                                        fn.boundScope = scope.global;
                                        return _context.abrupt('return', fn);

                                    case 21:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this, [[10, 15]]);
                    })
                }, {
                    key: '_init',
                    value: function _init(realm) {
                        (0, _get3.default)((0, _getPrototypeOf2.default)(FunctionObject.prototype), '_init', this).call(this, realm);
                        var cs = new PropertyDescriptor(this);
                        cs.configurable = false;
                        cs.enumerable = false;
                        this.properties['constructor'] = cs;
                    }
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.FunctionPrototype;
                    }
                }, {
                    key: 'callLength',
                    get: function get() {
                        return 1;
                    }
                    //objPrototype(realm) { return realm.Function; }

                }]);
                return FunctionObject;
            }(EasyObjectValue);

            module.exports = FunctionObject;

            /***/ },
        /* 166 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);

            var NumberPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(NumberPrototype, _EasyObjectValue);

                function NumberPrototype() {
                    (0, _classCallCheck3.default)(this, NumberPrototype);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(NumberPrototype).apply(this, arguments));
                }

                (0, _createClass3.default)(NumberPrototype, null, [{
                    key: 'valueOf',
                    value: _regenerator2.default.mark(function valueOf(thiz) {
                        var pv;
                        return _regenerator2.default.wrap(function valueOf$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (!(thiz.specTypeName === 'number')) {
                                            _context.next = 2;
                                            break;
                                        }

                                        return _context.abrupt('return', thiz);

                                    case 2:
                                        if (!(thiz.specTypeName === 'object')) {
                                            _context.next = 6;
                                            break;
                                        }

                                        pv = thiz.primativeValue;

                                        if (!(pv.specTypeName === 'number')) {
                                            _context.next = 6;
                                            break;
                                        }

                                        return _context.abrupt('return', pv);

                                    case 6:
                                        throw new TypeError('Couldnt get there.');

                                    case 7:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, valueOf, this);
                    })
                }, {
                    key: 'toExponential',
                    value: _regenerator2.default.mark(function toExponential(thiz, argz) {
                        var a, num;
                        return _regenerator2.default.wrap(function toExponential$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        a = undefined;

                                        if (!(argz.length > 0)) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        return _context2.delegateYield(argz[0].toNumberNative(), 't0', 3);

                                    case 3:
                                        a = _context2.t0;

                                    case 4:
                                        return _context2.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

                                    case 5:
                                        num = _context2.t1;
                                        return _context2.abrupt('return', this.fromNative(num.toExponential(a)));

                                    case 7:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, toExponential, this);
                    })
                }, {
                    key: 'toFixed',
                    value: _regenerator2.default.mark(function toFixed(thiz, argz) {
                        var a, num;
                        return _regenerator2.default.wrap(function toFixed$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        a = undefined;

                                        if (!(argz.length > 0)) {
                                            _context3.next = 4;
                                            break;
                                        }

                                        return _context3.delegateYield(argz[0].toNumberNative(), 't0', 3);

                                    case 3:
                                        a = _context3.t0;

                                    case 4:
                                        return _context3.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

                                    case 5:
                                        num = _context3.t1;
                                        return _context3.abrupt('return', this.fromNative(num.toFixed(a)));

                                    case 7:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, toFixed, this);
                    })
                }, {
                    key: 'toPrecision',
                    value: _regenerator2.default.mark(function toPrecision(thiz, argz) {
                        var a, num;
                        return _regenerator2.default.wrap(function toPrecision$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        a = undefined;

                                        if (!(argz.length > 0)) {
                                            _context4.next = 4;
                                            break;
                                        }

                                        return _context4.delegateYield(argz[0].toNumberNative(), 't0', 3);

                                    case 3:
                                        a = _context4.t0;

                                    case 4:
                                        return _context4.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

                                    case 5:
                                        num = _context4.t1;
                                        return _context4.abrupt('return', this.fromNative(num.toPrecision(a)));

                                    case 7:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, toPrecision, this);
                    })
                }, {
                    key: 'toString',
                    value: _regenerator2.default.mark(function toString(thiz, argz) {
                        var a, num;
                        return _regenerator2.default.wrap(function toString$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        a = undefined;

                                        if (!(argz.length > 0)) {
                                            _context5.next = 4;
                                            break;
                                        }

                                        return _context5.delegateYield(argz[0].toNumberNative(), 't0', 3);

                                    case 3:
                                        a = _context5.t0;

                                    case 4:
                                        return _context5.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

                                    case 5:
                                        num = _context5.t1;
                                        return _context5.abrupt('return', this.fromNative(num.toString(a)));

                                    case 7:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, toString, this);
                    })
                }]);
                return NumberPrototype;
            }(EasyObjectValue);

            NumberPrototype.prototype.wellKnownName = '%NumberPrototype%';
            module.exports = NumberPrototype;

            /***/ },
        /* 167 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var CompletionRecord = __webpack_require__(115);
            var EmptyValue = __webpack_require__(138);
            var ArrayValue = __webpack_require__(146);
            var _g = __webpack_require__(116);

            function wrapStringPrototype(name) {
                var fx = String.prototype[name];
                var genfx = _regenerator2.default.mark(function genfx(thiz, args, s) {
                    var sv, argz, i, result, vals, nv;
                    return _regenerator2.default.wrap(function genfx$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!(thiz instanceof EmptyValue)) {
                                        _context.next = 4;
                                        break;
                                    }

                                    _context.next = 3;
                                    return CompletionRecord.makeTypeError(s.realm, 'called String function on null or undefined?');

                                case 3:
                                    return _context.abrupt('return', _context.sent);

                                case 4:
                                    return _context.delegateYield(thiz.toStringValue(s.realm), 't0', 5);

                                case 5:
                                    sv = _context.t0;
                                    argz = new Array(args.length);

                                    for (i = 0; i < args.length; ++i) {
                                        argz[i] = args[i].toNative();
                                    }

                                    result = fx.apply(sv.toNative(), argz);

                                    if (!Array.isArray(result)) {
                                        _context.next = 15;
                                        break;
                                    }

                                    vals = new Array(result.length);

                                    for (i = 0; i < vals.length; ++i) {
                                        vals[i] = s.realm.fromNative(result[i]);
                                    }
                                    return _context.abrupt('return', ArrayValue.make(vals, s.realm));

                                case 15:
                                    nv = s.realm.fromNative(result);
                                    return _context.abrupt('return', nv);

                                case 17:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, genfx, this);
                });
                genfx.esperLength = fx.length;
                return genfx;
            }

            var StringPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(StringPrototype, _EasyObjectValue);

                function StringPrototype() {
                    (0, _classCallCheck3.default)(this, StringPrototype);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(StringPrototype).apply(this, arguments));
                }

                (0, _createClass3.default)(StringPrototype, null, [{
                    key: 'valueOf',
                    value: _regenerator2.default.mark(function valueOf(thiz) {
                        var pv;
                        return _regenerator2.default.wrap(function valueOf$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        if (!(thiz.specTypeName === 'string')) {
                                            _context2.next = 2;
                                            break;
                                        }

                                        return _context2.abrupt('return', thiz);

                                    case 2:
                                        if (!(thiz.specTypeName === 'object')) {
                                            _context2.next = 6;
                                            break;
                                        }

                                        pv = thiz.primativeValue;

                                        if (!(pv.specTypeName == 'string')) {
                                            _context2.next = 6;
                                            break;
                                        }

                                        return _context2.abrupt('return', pv);

                                    case 6:
                                        throw new TypeError('Couldnt get there.');

                                    case 7:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, valueOf, this);
                    })
                }, {
                    key: 'concat',
                    value: _regenerator2.default.mark(function concat(thiz, args, realm) {
                        var base, realArgs, out;
                        return _regenerator2.default.wrap(function concat$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.delegateYield(thiz.toStringNative(), 't0', 1);

                                    case 1:
                                        base = _context4.t0;
                                        return _context4.delegateYield(_g.map(args, _regenerator2.default.mark(function _callee(v) {
                                            return _regenerator2.default.wrap(function _callee$(_context3) {
                                                while (1) {
                                                    switch (_context3.prev = _context3.next) {
                                                        case 0:
                                                            return _context3.delegateYield(v.toStringNative(), 't0', 1);

                                                        case 1:
                                                            return _context3.abrupt('return', _context3.t0);

                                                        case 2:
                                                        case 'end':
                                                            return _context3.stop();
                                                    }
                                                }
                                            }, _callee, this);
                                        })), 't1', 3);

                                    case 3:
                                        realArgs = _context4.t1;
                                        out = String.prototype.concat.apply(base, realArgs);
                                        return _context4.abrupt('return', realm.fromNative(out));

                                    case 6:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, concat, this);
                    })
                }, {
                    key: 'toString',
                    value: _regenerator2.default.mark(function toString(thiz) {
                        return _regenerator2.default.wrap(function toString$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.delegateYield(StringPrototype.valueOf(thiz), 't0', 1);

                                    case 1:
                                        return _context5.abrupt('return', _context5.t0);

                                    case 2:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, toString, this);
                    })
                }, {
                    key: 'length$cew',
                    get: function get() {
                        return StringPrototype.fromNative(0);
                    }
                }]);
                return StringPrototype;
            }(EasyObjectValue);

            StringPrototype.prototype.wellKnownName = '%StringProtoype%';
            StringPrototype.prototype.clazz = 'String';

            StringPrototype.charAt = wrapStringPrototype('charAt');
            StringPrototype.charCodeAt = wrapStringPrototype('charCodeAt');
            StringPrototype.substring = wrapStringPrototype('substring');
            StringPrototype.substr = wrapStringPrototype('substr');
            StringPrototype.split = wrapStringPrototype('split');
            StringPrototype.slice = wrapStringPrototype('slice');
            StringPrototype.lastIndexOf = wrapStringPrototype('lastIndexOf');
            StringPrototype.indexOf = wrapStringPrototype('indexOf');
            StringPrototype.search = wrapStringPrototype('search');
            StringPrototype.trim = wrapStringPrototype('trim');
            StringPrototype.toUpperCase = wrapStringPrototype('toUpperCase');
            StringPrototype.toLocaleUpperCase = wrapStringPrototype('toLocaleUpperCase');
            StringPrototype.toLowerCase = wrapStringPrototype('toLowerCase');
            StringPrototype.toLocaleLowerCase = wrapStringPrototype('toLocaleLowerCase');
            StringPrototype.localeCompare = wrapStringPrototype('localeCompare');

            module.exports = StringPrototype;

            /***/ },
        /* 168 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _typeof2 = __webpack_require__(81);

            var _typeof3 = _interopRequireDefault(_typeof2);

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var _marked = [forceArrayness, getLength, shiftRight, shiftLeft].map(_regenerator2.default.mark);

            var EasyObjectValue = __webpack_require__(159);
            var ObjectValue = __webpack_require__(120);
            var ArrayValue = __webpack_require__(146);
            var PrimitiveValue = __webpack_require__(128);
            var CompletionRecord = __webpack_require__(115);
            var Value = __webpack_require__(103);
            var _g = __webpack_require__(116);

            function forceArrayness(v) {
                return _regenerator2.default.wrap(function forceArrayness$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (v.has('length')) {
                                    _context.next = 2;
                                    break;
                                }

                                return _context.delegateYield(v.set('length', Value.zero), 't0', 2);

                            case 2:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _marked[0], this);
            }

            function getLength(v) {
                var m;
                return _regenerator2.default.wrap(function getLength$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return _context2.delegateYield(v.get('length'), 't0', 1);

                            case 1:
                                m = _context2.t0;
                                return _context2.delegateYield(m.toUIntNative(), 't1', 3);

                            case 3:
                                return _context2.abrupt('return', _context2.t1);

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _marked[1], this);
            }

            var defaultSeperator = Value.fromNative(',');

            function shiftRight(arr, start, amt) {
                var len, i, cur;
                return _regenerator2.default.wrap(function shiftRight$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                amt = amt || 1;
                                return _context3.delegateYield(getLength(arr), 't0', 2);

                            case 2:
                                len = _context3.t0;
                                i = len - 1;

                            case 4:
                                if (!(i >= start)) {
                                    _context3.next = 11;
                                    break;
                                }

                                return _context3.delegateYield(arr.get(i), 't1', 6);

                            case 6:
                                cur = _context3.t1;
                                return _context3.delegateYield(arr.set(i + amt, cur), 't2', 8);

                            case 8:
                                --i;
                                _context3.next = 4;
                                break;

                            case 11:
                                return _context3.delegateYield(arr.set(start, Value.undef), 't3', 12);

                            case 12:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _marked[2], this);
            }

            function shiftLeft(arr, start, amt) {
                var len, _i, _cur, _i2;

                return _regenerator2.default.wrap(function shiftLeft$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                return _context4.delegateYield(getLength(arr), 't0', 1);

                            case 1:
                                len = _context4.t0;
                                _i = start;

                            case 3:
                                if (!(_i < len)) {
                                    _context4.next = 10;
                                    break;
                                }

                                return _context4.delegateYield(arr.get(_i), 't1', 5);

                            case 5:
                                _cur = _context4.t1;
                                return _context4.delegateYield(arr.set(_i - amt, _cur), 't2', 7);

                            case 7:
                                ++_i;
                                _context4.next = 3;
                                break;

                            case 10:
                                for (_i2 = len - amt; _i2 < len; ++_i2) {
                                    delete arr.properties[_i2];
                                }
                                return _context4.delegateYield(arr.set('length', Value.fromNative(len - amt)), 't3', 12);

                            case 12:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _marked[3], this);
            }

            var ArrayPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(ArrayPrototype, _EasyObjectValue);

                function ArrayPrototype() {
                    (0, _classCallCheck3.default)(this, ArrayPrototype);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ArrayPrototype).apply(this, arguments));
                }

                (0, _createClass3.default)(ArrayPrototype, null, [{
                    key: 'concat$e',
                    value: _regenerator2.default.mark(function concat$e(thiz, args, s) {
                        var fx, targ, out, toCopy, idx, _iterator, _isArray, _i3, _ref, arr, l, _i4, tv;

                        return _regenerator2.default.wrap(function concat$e$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        fx = Value.undef;
                                        targ = Value.undef;

                                        if (args.length > 0) fx = args[0];
                                        if (args.length > 1) targ = args[1];

                                        out = [];
                                        toCopy = [thiz].concat(args);
                                        idx = 0;
                                        _iterator = toCopy, _isArray = Array.isArray(_iterator), _i3 = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

                                    case 8:
                                        if (!_isArray) {
                                            _context5.next = 14;
                                            break;
                                        }

                                        if (!(_i3 >= _iterator.length)) {
                                            _context5.next = 11;
                                            break;
                                        }

                                        return _context5.abrupt('break', 39);

                                    case 11:
                                        _ref = _iterator[_i3++];
                                        _context5.next = 18;
                                        break;

                                    case 14:
                                        _i3 = _iterator.next();

                                        if (!_i3.done) {
                                            _context5.next = 17;
                                            break;
                                        }

                                        return _context5.abrupt('break', 39);

                                    case 17:
                                        _ref = _i3.value;

                                    case 18:
                                        arr = _ref;

                                        if (!(arr instanceof PrimitiveValue)) {
                                            _context5.next = 23;
                                            break;
                                        }

                                        out[idx++] = arr;
                                        _context5.next = 37;
                                        break;

                                    case 23:
                                        if (arr.has('length')) {
                                            _context5.next = 27;
                                            break;
                                        }

                                        out[idx++] = arr;
                                        _context5.next = 37;
                                        break;

                                    case 27:
                                        return _context5.delegateYield(getLength(arr), 't0', 28);

                                    case 28:
                                        l = _context5.t0;
                                        _i4 = 0;

                                    case 30:
                                        if (!(_i4 < l)) {
                                            _context5.next = 37;
                                            break;
                                        }

                                        return _context5.delegateYield(arr.get(_i4, s.realm), 't1', 32);

                                    case 32:
                                        tv = _context5.t1;

                                        out[idx++] = tv;

                                    case 34:
                                        ++_i4;
                                        _context5.next = 30;
                                        break;

                                    case 37:
                                        _context5.next = 8;
                                        break;

                                    case 39:
                                        return _context5.abrupt('return', ArrayValue.make(out, s.realm));

                                    case 40:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, concat$e, this);
                    })
                }, {
                    key: 'filter$e',
                    value: _regenerator2.default.mark(function filter$e(thiz, args, s) {
                        var fx, targ, test, out, l, _i5, _tv, tru;

                        return _regenerator2.default.wrap(function filter$e$(_context7) {
                            while (1) {
                                switch (_context7.prev = _context7.next) {
                                    case 0:
                                        fx = Value.undef;
                                        targ = Value.undef;

                                        if (args.length > 0) fx = args[0];
                                        if (args.length > 1) targ = args[1];

                                        test = _regenerator2.default.mark(function test(v, i) {
                                            var res;
                                            return _regenerator2.default.wrap(function test$(_context6) {
                                                while (1) {
                                                    switch (_context6.prev = _context6.next) {
                                                        case 0:
                                                            return _context6.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

                                                        case 1:
                                                            res = _context6.t0;
                                                            return _context6.abrupt('return', res.truthy);

                                                        case 3:
                                                        case 'end':
                                                            return _context6.stop();
                                                    }
                                                }
                                            }, test, this);
                                        });
                                        out = [];
                                        return _context7.delegateYield(getLength(thiz), 't0', 7);

                                    case 7:
                                        l = _context7.t0;
                                        _i5 = 0;

                                    case 9:
                                        if (!(_i5 < l)) {
                                            _context7.next = 18;
                                            break;
                                        }

                                        return _context7.delegateYield(thiz.get(_i5), 't1', 11);

                                    case 11:
                                        _tv = _context7.t1;
                                        return _context7.delegateYield(test(_tv, _i5), 't2', 13);

                                    case 13:
                                        tru = _context7.t2;

                                        if (tru) out.push(_tv);

                                    case 15:
                                        ++_i5;
                                        _context7.next = 9;
                                        break;

                                    case 18:
                                        return _context7.abrupt('return', ArrayValue.make(out, s.realm));

                                    case 19:
                                    case 'end':
                                        return _context7.stop();
                                }
                            }
                        }, filter$e, this);
                    })
                }, {
                    key: 'every$e',
                    value: _regenerator2.default.mark(function every$e(thiz, args, s) {
                        var fx, targ, test, l, _i6, _tv2, _tru;

                        return _regenerator2.default.wrap(function every$e$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        fx = Value.undef;
                                        targ = Value.undef;

                                        if (args.length > 0) fx = args[0];
                                        if (args.length > 1) targ = args[1];

                                        test = _regenerator2.default.mark(function test(v, i) {
                                            var res;
                                            return _regenerator2.default.wrap(function test$(_context8) {
                                                while (1) {
                                                    switch (_context8.prev = _context8.next) {
                                                        case 0:
                                                            return _context8.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

                                                        case 1:
                                                            res = _context8.t0;
                                                            return _context8.abrupt('return', res.truthy);

                                                        case 3:
                                                        case 'end':
                                                            return _context8.stop();
                                                    }
                                                }
                                            }, test, this);
                                        });
                                        return _context9.delegateYield(getLength(thiz), 't0', 6);

                                    case 6:
                                        l = _context9.t0;
                                        _i6 = 0;

                                    case 8:
                                        if (!(_i6 < l)) {
                                            _context9.next = 18;
                                            break;
                                        }

                                        return _context9.delegateYield(thiz.get(_i6), 't1', 10);

                                    case 10:
                                        _tv2 = _context9.t1;
                                        return _context9.delegateYield(test(_tv2, _i6), 't2', 12);

                                    case 12:
                                        _tru = _context9.t2;

                                        if (_tru) {
                                            _context9.next = 15;
                                            break;
                                        }

                                        return _context9.abrupt('return', Value.false);

                                    case 15:
                                        ++_i6;
                                        _context9.next = 8;
                                        break;

                                    case 18:
                                        return _context9.abrupt('return', Value.true);

                                    case 19:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, every$e, this);
                    })
                }, {
                    key: 'some$e',
                    value: _regenerator2.default.mark(function some$e(thiz, args, s) {
                        var fx, targ, test, l, _i7, _tv3, _tru2;

                        return _regenerator2.default.wrap(function some$e$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        fx = Value.undef;
                                        targ = Value.undef;

                                        if (args.length > 0) fx = args[0];
                                        if (args.length > 1) targ = args[1];

                                        test = _regenerator2.default.mark(function test(v, i) {
                                            var res;
                                            return _regenerator2.default.wrap(function test$(_context10) {
                                                while (1) {
                                                    switch (_context10.prev = _context10.next) {
                                                        case 0:
                                                            return _context10.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

                                                        case 1:
                                                            res = _context10.t0;
                                                            return _context10.abrupt('return', res.truthy);

                                                        case 3:
                                                        case 'end':
                                                            return _context10.stop();
                                                    }
                                                }
                                            }, test, this);
                                        });
                                        return _context11.delegateYield(getLength(thiz), 't0', 6);

                                    case 6:
                                        l = _context11.t0;
                                        _i7 = 0;

                                    case 8:
                                        if (!(_i7 < l)) {
                                            _context11.next = 18;
                                            break;
                                        }

                                        return _context11.delegateYield(thiz.get(_i7), 't1', 10);

                                    case 10:
                                        _tv3 = _context11.t1;
                                        return _context11.delegateYield(test(_tv3, _i7), 't2', 12);

                                    case 12:
                                        _tru2 = _context11.t2;

                                        if (!_tru2) {
                                            _context11.next = 15;
                                            break;
                                        }

                                        return _context11.abrupt('return', Value.true);

                                    case 15:
                                        ++_i7;
                                        _context11.next = 8;
                                        break;

                                    case 18:
                                        return _context11.abrupt('return', Value.false);

                                    case 19:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, some$e, this);
                    })
                }, {
                    key: 'map$e',
                    value: _regenerator2.default.mark(function map$e(thiz, args, s) {
                        var fx, targ, l, out, _i8, _tv4, v;

                        return _regenerator2.default.wrap(function map$e$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        fx = Value.undef;
                                        targ = Value.undef;

                                        if (args.length > 0) fx = args[0];

                                        if (fx.isCallable) {
                                            _context12.next = 7;
                                            break;
                                        }

                                        _context12.next = 6;
                                        return CompletionRecord.makeTypeError(s.realm, 'Arg2 not calalble.');

                                    case 6:
                                        return _context12.abrupt('return', _context12.sent);

                                    case 7:

                                        if (args.length > 1) targ = args[1];

                                        return _context12.delegateYield(getLength(thiz), 't0', 9);

                                    case 9:
                                        l = _context12.t0;
                                        out = new Array(l);
                                        _i8 = 0;

                                    case 12:
                                        if (!(_i8 < l)) {
                                            _context12.next = 25;
                                            break;
                                        }

                                        if (thiz.has(_i8)) {
                                            _context12.next = 15;
                                            break;
                                        }

                                        return _context12.abrupt('continue', 22);

                                    case 15:
                                        return _context12.delegateYield(thiz.get(_i8), 't1', 16);

                                    case 16:
                                        _tv4 = _context12.t1;
                                        return _context12.delegateYield(fx.call(targ, [_tv4, Value.fromNative(_i8), thiz], s), 't2', 18);

                                    case 18:
                                        _context12.next = 20;
                                        return _context12.t2;

                                    case 20:
                                        v = _context12.sent;

                                        out[_i8] = v;

                                    case 22:
                                        ++_i8;
                                        _context12.next = 12;
                                        break;

                                    case 25:
                                        return _context12.abrupt('return', ArrayValue.make(out, s.realm));

                                    case 26:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, map$e, this);
                    })
                }, {
                    key: 'forEach$e',
                    value: _regenerator2.default.mark(function forEach$e(thiz, args, s) {
                        var fx, targ, l, _i9, _v, res;

                        return _regenerator2.default.wrap(function forEach$e$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        fx = Value.undef;
                                        targ = Value.undef;

                                        if (args.length > 0) fx = args[0];
                                        if (args.length > 1) targ = args[1];

                                        return _context13.delegateYield(getLength(thiz), 't0', 5);

                                    case 5:
                                        l = _context13.t0;
                                        _i9 = 0;

                                    case 7:
                                        if (!(_i9 < l)) {
                                            _context13.next = 17;
                                            break;
                                        }

                                        if (thiz.has(_i9)) {
                                            _context13.next = 10;
                                            break;
                                        }

                                        return _context13.abrupt('continue', 14);

                                    case 10:
                                        return _context13.delegateYield(thiz.get(_i9), 't1', 11);

                                    case 11:
                                        _v = _context13.t1;
                                        return _context13.delegateYield(fx.call(targ, [_v, Value.fromNative(_i9), thiz], s), 't2', 13);

                                    case 13:
                                        res = _context13.t2;

                                    case 14:
                                        ++_i9;
                                        _context13.next = 7;
                                        break;

                                    case 17:
                                        return _context13.abrupt('return', Value.undef);

                                    case 18:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, forEach$e, this);
                    })
                }, {
                    key: 'indexOf$e',
                    value: _regenerator2.default.mark(function indexOf$e(thiz, args) {
                        var l, match, start, startn, _i10, _v2;

                        return _regenerator2.default.wrap(function indexOf$e$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        return _context14.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context14.t0;
                                        match = args[0] || Value.undef;
                                        start = args[1] || Value.zero;
                                        return _context14.delegateYield(start.toNumberValue(), 't1', 5);

                                    case 5:
                                        startn = _context14.t1.native;

                                        if (isNaN(startn)) startn = 0;else if (startn < 0) startn = 0;

                                        if (!(l > startn)) {
                                            _context14.next = 19;
                                            break;
                                        }

                                        _i10 = startn;

                                    case 9:
                                        if (!(_i10 < l)) {
                                            _context14.next = 19;
                                            break;
                                        }

                                        return _context14.delegateYield(thiz.get(_i10), 't2', 11);

                                    case 11:
                                        _v2 = _context14.t2;

                                        if (!_v2) _v2 = Value.undef;
                                        return _context14.delegateYield(_v2.tripleEquals(match), 't3', 14);

                                    case 14:
                                        if (!_context14.t3.truthy) {
                                            _context14.next = 16;
                                            break;
                                        }

                                        return _context14.abrupt('return', Value.fromNative(_i10));

                                    case 16:
                                        ++_i10;
                                        _context14.next = 9;
                                        break;

                                    case 19:
                                        return _context14.abrupt('return', Value.fromNative(-1));

                                    case 20:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, indexOf$e, this);
                    })
                }, {
                    key: 'lastIndexOf$e',
                    value: _regenerator2.default.mark(function lastIndexOf$e(thiz, args) {
                        var l, match, startn, _i11, _v3;

                        return _regenerator2.default.wrap(function lastIndexOf$e$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        return _context15.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context15.t0;
                                        match = args[0] || Value.undef;
                                        startn = l - 1;

                                        if (!(args.length > 1)) {
                                            _context15.next = 7;
                                            break;
                                        }

                                        return _context15.delegateYield(args[1].toIntNative(), 't1', 6);

                                    case 6:
                                        startn = _context15.t1;

                                    case 7:
                                        if (isNaN(startn)) startn = 0;
                                        if (startn < 0) startn += l;
                                        if (startn > l) startn = l;

                                        if (!(startn < 0)) {
                                            _context15.next = 12;
                                            break;
                                        }

                                        return _context15.abrupt('return', Value.fromNative(-1));

                                    case 12:
                                        _i11 = startn;

                                    case 13:
                                        if (!(_i11 >= 0)) {
                                            _context15.next = 25;
                                            break;
                                        }

                                        if (thiz.has(_i11)) {
                                            _context15.next = 16;
                                            break;
                                        }

                                        return _context15.abrupt('continue', 22);

                                    case 16:
                                        return _context15.delegateYield(thiz.get(_i11), 't2', 17);

                                    case 17:
                                        _v3 = _context15.t2;

                                        if (!_v3) _v3 = Value.undef;
                                        return _context15.delegateYield(_v3.tripleEquals(match), 't3', 20);

                                    case 20:
                                        if (!_context15.t3.truthy) {
                                            _context15.next = 22;
                                            break;
                                        }

                                        return _context15.abrupt('return', Value.fromNative(_i11));

                                    case 22:
                                        --_i11;
                                        _context15.next = 13;
                                        break;

                                    case 25:
                                        return _context15.abrupt('return', Value.fromNative(-1));

                                    case 26:
                                    case 'end':
                                        return _context15.stop();
                                }
                            }
                        }, lastIndexOf$e, this);
                    })
                }, {
                    key: 'join$e',
                    value: _regenerator2.default.mark(function join$e(thiz, args) {
                        var l, seperator, sepstr, strings, _i12, _v4, sv;

                        return _regenerator2.default.wrap(function join$e$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        return _context16.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context16.t0;
                                        seperator = args[0] || defaultSeperator;
                                        return _context16.delegateYield(seperator.toStringValue(), 't1', 4);

                                    case 4:
                                        sepstr = _context16.t1.native;
                                        strings = new Array(l);
                                        _i12 = 0;

                                    case 7:
                                        if (!(_i12 < l)) {
                                            _context16.next = 24;
                                            break;
                                        }

                                        if (thiz.has(_i12)) {
                                            _context16.next = 10;
                                            break;
                                        }

                                        return _context16.abrupt('continue', 21);

                                    case 10:
                                        return _context16.delegateYield(thiz.get(_i12), 't2', 11);

                                    case 11:
                                        _v4 = _context16.t2;

                                        if (_v4) {
                                            _context16.next = 16;
                                            break;
                                        }

                                        strings[_i12] = '';
                                        _context16.next = 21;
                                        break;

                                    case 16:
                                        if (!(_v4.jsTypeName == 'undefined')) {
                                            _context16.next = 18;
                                            break;
                                        }

                                        return _context16.abrupt('continue', 21);

                                    case 18:
                                        return _context16.delegateYield(_v4.toStringValue(), 't3', 19);

                                    case 19:
                                        sv = _context16.t3;

                                        if (sv) strings[_i12] = sv.native;else strings[_i12] = undefined; //TODO: THROW HERE?

                                    case 21:
                                        ++_i12;
                                        _context16.next = 7;
                                        break;

                                    case 24:
                                        return _context16.abrupt('return', Value.fromNative(strings.join(sepstr)));

                                    case 25:
                                    case 'end':
                                        return _context16.stop();
                                }
                            }
                        }, join$e, this);
                    })
                }, {
                    key: 'push$e',
                    value: _regenerator2.default.mark(function push$e(thiz, args) {
                        var l, _i13, nl;

                        return _regenerator2.default.wrap(function push$e$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        return _context17.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context17.t0;
                                        _i13 = 0;

                                    case 3:
                                        if (!(_i13 < args.length)) {
                                            _context17.next = 8;
                                            break;
                                        }

                                        return _context17.delegateYield(thiz.set(l + _i13, args[_i13]), 't1', 5);

                                    case 5:
                                        ++_i13;
                                        _context17.next = 3;
                                        break;

                                    case 8:
                                        nl = Value.fromNative(l + args.length);
                                        return _context17.delegateYield(thiz.set('length', nl), 't2', 10);

                                    case 10:
                                        return _context17.abrupt('return', Value.fromNative(l + args.length));

                                    case 11:
                                    case 'end':
                                        return _context17.stop();
                                }
                            }
                        }, push$e, this);
                    })
                }, {
                    key: 'pop$e',
                    value: _regenerator2.default.mark(function pop$e(thiz, args) {
                        var l, val;
                        return _regenerator2.default.wrap(function pop$e$(_context18) {
                            while (1) {
                                switch (_context18.prev = _context18.next) {
                                    case 0:
                                        return _context18.delegateYield(forceArrayness(thiz), 't0', 1);

                                    case 1:
                                        return _context18.delegateYield(getLength(thiz), 't1', 2);

                                    case 2:
                                        l = _context18.t1;

                                        if (!(l < 1)) {
                                            _context18.next = 5;
                                            break;
                                        }

                                        return _context18.abrupt('return', Value.undef);

                                    case 5:
                                        return _context18.delegateYield(thiz.get(l - 1), 't2', 6);

                                    case 6:
                                        val = _context18.t2;
                                        return _context18.delegateYield(thiz.set('length', Value.fromNative(l - 1)), 't3', 8);

                                    case 8:
                                        return _context18.abrupt('return', val);

                                    case 9:
                                    case 'end':
                                        return _context18.stop();
                                }
                            }
                        }, pop$e, this);
                    })
                }, {
                    key: 'reverse$e',
                    value: _regenerator2.default.mark(function reverse$e(thiz, args, s) {
                        var l, _i14, lv, rv;

                        return _regenerator2.default.wrap(function reverse$e$(_context19) {
                            while (1) {
                                switch (_context19.prev = _context19.next) {
                                    case 0:
                                        return _context19.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context19.t0;
                                        _i14 = 0;

                                    case 3:
                                        if (!(_i14 < Math.floor(l / 2))) {
                                            _context19.next = 13;
                                            break;
                                        }

                                        return _context19.delegateYield(thiz.get(_i14), 't1', 5);

                                    case 5:
                                        lv = _context19.t1;
                                        return _context19.delegateYield(thiz.get(l - _i14 - 1), 't2', 7);

                                    case 7:
                                        rv = _context19.t2;
                                        return _context19.delegateYield(thiz.set(l - _i14 - 1, lv, s), 't3', 9);

                                    case 9:
                                        return _context19.delegateYield(thiz.set(_i14, rv, s), 't4', 10);

                                    case 10:
                                        ++_i14;
                                        _context19.next = 3;
                                        break;

                                    case 13:
                                        return _context19.abrupt('return', thiz);

                                    case 14:
                                    case 'end':
                                        return _context19.stop();
                                }
                            }
                        }, reverse$e, this);
                    })
                }, {
                    key: 'reduce$e',
                    value: _regenerator2.default.mark(function reduce$e(thiz, args, s) {
                        var l, acc, fx, _i15, _lv;

                        return _regenerator2.default.wrap(function reduce$e$(_context20) {
                            while (1) {
                                switch (_context20.prev = _context20.next) {
                                    case 0:
                                        return _context20.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context20.t0;
                                        acc = undefined;
                                        fx = args[0];

                                        if (!(args.length < 1 || !fx.isCallable)) {
                                            _context20.next = 8;
                                            break;
                                        }

                                        _context20.next = 7;
                                        return CompletionRecord.makeTypeError(s.realm, 'First argument to reduce must be a function.');

                                    case 7:
                                        return _context20.abrupt('return', _context20.sent);

                                    case 8:

                                        if (args.length > 1) {
                                            acc = args[1];
                                        }

                                        _i15 = 0;

                                    case 10:
                                        if (!(_i15 < l)) {
                                            _context20.next = 23;
                                            break;
                                        }

                                        if (thiz.has(_i15)) {
                                            _context20.next = 13;
                                            break;
                                        }

                                        return _context20.abrupt('continue', 20);

                                    case 13:
                                        return _context20.delegateYield(thiz.get(_i15), 't1', 14);

                                    case 14:
                                        _lv = _context20.t1;

                                        if (acc) {
                                            _context20.next = 18;
                                            break;
                                        }

                                        acc = _lv;
                                        return _context20.abrupt('continue', 20);

                                    case 18:
                                        return _context20.delegateYield(fx.call(thiz, [acc, _lv], s), 't2', 19);

                                    case 19:
                                        acc = _context20.t2;

                                    case 20:
                                        ++_i15;
                                        _context20.next = 10;
                                        break;

                                    case 23:
                                        if (acc) {
                                            _context20.next = 27;
                                            break;
                                        }

                                        _context20.next = 26;
                                        return CompletionRecord.makeTypeError(s.realm, 'Reduce an empty array with no initial value.');

                                    case 26:
                                        return _context20.abrupt('return', _context20.sent);

                                    case 27:
                                        return _context20.abrupt('return', acc);

                                    case 28:
                                    case 'end':
                                        return _context20.stop();
                                }
                            }
                        }, reduce$e, this);
                    })

                    //TODO: Factor some stuff out of reduce and reduce right into a common function.

                }, {
                    key: 'reduceRight$e',
                    value: _regenerator2.default.mark(function reduceRight$e(thiz, args, s) {
                        var l, acc, fx, _i16, _lv2;

                        return _regenerator2.default.wrap(function reduceRight$e$(_context21) {
                            while (1) {
                                switch (_context21.prev = _context21.next) {
                                    case 0:
                                        return _context21.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        l = _context21.t0;
                                        acc = undefined;
                                        fx = args[0];

                                        if (!(args.length < 1 || !fx.isCallable)) {
                                            _context21.next = 8;
                                            break;
                                        }

                                        _context21.next = 7;
                                        return CompletionRecord.makeTypeError(s.realm, 'First argument to reduceRight must be a function.');

                                    case 7:
                                        return _context21.abrupt('return', _context21.sent);

                                    case 8:

                                        if (args.length > 1) {
                                            acc = args[1];
                                        }

                                        _i16 = l - 1;

                                    case 10:
                                        if (!(_i16 >= 0)) {
                                            _context21.next = 23;
                                            break;
                                        }

                                        if (thiz.has(_i16)) {
                                            _context21.next = 13;
                                            break;
                                        }

                                        return _context21.abrupt('continue', 20);

                                    case 13:
                                        return _context21.delegateYield(thiz.get(_i16), 't1', 14);

                                    case 14:
                                        _lv2 = _context21.t1;

                                        if (acc) {
                                            _context21.next = 18;
                                            break;
                                        }

                                        acc = _lv2;
                                        return _context21.abrupt('continue', 20);

                                    case 18:
                                        return _context21.delegateYield(fx.call(thiz, [acc, _lv2], s), 't2', 19);

                                    case 19:
                                        acc = _context21.t2;

                                    case 20:
                                        --_i16;
                                        _context21.next = 10;
                                        break;

                                    case 23:
                                        if (acc) {
                                            _context21.next = 27;
                                            break;
                                        }

                                        _context21.next = 26;
                                        return CompletionRecord.makeTypeError(s.realm, 'Reduce an empty array with no initial value.');

                                    case 26:
                                        return _context21.abrupt('return', _context21.sent);

                                    case 27:
                                        return _context21.abrupt('return', acc);

                                    case 28:
                                    case 'end':
                                        return _context21.stop();
                                }
                            }
                        }, reduceRight$e, this);
                    })
                }, {
                    key: 'shift$e',
                    value: _regenerator2.default.mark(function shift$e(thiz, args) {
                        var l, val;
                        return _regenerator2.default.wrap(function shift$e$(_context22) {
                            while (1) {
                                switch (_context22.prev = _context22.next) {
                                    case 0:
                                        return _context22.delegateYield(forceArrayness(thiz), 't0', 1);

                                    case 1:
                                        return _context22.delegateYield(getLength(thiz), 't1', 2);

                                    case 2:
                                        l = _context22.t1;

                                        if (!(l < 1)) {
                                            _context22.next = 5;
                                            break;
                                        }

                                        return _context22.abrupt('return', Value.undef);

                                    case 5:
                                        return _context22.delegateYield(thiz.get(0), 't2', 6);

                                    case 6:
                                        val = _context22.t2;
                                        return _context22.delegateYield(shiftLeft(thiz, 1, 1), 't3', 8);

                                    case 8:
                                        return _context22.abrupt('return', val);

                                    case 9:
                                    case 'end':
                                        return _context22.stop();
                                }
                            }
                        }, shift$e, this);
                    })
                }, {
                    key: 'slice$e',
                    value: _regenerator2.default.mark(function slice$e(thiz, args, s) {
                        var length, result, start, end, _i17;

                        return _regenerator2.default.wrap(function slice$e$(_context23) {
                            while (1) {
                                switch (_context23.prev = _context23.next) {
                                    case 0:
                                        return _context23.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        length = _context23.t0;
                                        result = [];
                                        start = 0;
                                        end = length;

                                        if (!(args.length > 0)) {
                                            _context23.next = 8;
                                            break;
                                        }

                                        return _context23.delegateYield(args[0].toIntNative(), 't1', 7);

                                    case 7:
                                        start = _context23.t1;

                                    case 8:
                                        if (!(args.length > 1)) {
                                            _context23.next = 11;
                                            break;
                                        }

                                        return _context23.delegateYield(args[1].toIntNative(), 't2', 10);

                                    case 10:
                                        end = _context23.t2;

                                    case 11:

                                        if (start < 0) start = length + start;
                                        if (end < 0) end = length + end;

                                        if (end > length) end = length;
                                        if (start < 0) start = 0;

                                        _i17 = start;

                                    case 16:
                                        if (!(_i17 < end)) {
                                            _context23.next = 24;
                                            break;
                                        }

                                        _context23.t3 = result;
                                        return _context23.delegateYield(thiz.get('' + _i17), 't4', 19);

                                    case 19:
                                        _context23.t5 = _context23.t4;

                                        _context23.t3.push.call(_context23.t3, _context23.t5);

                                    case 21:
                                        ++_i17;
                                        _context23.next = 16;
                                        break;

                                    case 24:
                                        return _context23.abrupt('return', ArrayValue.make(result, s.realm));

                                    case 25:
                                    case 'end':
                                        return _context23.stop();
                                }
                            }
                        }, slice$e, this);
                    })
                }, {
                    key: 'splice$e',
                    value: _regenerator2.default.mark(function splice$e(thiz, args, s) {
                        var result, deleteCount, len, start, deleted, toAdd, delta, _i18, _i19;

                        return _regenerator2.default.wrap(function splice$e$(_context24) {
                            while (1) {
                                switch (_context24.prev = _context24.next) {
                                    case 0:
                                        //TODO: Call ToObject() on thisz;

                                        result = [];
                                        deleteCount = undefined;
                                        return _context24.delegateYield(getLength(thiz), 't0', 3);

                                    case 3:
                                        len = _context24.t0;
                                        start = len;

                                        if (!isNaN(len)) {
                                            _context24.next = 7;
                                            break;
                                        }

                                        return _context24.abrupt('return', thiz);

                                    case 7:
                                        if (!(args.length > 0)) {
                                            _context24.next = 10;
                                            break;
                                        }

                                        return _context24.delegateYield(args[0].toIntNative(), 't1', 9);

                                    case 9:
                                        start = _context24.t1;

                                    case 10:

                                        if (start > len) start = len;else if (start < 0) start = len - start;

                                        if (!(args.length > 1)) {
                                            _context24.next = 16;
                                            break;
                                        }

                                        return _context24.delegateYield(args[1].toIntNative(), 't2', 13);

                                    case 13:
                                        deleteCount = _context24.t2;
                                        _context24.next = 17;
                                        break;

                                    case 16:
                                        deleteCount = len - start;

                                    case 17:
                                        if (deleteCount > len - start) deleteCount = len - start;
                                        if (deleteCount < 0) deleteCount = 0;

                                        deleted = [];
                                        toAdd = args.slice(2);
                                        delta = toAdd.length - deleteCount;
                                        _i18 = start;

                                    case 23:
                                        if (!(_i18 < start + deleteCount)) {
                                            _context24.next = 31;
                                            break;
                                        }

                                        _context24.t3 = deleted;
                                        return _context24.delegateYield(thiz.get(_i18), 't4', 26);

                                    case 26:
                                        _context24.t5 = _context24.t4;

                                        _context24.t3.push.call(_context24.t3, _context24.t5);

                                    case 28:
                                        ++_i18;
                                        _context24.next = 23;
                                        break;

                                    case 31:
                                        if (!(delta > 0)) {
                                            _context24.next = 33;
                                            break;
                                        }

                                        return _context24.delegateYield(shiftRight(thiz, start, delta), 't6', 33);

                                    case 33:
                                        if (!(delta < 0)) {
                                            _context24.next = 35;
                                            break;
                                        }

                                        return _context24.delegateYield(shiftLeft(thiz, start - delta, -delta), 't7', 35);

                                    case 35:
                                        _i19 = 0;

                                    case 36:
                                        if (!(_i19 < toAdd.length)) {
                                            _context24.next = 41;
                                            break;
                                        }

                                        return _context24.delegateYield(thiz.set(start + _i19, toAdd[_i19]), 't8', 38);

                                    case 38:
                                        ++_i19;
                                        _context24.next = 36;
                                        break;

                                    case 41:
                                        return _context24.delegateYield(thiz.set('length', Value.fromNative(len + delta)), 't9', 42);

                                    case 42:
                                        return _context24.abrupt('return', ArrayValue.make(deleted, s.realm));

                                    case 43:
                                    case 'end':
                                        return _context24.stop();
                                }
                            }
                        }, splice$e, this);
                    })
                }, {
                    key: 'sort$e',
                    value: _regenerator2.default.mark(function sort$e(thiz, args, s) {
                        var _this2 = this;

                        var length, vals, _i20, comp, _ret, nue, _i21;

                        return _regenerator2.default.wrap(function sort$e$(_context28) {
                            while (1) {
                                switch (_context28.prev = _context28.next) {
                                    case 0:
                                        return _context28.delegateYield(getLength(thiz), 't0', 1);

                                    case 1:
                                        length = _context28.t0;
                                        vals = new Array(length);
                                        _i20 = 0;

                                    case 4:
                                        if (!(_i20 < length)) {
                                            _context28.next = 10;
                                            break;
                                        }

                                        return _context28.delegateYield(thiz.get(_i20), 't1', 6);

                                    case 6:
                                        vals[_i20] = _context28.t1;

                                    case 7:
                                        ++_i20;
                                        _context28.next = 4;
                                        break;

                                    case 10:
                                        comp = _regenerator2.default.mark(function comp(left, right) {
                                            var l, r;
                                            return _regenerator2.default.wrap(function comp$(_context25) {
                                                while (1) {
                                                    switch (_context25.prev = _context25.next) {
                                                        case 0:
                                                            return _context25.delegateYield(left.toStringValue(), 't0', 1);

                                                        case 1:
                                                            l = _context25.t0;

                                                            if (l) {
                                                                _context25.next = 4;
                                                                break;
                                                            }

                                                            return _context25.abrupt('return', false);

                                                        case 4:
                                                            return _context25.delegateYield(right.toStringValue(), 't1', 5);

                                                        case 5:
                                                            r = _context25.t1;

                                                            if (r) {
                                                                _context25.next = 8;
                                                                break;
                                                            }

                                                            return _context25.abrupt('return', true);

                                                        case 8:
                                                            return _context25.delegateYield(l.lt(r), 't2', 9);

                                                        case 9:
                                                            return _context25.abrupt('return', _context25.t2.truthy);

                                                        case 10:
                                                        case 'end':
                                                            return _context25.stop();
                                                    }
                                                }
                                            }, comp, this);
                                        });

                                        if (!(args.length > 0)) {
                                            _context28.next = 16;
                                            break;
                                        }

                                        return _context28.delegateYield(_regenerator2.default.mark(function _callee() {
                                            var fx;
                                            return _regenerator2.default.wrap(function _callee$(_context27) {
                                                while (1) {
                                                    switch (_context27.prev = _context27.next) {
                                                        case 0:
                                                            fx = args[0];

                                                            if (fx.isCallable) {
                                                                _context27.next = 6;
                                                                break;
                                                            }

                                                            _context27.next = 4;
                                                            return CompletionRecord.makeTypeError(s.realm, 'Arg2 not calalble.');

                                                        case 4:
                                                            _context27.t0 = _context27.sent;
                                                            return _context27.abrupt('return', {
                                                                v: _context27.t0
                                                            });

                                                        case 6:
                                                            comp = _regenerator2.default.mark(function comp(left, right) {
                                                                var res;
                                                                return _regenerator2.default.wrap(function comp$(_context26) {
                                                                    while (1) {
                                                                        switch (_context26.prev = _context26.next) {
                                                                            case 0:
                                                                                return _context26.delegateYield(fx.call(Value.undef, [left, right], s), 't0', 1);

                                                                            case 1:
                                                                                res = _context26.t0;
                                                                                return _context26.delegateYield(res.lt(Value.fromNative(0)), 't1', 3);

                                                                            case 3:
                                                                                return _context26.abrupt('return', _context26.t1.truthy);

                                                                            case 4:
                                                                            case 'end':
                                                                                return _context26.stop();
                                                                        }
                                                                    }
                                                                }, comp, this);
                                                            });

                                                        case 7:
                                                        case 'end':
                                                            return _context27.stop();
                                                    }
                                                }
                                            }, _callee, _this2);
                                        })(), 't2', 13);

                                    case 13:
                                        _ret = _context28.t2;

                                        if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
                                            _context28.next = 16;
                                            break;
                                        }

                                        return _context28.abrupt('return', _ret.v);

                                    case 16:
                                        return _context28.delegateYield(_g.sort(vals, comp), 't3', 17);

                                    case 17:
                                        nue = _context28.t3;
                                        _i21 = 0;

                                    case 19:
                                        if (!(_i21 < length)) {
                                            _context28.next = 24;
                                            break;
                                        }

                                        return _context28.delegateYield(thiz.set(_i21, nue[_i21]), 't4', 21);

                                    case 21:
                                        ++_i21;
                                        _context28.next = 19;
                                        break;

                                    case 24:
                                        return _context28.abrupt('return', thiz);

                                    case 25:
                                    case 'end':
                                        return _context28.stop();
                                }
                            }
                        }, sort$e, this);
                    })
                }, {
                    key: 'toString$e',
                    value: _regenerator2.default.mark(function toString$e(thiz, args, s) {
                        var joinfn, ots;
                        return _regenerator2.default.wrap(function toString$e$(_context29) {
                            while (1) {
                                switch (_context29.prev = _context29.next) {
                                    case 0:
                                        return _context29.delegateYield(thiz.get('join'), 't0', 1);

                                    case 1:
                                        joinfn = _context29.t0;

                                        if (!(!joinfn || !joinfn.isCallable)) {
                                            _context29.next = 9;
                                            break;
                                        }

                                        return _context29.delegateYield(s.realm.ObjectPrototype.get('toString'), 't1', 4);

                                    case 4:
                                        ots = _context29.t1;
                                        return _context29.delegateYield(ots.call(thiz, []), 't2', 6);

                                    case 6:
                                        return _context29.abrupt('return', _context29.t2);

                                    case 9:
                                        return _context29.delegateYield(joinfn.call(thiz, [defaultSeperator]), 't3', 10);

                                    case 10:
                                        return _context29.abrupt('return', _context29.t3);

                                    case 11:
                                    case 'end':
                                        return _context29.stop();
                                }
                            }
                        }, toString$e, this);
                    })
                }, {
                    key: 'unshift$e',
                    value: _regenerator2.default.mark(function unshift$e(thiz, args, s) {
                        var amt, len, _i22, nl;

                        return _regenerator2.default.wrap(function unshift$e$(_context30) {
                            while (1) {
                                switch (_context30.prev = _context30.next) {
                                    case 0:
                                        amt = args.length;
                                        return _context30.delegateYield(getLength(thiz), 't0', 2);

                                    case 2:
                                        len = _context30.t0;

                                        if (isNaN(len)) len = 0;
                                        return _context30.delegateYield(shiftRight(thiz, 0, amt), 't1', 5);

                                    case 5:
                                        _i22 = 0;

                                    case 6:
                                        if (!(_i22 < amt)) {
                                            _context30.next = 11;
                                            break;
                                        }

                                        return _context30.delegateYield(thiz.set(_i22, args[_i22]), 't2', 8);

                                    case 8:
                                        ++_i22;
                                        _context30.next = 6;
                                        break;

                                    case 11:
                                        nl = Value.fromNative(len + amt);
                                        return _context30.delegateYield(thiz.set('length', nl, s), 't3', 13);

                                    case 13:
                                        return _context30.abrupt('return', nl);

                                    case 14:
                                    case 'end':
                                        return _context30.stop();
                                }
                            }
                        }, unshift$e, this);
                    })
                }]);
                return ArrayPrototype;
            }(EasyObjectValue);

            ArrayPrototype.prototype.wellKnownName = '%ArrayPrototype%';

            module.exports = ArrayPrototype;

            /***/ },
        /* 169 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var ObjectValue = __webpack_require__(120);
            var ArrayValue = __webpack_require__(146);

            var ArrayObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(ArrayObject, _EasyObjectValue);

                function ArrayObject() {
                    (0, _classCallCheck3.default)(this, ArrayObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ArrayObject).apply(this, arguments));
                }

                (0, _createClass3.default)(ArrayObject, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s) {
                        var result;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (!(args.length === 1 && args[0].jsTypeName === 'number')) {
                                            _context.next = 4;
                                            break;
                                        }

                                        result = ArrayValue.make([], s.realm);
                                        return _context.delegateYield(result.set('length', args[0]), 't0', 3);

                                    case 3:
                                        return _context.abrupt('return', result);

                                    case 4:
                                        return _context.abrupt('return', ArrayValue.make(args, s.realm));

                                    case 5:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.ArrayPrototype;
                    }
                    //objPrototype(realm) { return realm.Function; }

                }], [{
                    key: 'isArray',
                    value: _regenerator2.default.mark(function isArray(thiz, args) {
                        return _regenerator2.default.wrap(function isArray$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        if (!(args.length < 1)) {
                                            _context2.next = 2;
                                            break;
                                        }

                                        return _context2.abrupt('return', EasyObjectValue.false);

                                    case 2:
                                        return _context2.abrupt('return', EasyObjectValue.fromNative(args[0] instanceof ArrayValue));

                                    case 3:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, isArray, this);
                    })
                }]);
                return ArrayObject;
            }(EasyObjectValue);

            module.exports = ArrayObject;

            /***/ },
        /* 170 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var CompletionRecord = __webpack_require__(115);
            var PropertyDescriptor = __webpack_require__(127);

            var StringObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(StringObject, _EasyObjectValue);

                function StringObject() {
                    (0, _classCallCheck3.default)(this, StringObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(StringObject).apply(this, arguments));
                }

                (0, _createClass3.default)(StringObject, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
                        var asConstructor, len, pv, plen;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        asConstructor = ext && ext.asConstructor;

                                        if (asConstructor) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.delegateYield(args[0].toStringValue(), 't0', 3);

                                    case 3:
                                        return _context.abrupt('return', _context.t0);

                                    case 4:
                                        len = 0;

                                        if (!(args.length > 0)) {
                                            _context.next = 12;
                                            break;
                                        }

                                        return _context.delegateYield(args[0].toStringValue(), 't1', 7);

                                    case 7:
                                        pv = _context.t1;

                                        len = pv.native.length;
                                        thiz.primativeValue = pv;
                                        _context.next = 13;
                                        break;

                                    case 12:
                                        thiz.primativeValue = EasyObjectValue.emptyString;

                                    case 13:
                                        plen = new PropertyDescriptor(scope.realm.fromNative(len));

                                        plen.enumerable = false;
                                        plen.configurable = false;
                                        plen.writable = false;
                                        thiz.rawSetProperty('length', plen);
                                        return _context.abrupt('return', thiz);

                                    case 19:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.StringPrototype;
                    }
                }, {
                    key: 'constructorFor',
                    value: function constructorFor(realm) {
                        return realm.StringPrototype;
                    }
                }], [{
                    key: 'fromCharCode',
                    value: _regenerator2.default.mark(function fromCharCode(thiz, args) {
                        var argz, i;
                        return _regenerator2.default.wrap(function fromCharCode$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        argz = new Array(args.length);
                                        i = 0;

                                    case 2:
                                        if (!(i < args.length)) {
                                            _context2.next = 8;
                                            break;
                                        }

                                        return _context2.delegateYield(args[i].toNumberValue(), 't0', 4);

                                    case 4:
                                        argz[i] = _context2.t0.toNative();

                                    case 5:
                                        ++i;
                                        _context2.next = 2;
                                        break;

                                    case 8:
                                        return _context2.abrupt('return', this.fromNative(String.fromCharCode.apply(String, argz)));

                                    case 9:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, fromCharCode, this);
                    })
                }]);
                return StringObject;
            }(EasyObjectValue);

            module.exports = StringObject;

            /***/ },
        /* 171 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var CompletionRecord = __webpack_require__(115);

            var NumberObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(NumberObject, _EasyObjectValue);

                function NumberObject() {
                    (0, _classCallCheck3.default)(this, NumberObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(NumberObject).apply(this, arguments));
                }

                (0, _createClass3.default)(NumberObject, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
                        var asConstructor, pv;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        asConstructor = ext && ext.asConstructor;

                                        if (asConstructor) {
                                            _context.next = 6;
                                            break;
                                        }

                                        if (!(args.length < 1)) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.abrupt('return', EasyObjectValue.zero);

                                    case 4:
                                        return _context.delegateYield(args[0].toNumberValue(), 't0', 5);

                                    case 5:
                                        return _context.abrupt('return', _context.t0);

                                    case 6:
                                        pv = EasyObjectValue.zero;

                                        if (!(args.length > 0)) {
                                            _context.next = 10;
                                            break;
                                        }

                                        return _context.delegateYield(args[0].toNumberValue(), 't1', 9);

                                    case 9:
                                        pv = _context.t1;

                                    case 10:
                                        thiz.primativeValue = pv;

                                    case 11:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.NumberPrototype;
                    }
                }, {
                    key: 'constructorFor',
                    value: function constructorFor(realm) {
                        return realm.NumberPrototype;
                    }
                }], [{
                    key: 'MAX_VALUE$cew',
                    get: function get() {
                        return Number.MAX_VALUE;
                    }
                }, {
                    key: 'MIN_VALUE$cew',
                    get: function get() {
                        return Number.MIN_VALUE;
                    }
                }, {
                    key: 'POSITIVE_INFINITY$cew',
                    get: function get() {
                        return Number.POSITIVE_INFINITY;
                    }
                }, {
                    key: 'NEGATIVE_INFINITY$cew',
                    get: function get() {
                        return Number.NEGATIVE_INFINITY;
                    }
                }, {
                    key: 'NaN$cew',
                    get: function get() {
                        return EasyObjectValue.nan;
                    }
                }]);
                return NumberObject;
            }(EasyObjectValue);

            NumberObject.prototype.wellKnownName = '%Number%';
            module.exports = NumberObject;

            /***/ },
        /* 172 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var Value = __webpack_require__(103);

            var BooleanPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(BooleanPrototype, _EasyObjectValue);

                function BooleanPrototype() {
                    (0, _classCallCheck3.default)(this, BooleanPrototype);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(BooleanPrototype).apply(this, arguments));
                }

                (0, _createClass3.default)(BooleanPrototype, null, [{
                    key: 'toString$e',
                    value: _regenerator2.default.mark(function toString$e(thiz, argz) {
                        return _regenerator2.default.wrap(function toString$e$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (!thiz.primativeValue.truthy) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.fromNative('true'));

                                    case 4:
                                        return _context.abrupt('return', Value.fromNative('false'));

                                    case 5:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, toString$e, this);
                    })
                }]);
                return BooleanPrototype;
            }(EasyObjectValue);

            module.exports = BooleanPrototype;

            /***/ },
        /* 173 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var EasyObjectValue = __webpack_require__(159);

            var Boolean = function (_EasyObjectValue) {
                (0, _inherits3.default)(Boolean, _EasyObjectValue);

                function Boolean() {
                    (0, _classCallCheck3.default)(this, Boolean);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Boolean).apply(this, arguments));
                }

                (0, _createClass3.default)(Boolean, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
                        var asConstructor, pv;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        asConstructor = ext && ext.asConstructor;

                                        if (asConstructor) {
                                            _context.next = 5;
                                            break;
                                        }

                                        if (!(args.length < 1)) {
                                            _context.next = 4;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.false);

                                    case 4:
                                        return _context.abrupt('return', args[0].truthy ? Value.true : Value.false);

                                    case 5:
                                        if (args.length > 0) {
                                            pv = args[0].truthy ? Value.true : Value.false;

                                            thiz.primativeValue = pv;
                                        } else {
                                            thiz.primativeValue = false;
                                        }

                                    case 6:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.BooleanPrototype;
                    }
                }, {
                    key: 'constructorFor',
                    value: function constructorFor(realm) {
                        return realm.BooleanPrototype;
                    }
                }]);
                return Boolean;
            }(EasyObjectValue);

            module.exports = Boolean;

            /***/ },
        /* 174 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var _marked = [toRegexp].map(_regenerator2.default.mark);

            var Value = __webpack_require__(103);
            var ArrayValue = __webpack_require__(146);

            var CompletionRecord = __webpack_require__(115);

            var EasyObjectValue = __webpack_require__(159);
            var _g = __webpack_require__(116);

            function toRegexp(x, realm) {
                return _regenerator2.default.wrap(function toRegexp$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (x.regexp) {
                                    _context.next = 4;
                                    break;
                                }

                                _context.next = 3;
                                return CompletionRecord.makeTypeError(realm, 'Calling regex method on non regex.');

                            case 3:
                                return _context.abrupt('return', _context.sent);

                            case 4:
                                return _context.abrupt('return', x.regexp);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _marked[0], this);
            }

            var RegExpProtoype = function (_EasyObjectValue) {
                (0, _inherits3.default)(RegExpProtoype, _EasyObjectValue);

                function RegExpProtoype(realm) {
                    (0, _classCallCheck3.default)(this, RegExpProtoype);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RegExpProtoype).call(this, realm));

                    _this.regexp = new RegExp();
                    return _this;
                }

                (0, _createClass3.default)(RegExpProtoype, null, [{
                    key: 'test',
                    value: _regenerator2.default.mark(function test(thiz, args, s) {
                        var rx, str;
                        return _regenerator2.default.wrap(function test$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

                                    case 1:
                                        rx = _context2.t0;
                                        str = undefined;

                                        if (!(args.length > 0)) {
                                            _context2.next = 6;
                                            break;
                                        }

                                        return _context2.delegateYield(args[0].toStringNative(), 't1', 5);

                                    case 5:
                                        str = _context2.t1;

                                    case 6:
                                        return _context2.abrupt('return', this.fromNative(rx.test(str)));

                                    case 7:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, test, this);
                    })
                }, {
                    key: 'exec',
                    value: _regenerator2.default.mark(function exec(thiz, args, s) {
                        var rx, li, str, result, wraped, out;
                        return _regenerator2.default.wrap(function exec$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

                                    case 1:
                                        rx = _context4.t0;
                                        return _context4.delegateYield(thiz.get('lastIndex'), 't1', 3);

                                    case 3:
                                        li = _context4.t1;
                                        return _context4.delegateYield(li.toIntNative(), 't2', 5);

                                    case 5:
                                        li = _context4.t2;

                                        if (li < 0) li = 0; //Work around incorrect V8 behavior.
                                        rx.lastIndex = li;
                                        str = undefined;

                                        if (!(args.length > 0)) {
                                            _context4.next = 12;
                                            break;
                                        }

                                        return _context4.delegateYield(args[0].toStringNative(), 't3', 11);

                                    case 11:
                                        str = _context4.t3;

                                    case 12:
                                        result = rx.exec(str);
                                        return _context4.delegateYield(thiz.set('lastIndex', Value.fromNative(rx.lastIndex)), 't4', 14);

                                    case 14:
                                        if (!(result === null)) {
                                            _context4.next = 16;
                                            break;
                                        }

                                        return _context4.abrupt('return', Value.null);

                                    case 16:
                                        return _context4.delegateYield(_g.map(result, _regenerator2.default.mark(function _callee(c) {
                                            return _regenerator2.default.wrap(function _callee$(_context3) {
                                                while (1) {
                                                    switch (_context3.prev = _context3.next) {
                                                        case 0:
                                                            return _context3.abrupt('return', Value.fromNative(c, s.realm));

                                                        case 1:
                                                        case 'end':
                                                            return _context3.stop();
                                                    }
                                                }
                                            }, _callee, this);
                                        })), 't5', 17);

                                    case 17:
                                        wraped = _context4.t5;
                                        out = ArrayValue.make(wraped, s.realm);
                                        return _context4.delegateYield(out.set('index', Value.fromNative(result.index)), 't6', 20);

                                    case 20:
                                        return _context4.delegateYield(out.set('input', Value.fromNative(result.input)), 't7', 21);

                                    case 21:
                                        return _context4.abrupt('return', out);

                                    case 22:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, exec, this);
                    })
                }, {
                    key: 'compile',
                    value: _regenerator2.default.mark(function compile(thiz, args, s) {
                        var rv, regexp;
                        return _regenerator2.default.wrap(function compile$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

                                    case 1:
                                        return _context5.delegateYield(s.realm.RegExp.call(Value.null, args, s), 't1', 2);

                                    case 2:
                                        rv = _context5.t1;
                                        regexp = rv.regexp;

                                        thiz.regexp = regexp;
                                        return _context5.delegateYield(thiz.set('source', Value.fromNative(regexp.source)), 't2', 6);

                                    case 6:
                                        return _context5.delegateYield(thiz.set('global', Value.fromNative(regexp.global)), 't3', 7);

                                    case 7:
                                        return _context5.delegateYield(thiz.set('ignoreCase', Value.fromNative(regexp.ignoreCase)), 't4', 8);

                                    case 8:
                                        return _context5.delegateYield(thiz.set('multiline', Value.fromNative(regexp.multiline)), 't5', 9);

                                    case 9:
                                        return _context5.delegateYield(thiz.set('lastIndex', Value.zero), 't6', 10);

                                    case 10:
                                        return _context5.abrupt('return', Value.undef);

                                    case 11:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, compile, this);
                    })
                }, {
                    key: 'toString',
                    value: _regenerator2.default.mark(function toString(thiz, args, s) {
                        var rx;
                        return _regenerator2.default.wrap(function toString$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

                                    case 1:
                                        rx = _context6.t0;
                                        return _context6.abrupt('return', Value.fromNative(rx.toString()));

                                    case 3:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, toString, this);
                    })
                }, {
                    key: 'source$cw',
                    get: function get() {
                        return Value.fromNative('(?:)');
                    }
                }, {
                    key: 'global$cw',
                    get: function get() {
                        return Value.fromNative(false);
                    }
                }, {
                    key: 'ignoreCase$cw',
                    get: function get() {
                        return Value.fromNative(false);
                    }
                }, {
                    key: 'multiline$cw',
                    get: function get() {
                        return Value.fromNative(false);
                    }
                }, {
                    key: 'lastIndex',
                    get: function get() {
                        return Value.fromNative(0);
                    }
                }]);
                return RegExpProtoype;
            }(EasyObjectValue);

            RegExpProtoype.prototype.wellKnownName = '%RegExpProtoype%';
            RegExpProtoype.prototype.clazz = 'RegExp';

            module.exports = RegExpProtoype;

            /***/ },
        /* 175 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);

            var EasyObjectValue = __webpack_require__(159);
            var RegExpValue = __webpack_require__(144);

            var RegExpObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(RegExpObject, _EasyObjectValue);

                function RegExpObject() {
                    (0, _classCallCheck3.default)(this, RegExpObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RegExpObject).apply(this, arguments));
                }

                (0, _createClass3.default)(RegExpObject, [{
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s) {
                        var pattern, flags, rx;
                        return _regenerator2.default.wrap(function call$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        pattern = '';
                                        flags = '';

                                        if (!(args.length > 0 && args[0] instanceof RegExpValue)) {
                                            _context.next = 8;
                                            break;
                                        }

                                        if (!(args.length > 1 && args[1].truthy)) {
                                            _context.next = 7;
                                            break;
                                        }

                                        _context.next = 6;
                                        return CompletionRecord.makeTypeError(s.realm, 'Cannot supply flags when constructing one RegExp from another');

                                    case 6:
                                        return _context.abrupt('return', _context.sent);

                                    case 7:
                                        return _context.abrupt('return', RegExpValue.make(new RegExp(args[0].regexp), s.realm));

                                    case 8:
                                        if (!(args.length > 0 && args[0].jsTypeName !== 'undefined')) {
                                            _context.next = 11;
                                            break;
                                        }

                                        return _context.delegateYield(args[0].toStringNative(), 't0', 10);

                                    case 10:
                                        pattern = _context.t0;

                                    case 11:
                                        if (!(args.length > 1 && args[1].jsTypeName !== 'undefined')) {
                                            _context.next = 14;
                                            break;
                                        }

                                        return _context.delegateYield(args[1].toStringNative(), 't1', 13);

                                    case 13:
                                        flags = _context.t1;

                                    case 14:
                                        rx = undefined;
                                        _context.prev = 15;

                                        rx = new RegExp(pattern, flags);
                                        _context.next = 24;
                                        break;

                                    case 19:
                                        _context.prev = 19;
                                        _context.t2 = _context['catch'](15);
                                        _context.next = 23;
                                        return new CompletionRecord(CompletionRecord.THROW, Value.fromNative(_context.t2, s.realm));

                                    case 23:
                                        return _context.abrupt('return', _context.sent);

                                    case 24:
                                        return _context.abrupt('return', RegExpValue.make(rx, s.realm));

                                    case 25:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, call, this, [[15, 19]]);
                    })
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.RegExpPrototype;
                    }
                }, {
                    key: 'callLength',
                    get: function get() {
                        return 2;
                    }
                }]);
                return RegExpObject;
            }(EasyObjectValue);

            RegExpObject.prototype.wellKnownName = '%RegExp%';

            module.exports = RegExpObject;

            /***/ },
        /* 176 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var EasyNativeFunction = __webpack_require__(157);
            var Value = __webpack_require__(103);

            var EsperObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(EsperObject, _EasyObjectValue);

                function EsperObject() {
                    (0, _classCallCheck3.default)(this, EsperObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(EsperObject).apply(this, arguments));
                }

                (0, _createClass3.default)(EsperObject, null, [{
                    key: 'dump$cew',
                    value: _regenerator2.default.mark(function dump$cew(thiz, args) {
                        return _regenerator2.default.wrap(function dump$cew$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        console.log('Esper#dump:', args);
                                        if (typeof window !== 'undefined') window.dumped = args[0];
                                        return _context.abrupt('return', Value.undef);

                                    case 3:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, dump$cew, this);
                    })
                }, {
                    key: 'str$cew',
                    value: _regenerator2.default.mark(function str$cew(thiz, args) {
                        var t;
                        return _regenerator2.default.wrap(function str$cew$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        t = Value.undef;

                                        if (args.length > 0) t = args[0];
                                        return _context2.abrupt('return', this.fromNative(t.debugString));

                                    case 3:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, str$cew, this);
                    })
                }, {
                    key: 'stack$cew',
                    value: _regenerator2.default.mark(function stack$cew(thiz, args, scope, extra) {
                        return _regenerator2.default.wrap(function stack$cew$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.abrupt('return', Value.fromNative(extra.evaluator.buildStacktrace().join('\n')));

                                    case 1:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, stack$cew, this);
                    })
                }, {
                    key: 'globals$cew',
                    value: _regenerator2.default.mark(function globals$cew(thiz, args, scope, extra) {
                        return _regenerator2.default.wrap(function globals$cew$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.abrupt('return', scope.global.object);

                                    case 1:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, globals$cew, this);
                    })
                }, {
                    key: 'scope$cew',
                    value: _regenerator2.default.mark(function scope$cew(thiz, args, scope, extra) {
                        return _regenerator2.default.wrap(function scope$cew$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.abrupt('return', scope.object);

                                    case 1:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, scope$cew, this);
                    })
                }]);
                return EsperObject;
            }(EasyObjectValue);

            module.exports = EsperObject;

            /***/ },
        /* 177 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var ObjectValue = __webpack_require__(120);
            var ArrayValue = __webpack_require__(146);
            var PrimitiveValue = __webpack_require__(128);
            var CompletionRecord = __webpack_require__(115);
            var Value = __webpack_require__(103);

            var ErrorPrototype = function (_EasyObjectValue) {
                (0, _inherits3.default)(ErrorPrototype, _EasyObjectValue);

                function ErrorPrototype() {
                    (0, _classCallCheck3.default)(this, ErrorPrototype);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ErrorPrototype).apply(this, arguments));
                }

                (0, _createClass3.default)(ErrorPrototype, null, [{
                    key: 'toString',
                    value: _regenerator2.default.mark(function toString(thiz, argz, s) {
                        var name, message;
                        return _regenerator2.default.wrap(function toString$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.delegateYield(thiz.get('name'), 't0', 1);

                                    case 1:
                                        return _context.delegateYield(_context.t0.toStringNative(), 't1', 2);

                                    case 2:
                                        name = _context.t1;
                                        return _context.delegateYield(thiz.get('message'), 't2', 4);

                                    case 4:
                                        return _context.delegateYield(_context.t2.toStringNative(), 't3', 5);

                                    case 5:
                                        message = _context.t3;

                                        if (!(name && message)) {
                                            _context.next = 10;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.fromNative(name + ': ' + message));

                                    case 10:
                                        if (!message) {
                                            _context.next = 14;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.fromNative(message));

                                    case 14:
                                        return _context.abrupt('return', Value.fromNative(name));

                                    case 15:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, toString, this);
                    })
                }, {
                    key: 'message',
                    get: function get() {
                        return Value.emptyString;
                    }
                }, {
                    key: 'name$',
                    get: function get() {
                        return Value.fromNative('Error');
                    }
                }]);
                return ErrorPrototype;
            }(EasyObjectValue);

            ErrorPrototype.prototype.wellKnownName = '%ErrorPrototype%';

            module.exports = ErrorPrototype;

            /***/ },
        /* 178 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var ObjectValue = __webpack_require__(120);
            var ArrayValue = __webpack_require__(146);
            var PrimitiveValue = __webpack_require__(128);
            var EmptyValue = __webpack_require__(138);
            var ErrorValue = __webpack_require__(145);
            var CompletionRecord = __webpack_require__(115);
            var PropertyDescriptor = __webpack_require__(127);
            var Value = __webpack_require__(103);

            var ErrorObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(ErrorObject, _EasyObjectValue);

                function ErrorObject(realm) {
                    (0, _classCallCheck3.default)(this, ErrorObject);

                    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ErrorObject).call(this, realm));

                    _this.realm = realm;
                    return _this;
                }

                (0, _createClass3.default)(ErrorObject, [{
                    key: 'makeOne',
                    value: function makeOne() {
                        var nue = new ErrorValue(this.realm);
                        var p = this.properties['prototype'];
                        if (p) nue.setPrototype(p.value);
                        return nue;
                    }
                }, {
                    key: 'make',
                    value: function make(message, name) {
                        var nue = this.makeOne();
                        if (message) {
                            nue.setImmediate('message', Value.fromNative(message));
                            nue.properties['message'].enumerable = false;
                            nue.createNativeAnalog().message = message;
                        }

                        if (name) {
                            nue.setImmediate('name', Value.fromNative(name));
                            nue.properties['name'].enumerable = false;
                            nue.createNativeAnalog().name = name;
                        }

                        return nue;
                    }
                }, {
                    key: 'makeFrom',
                    value: function makeFrom(err) {
                        var nue = this.makeOne();
                        if (err.message) nue.setImmediate('message', Value.fromNative(err.message));
                        if (err.name) nue.setImmediate('name', Value.fromNative(err.name));
                        err.native = err;
                        return nue;
                    }
                }, {
                    key: 'makeThisForNew',
                    value: _regenerator2.default.mark(function makeThisForNew() {
                        return _regenerator2.default.wrap(function makeThisForNew$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        return _context.abrupt('return', this.makeOne());

                                    case 1:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, makeThisForNew, this);
                    })
                }, {
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, s, e) {
                        return _regenerator2.default.wrap(function call$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:

                                        if (thiz instanceof EmptyValue) {
                                            thiz = this.makeOne();
                                        }

                                        if (!(args.length > 0)) {
                                            _context2.next = 3;
                                            break;
                                        }

                                        return _context2.delegateYield(thiz.set('message', args[0], s, { enumerable: false }), 't0', 3);

                                    case 3:
                                        if (!(args.length > 1)) {
                                            _context2.next = 5;
                                            break;
                                        }

                                        return _context2.delegateYield(thiz.set('fileName', args[1], s, { enumerable: false }), 't1', 5);

                                    case 5:
                                        if (!(args.length > 2)) {
                                            _context2.next = 7;
                                            break;
                                        }

                                        return _context2.delegateYield(thiz.set('lineNumber', args[2], s, { enumerable: false }), 't2', 7);

                                    case 7:
                                        return _context2.abrupt('return', thiz);

                                    case 8:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, call, this);
                    })
                }, {
                    key: 'makeErrorType',
                    value: function makeErrorType(type) {
                        var proto = new ObjectValue(this.realm);
                        proto.setPrototype(this.realm.ErrorPrototype);
                        proto.setImmediate('name', Value.fromNative(type.name));
                        proto.properties.name.enumerable = false;
                        proto.wellKnownName = '%' + type.name + 'Prototype%';
                        proto.nativeClass = type;

                        var obj = new ErrorObject(this.realm);
                        obj.setPrototype(proto);
                        obj.properties.prototype.value = proto;
                        obj.wellKnownName = '%' + type.name + '%';
                        proto.rawSetProperty('constructor', new PropertyDescriptor(obj, false));
                        return obj;
                    }
                }, {
                    key: 'callPrototype',
                    value: function callPrototype(realm) {
                        return realm.ErrorPrototype;
                    }
                }]);
                return ErrorObject;
            }(EasyObjectValue);

            ErrorObject.prototype.wellKnownName = '%Error%';

            module.exports = ErrorObject;

            /***/ },
        /* 179 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);

            var ObjectValue = __webpack_require__(120);

            var AssertFunction = function (_ObjectValue) {
                (0, _inherits3.default)(AssertFunction, _ObjectValue);

                function AssertFunction() {
                    (0, _classCallCheck3.default)(this, AssertFunction);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(AssertFunction).apply(this, arguments));
                }

                (0, _createClass3.default)(AssertFunction, [{
                    key: 'rawCall',
                    value: _regenerator2.default.mark(function rawCall(n, evalu, scope) {
                        var args, why, check, left, right, i, err;
                        return _regenerator2.default.wrap(function rawCall$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (!(n.arguments.length == 0)) {
                                            _context.next = 2;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.undef);

                                    case 2:
                                        args = new Array(n.arguments.length);
                                        why = '';
                                        check = n.arguments[0];
                                        _context.t0 = check.type;
                                        _context.next = _context.t0 === 'BinaryExpression' ? 8 : 16;
                                        break;

                                    case 8:
                                        return _context.delegateYield(evalu.branch(check.left, scope), 't1', 9);

                                    case 9:
                                        left = _context.t1;
                                        return _context.delegateYield(evalu.branch(check.right, scope), 't2', 11);

                                    case 11:
                                        right = _context.t2;
                                        return _context.delegateYield(evalu.doBinaryEvaluation(check.operator, left, right, scope), 't3', 13);

                                    case 13:
                                        args[0] = _context.t3;

                                        why = n.arguments[0].srcName + ' (' + left.debugString + ' ' + check.operator + ' ' + right.debugString + ')';
                                        return _context.abrupt('break', 19);

                                    case 16:
                                        why = n.arguments[0].srcName || '???';
                                        return _context.delegateYield(evalu.branch(n.arguments[0], scope), 't4', 18);

                                    case 18:
                                        args[0] = _context.t4;

                                    case 19:
                                        i = 1;

                                    case 20:
                                        if (!(i < args.length)) {
                                            _context.next = 26;
                                            break;
                                        }

                                        return _context.delegateYield(evalu.branch(n.arguments[i], scope), 't5', 22);

                                    case 22:
                                        args[i] = _context.t5;

                                    case 23:
                                        ++i;
                                        _context.next = 20;
                                        break;

                                    case 26:
                                        if (!args[0].truthy) {
                                            _context.next = 28;
                                            break;
                                        }

                                        return _context.abrupt('return', Value.undef);

                                    case 28:
                                        if (!(args.length > 1)) {
                                            _context.next = 31;
                                            break;
                                        }

                                        return _context.delegateYield(args[1].toStringNative(), 't6', 30);

                                    case 30:
                                        why = _context.t6;

                                    case 31:
                                        err = scope.realm.Error.make(why, 'AssertionError');
                                        return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, err));

                                    case 33:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, rawCall, this);
                    })
                }, {
                    key: 'call',
                    value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
                        var val, reason, err;
                        return _regenerator2.default.wrap(function call$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        val = Value.undef;

                                        if (!(args.length > 0)) {
                                            _context2.next = 3;
                                            break;
                                        }

                                        return _context2.abrupt('return', Value.undef);

                                    case 3:
                                        if (!val.truthy) {
                                            _context2.next = 5;
                                            break;
                                        }

                                        return _context2.abrupt('return', Value.undef);

                                    case 5:
                                        reason = '';

                                        if (!(args.length > 1)) {
                                            _context2.next = 11;
                                            break;
                                        }

                                        return _context2.delegateYield(args[1].toStringValue(), 't0', 8);

                                    case 8:
                                        reason = _context2.t0.toNative();
                                        _context2.next = 12;
                                        break;

                                    case 11:
                                        if (ext.callNode && ext.callNode.arguments[0]) {
                                            reason = ext.callNode.arguments[0].srcName || '???';
                                        }

                                    case 12:
                                        err = scope.realm.Error.make(reason, 'AssertionError');
                                        return _context2.abrupt('return', new CompletionRecord(CompletionRecord.THROW, err));

                                    case 14:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, call, this);
                    })
                }]);
                return AssertFunction;
            }(ObjectValue);

            module.exports = AssertFunction;

            /***/ },
        /* 180 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var EasyObjectValue = __webpack_require__(159);
            var Value = __webpack_require__(103);

            function makeNumber(num) {
                return 0 + num.toNative();
            }

            function wrapMathFunction(name) {
                var fn = Math[name];
                return _regenerator2.default.mark(function _callee(thiz, args, realm) {
                    var length, argz, i, result;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    length = args.length;
                                    argz = new Array(length);

                                    for (i = 0; i < length; ++i) {
                                        if (i < args.length) argz[i] = args[i].toNative();else argz[i] = undefined;
                                    }

                                    result = fn.apply(Math, argz);
                                    return _context.abrupt('return', Value.fromPrimativeNative(result));

                                case 5:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                });
            }

            var MathObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(MathObject, _EasyObjectValue);

                function MathObject() {
                    (0, _classCallCheck3.default)(this, MathObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(MathObject).apply(this, arguments));
                }

                (0, _createClass3.default)(MathObject, null, [{
                    key: 'E$cew',
                    get: function get() {
                        return Math.E;
                    }
                }, {
                    key: 'LN10$cew',
                    get: function get() {
                        return Math.LN10;
                    }
                }, {
                    key: 'LN2$cew',
                    get: function get() {
                        return Math.LN2;
                    }
                }, {
                    key: 'LOG10E$cew',
                    get: function get() {
                        return Math.LOG10E;
                    }
                }, {
                    key: 'LOG2E$cew',
                    get: function get() {
                        return Math.LOG2E;
                    }
                }, {
                    key: 'PI$cew',
                    get: function get() {
                        return Math.PI;
                    }
                }, {
                    key: 'SQRT1_2$cew',
                    get: function get() {
                        return Math.SQRT1_2;
                    }
                }, {
                    key: 'SQRT2$cew',
                    get: function get() {
                        return Math.SQRT2;
                    }
                }]);
                return MathObject;
            }(EasyObjectValue);

            MathObject.sqrt = wrapMathFunction('sqrt');
            MathObject.atanh = wrapMathFunction('atanh');
            MathObject.log2 = wrapMathFunction('log2');
            MathObject.asinh = wrapMathFunction('asinh');
            MathObject.log = wrapMathFunction('log');
            MathObject.trunc = wrapMathFunction('trunc');
            MathObject.max = wrapMathFunction('max');
            MathObject.log10 = wrapMathFunction('log10');
            MathObject.atan2 = wrapMathFunction('atan2');
            MathObject.round = wrapMathFunction('round');
            MathObject.exp = wrapMathFunction('exp');
            MathObject.tan = wrapMathFunction('tan');
            MathObject.floor = wrapMathFunction('floor');
            MathObject.sign = wrapMathFunction('sign');
            MathObject.fround = wrapMathFunction('fround');
            MathObject.sin = wrapMathFunction('sin');
            MathObject.tanh = wrapMathFunction('tanh');
            MathObject.expm1 = wrapMathFunction('expm1');
            MathObject.cbrt = wrapMathFunction('cbrt');
            MathObject.cos = wrapMathFunction('cos');
            MathObject.abs = wrapMathFunction('abs');
            MathObject.acosh = wrapMathFunction('acosh');
            MathObject.asin = wrapMathFunction('asin');
            MathObject.ceil = wrapMathFunction('ceil');
            MathObject.atan = wrapMathFunction('atan');
            MathObject.cosh = wrapMathFunction('cosh');
            MathObject.random = wrapMathFunction('random');
            MathObject.log1p = wrapMathFunction('log1p');
            MathObject.imul = wrapMathFunction('imul');
            MathObject.hypot = wrapMathFunction('hypot');
            MathObject.pow = wrapMathFunction('pow');
            MathObject.sinh = wrapMathFunction('sinh');
            MathObject.acos = wrapMathFunction('acos');
            MathObject.min = wrapMathFunction('min');
            MathObject.max = wrapMathFunction('max');

            MathObject.prototype.clazz = 'Math';

            module.exports = MathObject;

            /***/ },
        /* 181 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var _marked = [proxy].map(_regenerator2.default.mark);

            var Value = __webpack_require__(103);
            var CompletionRecord = __webpack_require__(115);

            var EasyObjectValue = __webpack_require__(159);

            function proxy(op, thiz, args, s) {
                var realm, printer, strings, i;
                return _regenerator2.default.wrap(function proxy$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                realm = s.realm;
                                printer = realm.print;
                                strings = new Array(args.length);
                                i = 0;

                            case 4:
                                if (!(i < args.length)) {
                                    _context.next = 10;
                                    break;
                                }

                                return _context.delegateYield(args[i].toStringNative(), 't0', 6);

                            case 6:
                                strings[i] = _context.t0;

                            case 7:
                                ++i;
                                _context.next = 4;
                                break;

                            case 10:
                                //console[op].apply(console, strings);
                                printer.apply(realm, strings);
                                return _context.abrupt('return', Value.undef);

                            case 12:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _marked[0], this);
            }

            var Console = function (_EasyObjectValue) {
                (0, _inherits3.default)(Console, _EasyObjectValue);

                function Console() {
                    (0, _classCallCheck3.default)(this, Console);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Console).apply(this, arguments));
                }

                (0, _createClass3.default)(Console, null, [{
                    key: 'log',
                    value: _regenerator2.default.mark(function log(thiz, argz, s) {
                        return _regenerator2.default.wrap(function log$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        return _context2.delegateYield(proxy('log', thiz, argz, s), 't0', 1);

                                    case 1:
                                        return _context2.abrupt('return', _context2.t0);

                                    case 2:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, log, this);
                    })
                }, {
                    key: 'info',
                    value: _regenerator2.default.mark(function info(thiz, argz, s) {
                        return _regenerator2.default.wrap(function info$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        return _context3.delegateYield(proxy('info', thiz, argz, s), 't0', 1);

                                    case 1:
                                        return _context3.abrupt('return', _context3.t0);

                                    case 2:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, info, this);
                    })
                }, {
                    key: 'warn',
                    value: _regenerator2.default.mark(function warn(thiz, argz, s) {
                        return _regenerator2.default.wrap(function warn$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        return _context4.delegateYield(proxy('warn', thiz, argz, s), 't0', 1);

                                    case 1:
                                        return _context4.abrupt('return', _context4.t0);

                                    case 2:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, warn, this);
                    })
                }, {
                    key: 'error',
                    value: _regenerator2.default.mark(function error(thiz, argz, s) {
                        return _regenerator2.default.wrap(function error$(_context5) {
                            while (1) {
                                switch (_context5.prev = _context5.next) {
                                    case 0:
                                        return _context5.delegateYield(proxy('error', thiz, argz, s), 't0', 1);

                                    case 1:
                                        return _context5.abrupt('return', _context5.t0);

                                    case 2:
                                    case 'end':
                                        return _context5.stop();
                                }
                            }
                        }, error, this);
                    })
                }, {
                    key: 'trace',
                    value: _regenerator2.default.mark(function trace(thiz, argz, s) {
                        return _regenerator2.default.wrap(function trace$(_context6) {
                            while (1) {
                                switch (_context6.prev = _context6.next) {
                                    case 0:
                                        return _context6.delegateYield(proxy('trace', thiz, argz, s), 't0', 1);

                                    case 1:
                                        return _context6.abrupt('return', _context6.t0);

                                    case 2:
                                    case 'end':
                                        return _context6.stop();
                                }
                            }
                        }, trace, this);
                    })
                }]);
                return Console;
            }(EasyObjectValue);

            module.exports = Console;

            /***/ },
        /* 182 */
        /***/ function(module, exports, __webpack_require__) {

            'use strict';

            var _weakMap = __webpack_require__(107);

            var _weakMap2 = _interopRequireDefault(_weakMap);

            var _getPrototypeOf = __webpack_require__(121);

            var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

            var _possibleConstructorReturn2 = __webpack_require__(125);

            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

            var _inherits2 = __webpack_require__(126);

            var _inherits3 = _interopRequireDefault(_inherits2);

            var _regenerator = __webpack_require__(3);

            var _regenerator2 = _interopRequireDefault(_regenerator);

            var _getIterator2 = __webpack_require__(100);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            var _keys = __webpack_require__(147);

            var _keys2 = _interopRequireDefault(_keys);

            var _stringify = __webpack_require__(129);

            var _stringify2 = _interopRequireDefault(_stringify);

            var _classCallCheck2 = __webpack_require__(94);

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = __webpack_require__(95);

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Value = __webpack_require__(103);
            var EasyObjectValue = __webpack_require__(159);
            var ObjectValue = __webpack_require__(120);
            var PrimitiveValue = __webpack_require__(128);
            var ArrayValue = __webpack_require__(146);
            var CompletionRecord = __webpack_require__(115);

            var JSONUtils = function () {
                function JSONUtils() {
                    (0, _classCallCheck3.default)(this, JSONUtils);
                }

                (0, _createClass3.default)(JSONUtils, null, [{
                    key: 'genJSONTokens',
                    value: _regenerator2.default.mark(function genJSONTokens(arr, o, map, str, strincr) {
                        var str2, length, i, m, first, _iterator, _isArray, _i, _ref, p, po, v;

                        return _regenerator2.default.wrap(function genJSONTokens$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        str2 = str !== undefined ? str + strincr : undefined;

                                        if (!(o instanceof PrimitiveValue)) {
                                            _context.next = 3;
                                            break;
                                        }

                                        return _context.abrupt('return', arr.push((0, _stringify2.default)(o.native)));

                                    case 3:
                                        if (!map.has(o)) {
                                            _context.next = 5;
                                            break;
                                        }

                                        return _context.abrupt('return', arr.push('[Circular]'));

                                    case 5:
                                        map.set(o, true);

                                        if (!(o instanceof ArrayValue)) {
                                            _context.next = 31;
                                            break;
                                        }

                                        arr.push('[');
                                        return _context.delegateYield(o.get('length'), 't0', 9);

                                    case 9:
                                        return _context.delegateYield(_context.t0.toIntNative(), 't1', 10);

                                    case 10:
                                        length = _context.t1;
                                        i = 0;

                                    case 12:
                                        if (!(i < length)) {
                                            _context.next = 27;
                                            break;
                                        }

                                        if (i > 0) arr.push(',');
                                        if (str !== undefined) arr.push('\n');
                                        return _context.delegateYield(o.get(i), 't2', 16);

                                    case 16:
                                        m = _context.t2;

                                        if (str !== undefined) arr.push(str2);

                                        if (!m) {
                                            _context.next = 24;
                                            break;
                                        }

                                        if (!(m.jsTypeName == 'undefined')) {
                                            _context.next = 23;
                                            break;
                                        }

                                        arr.push('null');
                                        _context.next = 24;
                                        break;

                                    case 23:
                                        return _context.delegateYield(JSONUtils.genJSONTokens(arr, m, map, str2, strincr), 't3', 24);

                                    case 24:
                                        ++i;
                                        _context.next = 12;
                                        break;

                                    case 27:
                                        if (str !== undefined) arr.push('\n');
                                        if (str !== undefined) arr.push(str);
                                        arr.push(']');
                                        return _context.abrupt('return');

                                    case 31:

                                        arr.push('{');

                                        first = true;
                                        _iterator = (0, _keys2.default)(o.properties), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

                                    case 34:
                                        if (!_isArray) {
                                            _context.next = 40;
                                            break;
                                        }

                                        if (!(_i >= _iterator.length)) {
                                            _context.next = 37;
                                            break;
                                        }

                                        return _context.abrupt('break', 59);

                                    case 37:
                                        _ref = _iterator[_i++];
                                        _context.next = 44;
                                        break;

                                    case 40:
                                        _i = _iterator.next();

                                        if (!_i.done) {
                                            _context.next = 43;
                                            break;
                                        }

                                        return _context.abrupt('break', 59);

                                    case 43:
                                        _ref = _i.value;

                                    case 44:
                                        p = _ref;
                                        po = o.properties[p];

                                        if (po.enumerable) {
                                            _context.next = 48;
                                            break;
                                        }

                                        return _context.abrupt('continue', 57);

                                    case 48:
                                        return _context.delegateYield(o.get(p), 't4', 49);

                                    case 49:
                                        v = _context.t4;

                                        if (!(v.jsTypeName === 'function')) {
                                            _context.next = 52;
                                            break;
                                        }

                                        return _context.abrupt('continue', 57);

                                    case 52:

                                        if (first) first = false;else arr.push(',');
                                        if (str !== undefined) arr.push('\n', str2);

                                        arr.push((0, _stringify2.default)(p), ':');
                                        if (str !== undefined) arr.push(' ');
                                        return _context.delegateYield(JSONUtils.genJSONTokens(arr, v, map, str2, strincr), 't5', 57);

                                    case 57:
                                        _context.next = 34;
                                        break;

                                    case 59:
                                        if (str !== undefined) arr.push('\n');
                                        arr.push('}');

                                    case 61:
                                    case 'end':
                                        return _context.stop();
                                }
                            }
                        }, genJSONTokens, this);
                    })
                }]);
                return JSONUtils;
            }();

            var JSONObject = function (_EasyObjectValue) {
                (0, _inherits3.default)(JSONObject, _EasyObjectValue);

                function JSONObject() {
                    (0, _classCallCheck3.default)(this, JSONObject);
                    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(JSONObject).apply(this, arguments));
                }

                (0, _createClass3.default)(JSONObject, null, [{
                    key: 'parse',
                    value: _regenerator2.default.mark(function parse(thiz, args, s) {
                        var str, out;
                        return _regenerator2.default.wrap(function parse$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        str = Value.emptyString;

                                        if (!(args.length > 0)) {
                                            _context2.next = 4;
                                            break;
                                        }

                                        return _context2.delegateYield(args[0].toStringNative(), 't0', 3);

                                    case 3:
                                        str = _context2.t0;

                                    case 4:
                                        _context2.prev = 4;
                                        out = JSON.parse(str, function (k, o) {
                                            if (o === undefined) return Value.undef;
                                            if (o === null) return Value.null;

                                            var prim = Value.fromPrimativeNative(o);
                                            if (prim) return prim;

                                            if (Array.isArray(o)) {
                                                return ArrayValue.make(o, s.realm);
                                            }

                                            var v = new ObjectValue(s.realm);
                                            for (var p in o) {
                                                v.setImmediate(p, o[p]);
                                            }
                                            return v;
                                        });
                                        return _context2.abrupt('return', out);

                                    case 9:
                                        _context2.prev = 9;
                                        _context2.t1 = _context2['catch'](4);
                                        _context2.next = 13;
                                        return new CompletionRecord(CompletionRecord.THROW, Value.fromNative(_context2.t1, s.realm));

                                    case 13:
                                    case 'end':
                                        return _context2.stop();
                                }
                            }
                        }, parse, this, [[4, 9]]);
                    })
                }, {
                    key: 'stringify',
                    value: _regenerator2.default.mark(function stringify(thiz, args, s) {
                        var arr, v, replacer, str, strincr, len;
                        return _regenerator2.default.wrap(function stringify$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        arr = [];
                                        v = Value.undef;
                                        replacer = null;
                                        str = undefined;
                                        strincr = undefined;

                                        if (args.length > 0) v = args[0];
                                        if (args.length > 1) replacer = args[1];

                                        if (!(args.length > 2)) {
                                            _context3.next = 17;
                                            break;
                                        }

                                        str = '';

                                        if (!(args[2].jsTypeName === 'number')) {
                                            _context3.next = 15;
                                            break;
                                        }

                                        return _context3.delegateYield(args[2].toIntNative(), 't0', 11);

                                    case 11:
                                        len = _context3.t0;

                                        strincr = new Array(1 + len).join(' ');
                                        _context3.next = 17;
                                        break;

                                    case 15:
                                        return _context3.delegateYield(args[2].toStringNative(), 't1', 16);

                                    case 16:
                                        strincr = _context3.t1;

                                    case 17:
                                        if (!(v.jsTypeName === 'undefined')) {
                                            _context3.next = 19;
                                            break;
                                        }

                                        return _context3.abrupt('return', Value.undef);

                                    case 19:
                                        return _context3.delegateYield(JSONUtils.genJSONTokens(arr, v, new _weakMap2.default(), str, strincr), 't2', 20);

                                    case 20:
                                        return _context3.abrupt('return', Value.fromNative(arr.join('')));

                                    case 21:
                                    case 'end':
                                        return _context3.stop();
                                }
                            }
                        }, stringify, this);
                    })
                }]);
                return JSONObject;
            }(EasyObjectValue);

            module.exports = JSONObject;

            /***/ },
        /* 183 */
        /***/ function(module, exports) {

            module.exports = {
                "name": "esper.js",
                "version": "0.1.5",
                "description": "Esper javascript interperter.",
                "main": "src/index.js",
                "scripts": {
                    "doc": "esdoc -c esdoc.json",
                    "lint": "jshint src --show-non-errors",
                    "test": "mocha",
                    "repl": "node contrib/cli.js -i",
                    "webpack": "webpack",
                    "demo": "esdoc -c esdoc.json && node contrib/examine-corpus.js && webpack && webpack --test && webpack --test --profile=modern && node contrib/ui.js",
                    "cover": "./node_modules/istanbul/lib/cli.js cover node_modules/.bin/_mocha -- --reporter dot",
                    "dev-server": "webpack-dev-server src/index.js --content-base contrib/ui",
                    "prepublish": "node contrib/build.js",
                    "style": "jscs src"
                },
                "bin": {
                    "esper": "./contrib/cli.js"
                },
                "repository": {
                    "type": "git",
                    "url": "git+ssh://git@github.com/codecombat/esper.js.git"
                },
                "keywords": [
                    "esper",
                    "javascript",
                    "interperter",
                    "ast",
                    "eval"
                ],
                "author": "Rob Blanckaert",
                "license": "MIT",
                "bugs": {
                    "url": "https://github.com/codecombat/esper.js/issues"
                },
                "homepage": "https://github.com/codecombat/esper.js#readme",
                "devDependencies": {
                    "babel-core": "^6.4.0",
                    "babel-loader": "^6.2.1",
                    "babel-plugin-check-es2015-constants": "^6.3.13",
                    "babel-plugin-transform-es2015-arrow-functions": "^6.3.13",
                    "babel-plugin-transform-es2015-block-scoped-functions": "^6.3.13",
                    "babel-plugin-transform-es2015-block-scoping": "^6.3.13",
                    "babel-plugin-transform-es2015-classes": "^6.3.13",
                    "babel-plugin-transform-es2015-computed-properties": "^6.3.13",
                    "babel-plugin-transform-es2015-destructuring": "^6.3.13",
                    "babel-plugin-transform-es2015-for-of": "^6.3.13",
                    "babel-plugin-transform-es2015-function-name": "^6.3.13",
                    "babel-plugin-transform-es2015-literals": "^6.3.13",
                    "babel-plugin-transform-es2015-modules-commonjs": "^6.4.0",
                    "babel-plugin-transform-es2015-object-super": "^6.3.13",
                    "babel-plugin-transform-es2015-parameters": "^6.3.13",
                    "babel-plugin-transform-es2015-shorthand-properties": "^6.3.13",
                    "babel-plugin-transform-es2015-spread": "^6.3.13",
                    "babel-plugin-transform-es2015-sticky-regex": "^6.3.13",
                    "babel-plugin-transform-es2015-template-literals": "^6.3.13",
                    "babel-plugin-transform-es2015-typeof-symbol": "^6.3.13",
                    "babel-plugin-transform-es2015-unicode-regex": "^6.3.13",
                    "babel-plugin-transform-regenerator": "^6.3.13",
                    "babel-plugin-transform-runtime": "^6.6.0",
                    "babel-polyfill": "^6.3.14",
                    "babel-regenerator-runtime": "^6.5.0",
                    "babel-register": "^6.3.13",
                    "babel-runtime": "^6.6.1",
                    "chai": "^3.4.1",
                    "core-js": "^2.1.0",
                    "esdoc": "^0.4.3",
                    "istanbul": "^1.0.0-alpha.2",
                    "json-loader": "^0.5.4",
                    "lodash": "^4.11.2",
                    "lua2js": "0.0.11",
                    "mocha": "^2.4.5",
                    "mocha-loader": "^0.7.1",
                    "raw-loader": "^0.5.1",
                    "v8-profiler": "^5.6.5",
                    "webpack": "^1.12.11",
                    "webpack-dev-server": "^1.14.1"
                },
                "dependencies": {
                    "commander": "^2.9.0",
                    "escodegen": "^1.8.0",
                    "esprima": "^2.7.1"
                }
            };

            /***/ }
        /******/ ])
});
;